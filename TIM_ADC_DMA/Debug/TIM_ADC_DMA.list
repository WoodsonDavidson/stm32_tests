
TIM_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007814  08007814  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800781c  0800781c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4e  00000000  00000000  000328f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00035348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  000364f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024334  00000000  00000000  00037550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001585b  00000000  00000000  0005b884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db472  00000000  00000000  000710df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c551  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a3c  00000000  00000000  0014c5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076e0 	.word	0x080076e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080076e0 	.word	0x080076e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd08 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f8c4 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fa2e 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 fa0c 	bl	80008fc <MX_DMA_Init>
  MX_ADC1_Init();
 80004e4:	f000 f928 	bl	8000738 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f9aa 	bl	8000840 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 80004ec:	f000 f988 	bl	8000800 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004f0:	f004 fc8a 	bl	8004e08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /*static const *///uint16_t adc_data[adc_length];
  adc_data[0] = 33;
 80004f4:	4b52      	ldr	r3, [pc, #328]	; (8000640 <main+0x174>)
 80004f6:	2221      	movs	r2, #33	; 0x21
 80004f8:	801a      	strh	r2, [r3, #0]
  adc_data[1] = 33;
 80004fa:	4b51      	ldr	r3, [pc, #324]	; (8000640 <main+0x174>)
 80004fc:	2221      	movs	r2, #33	; 0x21
 80004fe:	805a      	strh	r2, [r3, #2]
//  adc_data[2] = 33;
//  adc_data[3] = 33;
//  adc_data[4] = 33;


  HAL_TIM_Base_Start(&htim2);
 8000500:	4850      	ldr	r0, [pc, #320]	; (8000644 <main+0x178>)
 8000502:	f003 fc69 	bl	8003dd8 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_data, adc_length);
 8000506:	2202      	movs	r2, #2
 8000508:	494d      	ldr	r1, [pc, #308]	; (8000640 <main+0x174>)
 800050a:	484f      	ldr	r0, [pc, #316]	; (8000648 <main+0x17c>)
 800050c:	f000 fdc6 	bl	800109c <HAL_ADC_Start_DMA>

  uint8_t adc_data_for_txt[adc_length][5];
  uint16_t i;
  uint8_t k;
  uint8_t temp_arr[4];
  for(i = 0; i < adc_length; i = i + 1){
 8000510:	2300      	movs	r3, #0
 8000512:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
 8000516:	e03b      	b.n	8000590 <main+0xc4>
	  VAL_TO_NUMS_ARR(&adc_data[i], temp_arr);
 8000518:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	4a48      	ldr	r2, [pc, #288]	; (8000640 <main+0x174>)
 8000520:	4413      	add	r3, r2
 8000522:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fa4b 	bl	80009c4 <VAL_TO_NUMS_ARR>
	  for(k = 0; k < 4; k = k + 1){
 800052e:	2300      	movs	r3, #0
 8000530:	f887 34cd 	strb.w	r3, [r7, #1229]	; 0x4cd
 8000534:	e018      	b.n	8000568 <main+0x9c>
		  NUM_TO_ASCII(&temp_arr[k], &adc_data_for_txt[i][k]);
 8000536:	f897 34cd 	ldrb.w	r3, [r7, #1229]	; 0x4cd
 800053a:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800053e:	18d4      	adds	r4, r2, r3
 8000540:	f8b7 24ce 	ldrh.w	r2, [r7, #1230]	; 0x4ce
 8000544:	f897 04cd 	ldrb.w	r0, [r7, #1229]	; 0x4cd
 8000548:	f207 41bc 	addw	r1, r7, #1212	; 0x4bc
 800054c:	4613      	mov	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4413      	add	r3, r2
 8000552:	4403      	add	r3, r0
 8000554:	440b      	add	r3, r1
 8000556:	4619      	mov	r1, r3
 8000558:	4620      	mov	r0, r4
 800055a:	f000 faa5 	bl	8000aa8 <NUM_TO_ASCII>
	  for(k = 0; k < 4; k = k + 1){
 800055e:	f897 34cd 	ldrb.w	r3, [r7, #1229]	; 0x4cd
 8000562:	3301      	adds	r3, #1
 8000564:	f887 34cd 	strb.w	r3, [r7, #1229]	; 0x4cd
 8000568:	f897 34cd 	ldrb.w	r3, [r7, #1229]	; 0x4cd
 800056c:	2b03      	cmp	r3, #3
 800056e:	d9e2      	bls.n	8000536 <main+0x6a>
	  }
	  adc_data_for_txt[i][4] = 32;
 8000570:	f8b7 24ce 	ldrh.w	r2, [r7, #1230]	; 0x4ce
 8000574:	4613      	mov	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800057e:	443b      	add	r3, r7
 8000580:	3b10      	subs	r3, #16
 8000582:	2220      	movs	r2, #32
 8000584:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < adc_length; i = i + 1){
 8000586:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800058a:	3301      	adds	r3, #1
 800058c:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
 8000590:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8000594:	2b01      	cmp	r3, #1
 8000596:	d9bf      	bls.n	8000518 <main+0x4c>
  }




float a =3.345;
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <main+0x180>)
 800059a:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800059e:	6013      	str	r3, [r2, #0]




  HAL_SD_Init(&hsd);
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <main+0x184>)
 80005a2:	f002 fc41 	bl	8002e28 <HAL_SD_Init>
  FATFS fileSystem;
  FIL testFile;
  DIR testDir;
  uint8_t testBuffer[16] = "SD write success";
 80005a6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80005aa:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80005ae:	4a29      	ldr	r2, [pc, #164]	; (8000654 <main+0x188>)
 80005b0:	461c      	mov	r4, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UINT testBytes;
  FRESULT res;
  if(f_mount(&fileSystem, SDPath, 1) == FR_OK)
 80005ba:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80005be:	2201      	movs	r2, #1
 80005c0:	4925      	ldr	r1, [pc, #148]	; (8000658 <main+0x18c>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 fadc 	bl	8006b80 <f_mount>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d137      	bne.n	800063e <main+0x172>
  {
     uint8_t path[14] = "signal.txt";
 80005ce:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80005d2:	f2a3 44cc 	subw	r4, r3, #1228	; 0x4cc
 80005d6:	4a21      	ldr	r2, [pc, #132]	; (800065c <main+0x190>)
 80005d8:	4623      	mov	r3, r4
 80005da:	ca07      	ldmia	r2, {r0, r1, r2}
 80005dc:	c303      	stmia	r3!, {r0, r1}
 80005de:	801a      	strh	r2, [r3, #0]
 80005e0:	3302      	adds	r3, #2
 80005e2:	0c12      	lsrs	r2, r2, #16
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	f104 030b 	add.w	r3, r4, #11
 80005ea:	2200      	movs	r2, #0
 80005ec:	801a      	strh	r2, [r3, #0]
 80005ee:	709a      	strb	r2, [r3, #2]
     path[13] = '\0';
 80005f0:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80005f4:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80005f8:	2200      	movs	r2, #0
 80005fa:	735a      	strb	r2, [r3, #13]
     res = f_open(&testFile, (char*)path, FA_WRITE | FA_CREATE_ALWAYS);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000602:	220a      	movs	r2, #10
 8000604:	4618      	mov	r0, r3
 8000606:	f006 fb01 	bl	8006c0c <f_open>
 800060a:	4603      	mov	r3, r0
 800060c:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
     res = f_write(&testFile, adc_data_for_txt, /*1000*/adc_length * 5, &testBytes);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	f207 41bc 	addw	r1, r7, #1212	; 0x4bc
 8000618:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800061c:	220a      	movs	r2, #10
 800061e:	f006 fcb3 	bl	8006f88 <f_write>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
     res = f_close(&testFile);
 8000628:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800062c:	4618      	mov	r0, r3
 800062e:	f006 fe9e 	bl	800736e <f_close>
 8000632:	4603      	mov	r3, r0
 8000634:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
     f_mkdir("signal_Dir");
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <main+0x194>)
 800063a:	f006 fec2 	bl	80073c2 <f_mkdir>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x172>
 8000640:	200001a0 	.word	0x200001a0
 8000644:	20000154 	.word	0x20000154
 8000648:	20000028 	.word	0x20000028
 800064c:	4056147b 	.word	0x4056147b
 8000650:	200000d0 	.word	0x200000d0
 8000654:	08007704 	.word	0x08007704
 8000658:	200001b0 	.word	0x200001b0
 800065c:	08007714 	.word	0x08007714
 8000660:	080076f8 	.word	0x080076f8

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 f82c 	bl	80076d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d4:	2319      	movs	r3, #25
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 ff78 	bl	80025e0 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f6:	f000 fa59 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2105      	movs	r1, #5
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f9d9 	bl	8002ad0 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000724:	f000 fa42 	bl	8000bac <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  __HAL_RCC_ADC1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000754:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075a:	6453      	str	r3, [r2, #68]	; 0x44
 800075c:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <MX_ADC1_Init+0xbc>)
 800075e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_ADC1_Init+0xc0>)
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <MX_ADC1_Init+0xc4>)
 800076c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076e:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <MX_ADC1_Init+0xc0>)
 8000770:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_ADC1_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ADC1_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC1_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_ADC1_Init+0xc0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0xc0>)
 8000792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0xc0>)
 800079a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC1_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0xc0>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC1_Init+0xc0>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_ADC1_Init+0xc0>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <MX_ADC1_Init+0xc0>)
 80007bc:	f000 fc2a 	bl	8001014 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007c6:	f000 f9f1 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4619      	mov	r1, r3
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_ADC1_Init+0xc0>)
 80007de:	f000 fdd1 	bl	8001384 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007e8:	f000 f9e0 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40012000 	.word	0x40012000

08000800 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <MX_SDIO_SD_Init+0x3c>)
 8000808:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <MX_SDIO_SD_Init+0x38>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	200000d0 	.word	0x200000d0
 800083c:	40012c00 	.word	0x40012c00

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_TIM2_Init+0xb4>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <MX_TIM2_Init+0xb4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_TIM2_Init+0xb4>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_TIM2_Init+0xb8>)
 800087c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_TIM2_Init+0xb8>)
 8000884:	2201      	movs	r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_TIM2_Init+0xb8>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1119;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_TIM2_Init+0xb8>)
 8000890:	f240 425f 	movw	r2, #1119	; 0x45f
 8000894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_TIM2_Init+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_TIM2_Init+0xb8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a2:	4815      	ldr	r0, [pc, #84]	; (80008f8 <MX_TIM2_Init+0xb8>)
 80008a4:	f003 fa48 	bl	8003d38 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008ae:	f000 f97d 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_TIM2_Init+0xb8>)
 80008c0:	f003 faf2 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ca:	f000 f96f 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ce:	2320      	movs	r3, #32
 80008d0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_TIM2_Init+0xb8>)
 80008de:	f003 fce5 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80008e8:	f000 f960 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	20000154 	.word	0x20000154

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_DMA_Init+0x3c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <MX_DMA_Init+0x3c>)
 800090c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_DMA_Init+0x3c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2038      	movs	r0, #56	; 0x38
 8000924:	f001 f8a9 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000928:	2038      	movs	r0, #56	; 0x38
 800092a:	f001 f8c2 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <MX_GPIO_Init+0x84>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <MX_GPIO_Init+0x84>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_GPIO_Init+0x84>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_GPIO_Init+0x84>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <MX_GPIO_Init+0x84>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x84>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <VAL_TO_NUMS_ARR>:

/* USER CODE BEGIN 4 */
void VAL_TO_NUMS_ARR(uint16_t *value, uint8_t arr[]){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	arr[0] = *value / 1000;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <VAL_TO_NUMS_ARR+0xd8>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	099b      	lsrs	r3, r3, #6
 80009da:	b29b      	uxth	r3, r3
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
	arr[1] = (*value % 1000) / 100;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <VAL_TO_NUMS_ARR+0xd8>)
 80009e8:	fba2 1203 	umull	r1, r2, r2, r3
 80009ec:	0992      	lsrs	r2, r2, #6
 80009ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f2:	fb01 f202 	mul.w	r2, r1, r2
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <VAL_TO_NUMS_ARR+0xdc>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	095b      	lsrs	r3, r3, #5
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	701a      	strb	r2, [r3, #0]
	arr[2] = ((*value % 1000) % 100) / 10;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <VAL_TO_NUMS_ARR+0xd8>)
 8000a12:	fba2 1203 	umull	r1, r2, r2, r3
 8000a16:	0992      	lsrs	r2, r2, #6
 8000a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1c:	fb01 f202 	mul.w	r2, r1, r2
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <VAL_TO_NUMS_ARR+0xdc>)
 8000a26:	fba2 1203 	umull	r1, r2, r2, r3
 8000a2a:	0952      	lsrs	r2, r2, #5
 8000a2c:	2164      	movs	r1, #100	; 0x64
 8000a2e:	fb01 f202 	mul.w	r2, r1, r2
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <VAL_TO_NUMS_ARR+0xe0>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	3302      	adds	r3, #2
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	701a      	strb	r2, [r3, #0]
	arr[3] = ((*value % 1000) % 100) % 10;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <VAL_TO_NUMS_ARR+0xd8>)
 8000a4e:	fba2 1203 	umull	r1, r2, r2, r3
 8000a52:	0992      	lsrs	r2, r2, #6
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	fb01 f202 	mul.w	r2, r1, r2
 8000a5c:	1a9b      	subs	r3, r3, r2
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <VAL_TO_NUMS_ARR+0xdc>)
 8000a62:	fba2 1203 	umull	r1, r2, r2, r3
 8000a66:	0952      	lsrs	r2, r2, #5
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	fb01 f202 	mul.w	r2, r1, r2
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <VAL_TO_NUMS_ARR+0xe0>)
 8000a74:	fba3 1302 	umull	r1, r3, r3, r2
 8000a78:	08d9      	lsrs	r1, r3, #3
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3303      	adds	r3, #3
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	10624dd3 	.word	0x10624dd3
 8000aa0:	51eb851f 	.word	0x51eb851f
 8000aa4:	cccccccd 	.word	0xcccccccd

08000aa8 <NUM_TO_ASCII>:




void NUM_TO_ASCII(uint8_t *num, uint8_t *num_ascii){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	switch (*num){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b09      	cmp	r3, #9
 8000ab8:	d83e      	bhi.n	8000b38 <NUM_TO_ASCII+0x90>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <NUM_TO_ASCII+0x18>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ae9 	.word	0x08000ae9
 8000ac4:	08000af1 	.word	0x08000af1
 8000ac8:	08000af9 	.word	0x08000af9
 8000acc:	08000b01 	.word	0x08000b01
 8000ad0:	08000b09 	.word	0x08000b09
 8000ad4:	08000b11 	.word	0x08000b11
 8000ad8:	08000b19 	.word	0x08000b19
 8000adc:	08000b21 	.word	0x08000b21
 8000ae0:	08000b29 	.word	0x08000b29
 8000ae4:	08000b31 	.word	0x08000b31
		case 0:
			*num_ascii = 48;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	701a      	strb	r2, [r3, #0]
			break;
 8000aee:	e023      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 1:
			*num_ascii = 49;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2231      	movs	r2, #49	; 0x31
 8000af4:	701a      	strb	r2, [r3, #0]
			break;
 8000af6:	e01f      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 2:
			*num_ascii = 50;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2232      	movs	r2, #50	; 0x32
 8000afc:	701a      	strb	r2, [r3, #0]
			break;
 8000afe:	e01b      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 3:
			*num_ascii = 51;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2233      	movs	r2, #51	; 0x33
 8000b04:	701a      	strb	r2, [r3, #0]
			break;
 8000b06:	e017      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 4:
			*num_ascii = 52;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	701a      	strb	r2, [r3, #0]
			break;
 8000b0e:	e013      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 5:
			*num_ascii = 53;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2235      	movs	r2, #53	; 0x35
 8000b14:	701a      	strb	r2, [r3, #0]
			break;
 8000b16:	e00f      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 6:
			*num_ascii = 54;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2236      	movs	r2, #54	; 0x36
 8000b1c:	701a      	strb	r2, [r3, #0]
			break;
 8000b1e:	e00b      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 7:
			*num_ascii = 55;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2237      	movs	r2, #55	; 0x37
 8000b24:	701a      	strb	r2, [r3, #0]
			break;
 8000b26:	e007      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 8:
			*num_ascii = 56;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2238      	movs	r2, #56	; 0x38
 8000b2c:	701a      	strb	r2, [r3, #0]
			break;
 8000b2e:	e003      	b.n	8000b38 <NUM_TO_ASCII+0x90>
		case 9:
			*num_ascii = 57;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2239      	movs	r2, #57	; 0x39
 8000b34:	701a      	strb	r2, [r3, #0]
			break;
 8000b36:	bf00      	nop
	}
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	static uint8_t var = 0;

	  //HAL_ADC_Stop_DMA(&hadc1);

	if(var < 2){
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x38>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d805      	bhi.n	8000b60 <HAL_ADC_ConvCpltCallback+0x1c>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_data, adc_length);
 8000b54:	2202      	movs	r2, #2
 8000b56:	490a      	ldr	r1, [pc, #40]	; (8000b80 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b5a:	f000 fa9f 	bl	800109c <HAL_ADC_Start_DMA>
 8000b5e:	e002      	b.n	8000b66 <HAL_ADC_ConvCpltCallback+0x22>
	}else{
		HAL_ADC_Stop_DMA(&hadc1);
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b62:	f000 fbab 	bl	80012bc <HAL_ADC_Stop_DMA>
	}
	var = var + 1;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x38>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_ADC_ConvCpltCallback+0x38>)
 8000b70:	701a      	strb	r2, [r3, #0]


  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001a4 	.word	0x200001a4
 8000b80:	200001a0 	.word	0x200001a0
 8000b84:	20000028 	.word	0x20000028

08000b88 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  hoba = hoba + 1;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000b9a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	2000019c 	.word	0x2000019c

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <HAL_ADC_MspInit+0xdc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d157      	bne.n	8000cda <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c62:	2302      	movs	r3, #2
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	481d      	ldr	r0, [pc, #116]	; (8000cec <HAL_ADC_MspInit+0xe4>)
 8000c76:	f001 fb17 	bl	80022a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cc0:	f000 ff12 	bl	8001ae8 <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cca:	f7ff ff6f 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	20000070 	.word	0x20000070
 8000cf4:	40026410 	.word	0x40026410

08000cf8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <HAL_SD_MspInit+0xc0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d14a      	bne.n	8000db0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000d6e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d80:	230c      	movs	r3, #12
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_SD_MspInit+0xc8>)
 8000d8c:	f001 fa8c 	bl	80022a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d90:	2304      	movs	r3, #4
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000da0:	230c      	movs	r3, #12
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_SD_MspInit+0xcc>)
 8000dac:	f001 fa7c 	bl	80022a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d10d      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_TIM_Base_MspInit+0x3c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_TIM_Base_MspInit+0x3c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f89a 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <DMA2_Stream0_IRQHandler+0x10>)
 8000e62:	f000 ffb7 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000070 	.word	0x20000070

08000e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9a:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ebe:	f7ff ffd7 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f006 fbe1 	bl	8007688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fb01 	bl	80004cc <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed8:	08007824 	.word	0x08007824
  ldr r2, =_sbss
 8000edc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee0:	200001e8 	.word	0x200001e8

08000ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fda7 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	200f      	movs	r0, #15
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe4c 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fdbf 	bl	8001ace <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fd87 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	200001a8 	.word	0x200001a8

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001a8 	.word	0x200001a8

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e033      	b.n	8001092 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fde8 	bl	8000c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d118      	bne.n	8001084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105a:	f023 0302 	bic.w	r3, r3, #2
 800105e:	f043 0202 	orr.w	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 faae 	bl	80015c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
 8001082:	e001      	b.n	8001088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Start_DMA+0x1e>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e0e9      	b.n	800128e <HAL_ADC_Start_DMA+0x1f2>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d018      	beq.n	8001102 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e0:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <HAL_ADC_Start_DMA+0x1fc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a6d      	ldr	r2, [pc, #436]	; (800129c <HAL_ADC_Start_DMA+0x200>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0c9a      	lsrs	r2, r3, #18
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001110:	d107      	bne.n	8001122 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001120:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 80a1 	bne.w	8001274 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001170:	d106      	bne.n	8001180 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f023 0206 	bic.w	r2, r3, #6
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
 800117e:	e002      	b.n	8001186 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <HAL_ADC_Start_DMA+0x204>)
 8001190:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <HAL_ADC_Start_DMA+0x208>)
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_ADC_Start_DMA+0x20c>)
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	4a41      	ldr	r2, [pc, #260]	; (80012ac <HAL_ADC_Start_DMA+0x210>)
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	334c      	adds	r3, #76	; 0x4c
 80011de:	4619      	mov	r1, r3
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f000 fd2e 	bl	8001c44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d12a      	bne.n	800124a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_ADC_Start_DMA+0x214>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d015      	beq.n	800122a <HAL_ADC_Start_DMA+0x18e>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <HAL_ADC_Start_DMA+0x218>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d105      	bne.n	8001214 <HAL_ADC_Start_DMA+0x178>
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_ADC_Start_DMA+0x204>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <HAL_ADC_Start_DMA+0x21c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d136      	bne.n	800128c <HAL_ADC_Start_DMA+0x1f0>
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_ADC_Start_DMA+0x204>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d130      	bne.n	800128c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d129      	bne.n	800128c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e020      	b.n	800128c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_ADC_Start_DMA+0x214>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d11b      	bne.n	800128c <HAL_ADC_Start_DMA+0x1f0>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d114      	bne.n	800128c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	e00b      	b.n	800128c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f043 0210 	orr.w	r2, r3, #16
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83
 80012a0:	40012300 	.word	0x40012300
 80012a4:	080017c1 	.word	0x080017c1
 80012a8:	0800187b 	.word	0x0800187b
 80012ac:	08001897 	.word	0x08001897
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40012100 	.word	0x40012100
 80012b8:	40012200 	.word	0x40012200

080012bc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Stop_DMA+0x1a>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e048      	b.n	8001368 <HAL_ADC_Stop_DMA+0xac>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d130      	bne.n	800135e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800130a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d10f      	bne.n	800133a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fce8 	bl	8001cf4 <HAL_DMA_Abort>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001348:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1c>
 800139c:	2302      	movs	r3, #2
 800139e:	e105      	b.n	80015ac <HAL_ADC_ConfigChannel+0x228>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d925      	bls.n	80013fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68d9      	ldr	r1, [r3, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1e      	subs	r3, #30
 80013c6:	2207      	movs	r2, #7
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43da      	mvns	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	400a      	ands	r2, r1
 80013d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68d9      	ldr	r1, [r3, #12]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	4603      	mov	r3, r0
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4403      	add	r3, r0
 80013ee:	3b1e      	subs	r3, #30
 80013f0:	409a      	lsls	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	e022      	b.n	8001442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6919      	ldr	r1, [r3, #16]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	2207      	movs	r2, #7
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	400a      	ands	r2, r1
 800141e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6919      	ldr	r1, [r3, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	4603      	mov	r3, r0
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4403      	add	r3, r0
 8001438:	409a      	lsls	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b06      	cmp	r3, #6
 8001448:	d824      	bhi.n	8001494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b05      	subs	r3, #5
 800145c:	221f      	movs	r2, #31
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	400a      	ands	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b05      	subs	r3, #5
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	; 0x34
 8001492:	e04c      	b.n	800152e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d824      	bhi.n	80014e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b23      	subs	r3, #35	; 0x23
 80014ae:	221f      	movs	r2, #31
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43da      	mvns	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	400a      	ands	r2, r1
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b23      	subs	r3, #35	; 0x23
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
 80014e4:	e023      	b.n	800152e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b41      	subs	r3, #65	; 0x41
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b41      	subs	r3, #65	; 0x41
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_ADC_ConfigChannel+0x234>)
 8001530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a21      	ldr	r2, [pc, #132]	; (80015bc <HAL_ADC_ConfigChannel+0x238>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d109      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1cc>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b12      	cmp	r3, #18
 8001542:	d105      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_ADC_ConfigChannel+0x238>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d123      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x21e>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d003      	beq.n	800156a <HAL_ADC_ConfigChannel+0x1e6>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b11      	cmp	r3, #17
 8001568:	d11b      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d111      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_ADC_ConfigChannel+0x23c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_ADC_ConfigChannel+0x240>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9a      	lsrs	r2, r3, #18
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001594:	e002      	b.n	800159c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3b01      	subs	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f9      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40012300 	.word	0x40012300
 80015bc:	40012000 	.word	0x40012000
 80015c0:	20000000 	.word	0x20000000
 80015c4:	431bde83 	.word	0x431bde83

080015c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d0:	4b79      	ldr	r3, [pc, #484]	; (80017b8 <ADC_Init+0x1f0>)
 80015d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	021a      	lsls	r2, r3, #8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	4a58      	ldr	r2, [pc, #352]	; (80017bc <ADC_Init+0x1f4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d022      	beq.n	80016a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800166e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6899      	ldr	r1, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	e00f      	b.n	80016c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0202 	bic.w	r2, r2, #2
 80016d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	005a      	lsls	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01b      	beq.n	800172c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001702:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001712:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	3b01      	subs	r3, #1
 8001720:	035a      	lsls	r2, r3, #13
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	e007      	b.n	800173c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800173a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	3b01      	subs	r3, #1
 8001758:	051a      	lsls	r2, r3, #20
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800177e:	025a      	lsls	r2, r3, #9
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	029a      	lsls	r2, r3, #10
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40012300 	.word	0x40012300
 80017bc:	0f000001 	.word	0x0f000001

080017c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d13c      	bne.n	8001854 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d12b      	bne.n	800184c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d127      	bne.n	800184c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001814:	2b00      	cmp	r3, #0
 8001816:	d119      	bne.n	800184c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0220 	bic.w	r2, r2, #32
 8001826:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff f979 	bl	8000b44 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001852:	e00e      	b.n	8001872 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fd85 	bl	8001370 <HAL_ADC_ErrorCallback>
}
 8001866:	e004      	b.n	8001872 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff f97d 	bl	8000b88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f043 0204 	orr.w	r2, r3, #4
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff fd5a 	bl	8001370 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fa5e 	bl	8000fb4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e099      	b.n	8001c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b24:	e00f      	b.n	8001b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b26:	f7ff fa45 	bl	8000fb4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d908      	bls.n	8001b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e078      	b.n	8001c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e8      	bne.n	8001b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <HAL_DMA_Init+0x158>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d107      	bne.n	8001bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f023 0307 	bic.w	r3, r3, #7
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d117      	bne.n	8001c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fadf 	bl	80021b0 <DMA_CheckFifoParam>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c06:	2301      	movs	r3, #1
 8001c08:	e016      	b.n	8001c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa96 	bl	8002144 <DMA_CalcBaseAndBitshift>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	223f      	movs	r2, #63	; 0x3f
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	f010803f 	.word	0xf010803f

08001c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Start_IT+0x26>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e040      	b.n	8001cec <HAL_DMA_Start_IT+0xa8>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d12f      	bne.n	8001cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fa28 	bl	80020e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	223f      	movs	r2, #63	; 0x3f
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0216 	orr.w	r2, r2, #22
 8001cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0208 	orr.w	r2, r2, #8
 8001cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e005      	b.n	8001cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d02:	f7ff f957 	bl	8000fb4 <HAL_GetTick>
 8001d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e052      	b.n	8001dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0216 	bic.w	r2, r2, #22
 8001d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <HAL_DMA_Abort+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0208 	bic.w	r2, r2, #8
 8001d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d76:	e013      	b.n	8001da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d78:	f7ff f91c 	bl	8000fb4 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d90c      	bls.n	8001da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e015      	b.n	8001dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e4      	bne.n	8001d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	223f      	movs	r2, #63	; 0x3f
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de0:	4b8e      	ldr	r3, [pc, #568]	; (800201c <HAL_DMA_IRQHandler+0x248>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a8e      	ldr	r2, [pc, #568]	; (8002020 <HAL_DMA_IRQHandler+0x24c>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2208      	movs	r2, #8
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0204 	bic.w	r2, r2, #4
 8001e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2201      	movs	r2, #1
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2204      	movs	r2, #4
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d043      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03c      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2210      	movs	r2, #16
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d024      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e01f      	b.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
 8001f14:	e016      	b.n	8001f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2220      	movs	r2, #32
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 808f 	beq.w	8002074 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8087 	beq.w	8002074 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d136      	bne.n	8001fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0216 	bic.w	r2, r2, #22
 8001f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <HAL_DMA_IRQHandler+0x1da>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0208 	bic.w	r2, r2, #8
 8001fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	223f      	movs	r2, #63	; 0x3f
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d07e      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
        }
        return;
 8001fea:	e079      	b.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01d      	beq.n	8002036 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	2b00      	cmp	r3, #0
 800200e:	d031      	beq.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e02c      	b.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000
 8002020:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e01e      	b.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10f      	bne.n	8002064 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0210 	bic.w	r2, r2, #16
 8002052:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	2b00      	cmp	r3, #0
 800207a:	d032      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d022      	beq.n	80020ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2205      	movs	r2, #5
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d307      	bcc.n	80020bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f2      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x2cc>
 80020ba:	e000      	b.n	80020be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
 80020de:	e000      	b.n	80020e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020e0:	bf00      	nop
    }
  }
}
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d108      	bne.n	8002128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002126:	e007      	b.n	8002138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3b10      	subs	r3, #16
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <DMA_CalcBaseAndBitshift+0x68>)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d909      	bls.n	8002186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	1d1a      	adds	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58
 8002184:	e007      	b.n	8002196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	aaaaaaab 	.word	0xaaaaaaab
 80021ac:	08007778 	.word	0x08007778

080021b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11f      	bne.n	800220a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d856      	bhi.n	800227e <DMA_CheckFifoParam+0xce>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <DMA_CheckFifoParam+0x28>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021fb 	.word	0x080021fb
 80021e0:	080021e9 	.word	0x080021e9
 80021e4:	0800227f 	.word	0x0800227f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d046      	beq.n	8002282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e043      	b.n	8002282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002202:	d140      	bne.n	8002286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002208:	e03d      	b.n	8002286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002212:	d121      	bne.n	8002258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d837      	bhi.n	800228a <DMA_CheckFifoParam+0xda>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <DMA_CheckFifoParam+0x70>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002231 	.word	0x08002231
 8002224:	08002237 	.word	0x08002237
 8002228:	08002231 	.word	0x08002231
 800222c:	08002249 	.word	0x08002249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e030      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d025      	beq.n	800228e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002246:	e022      	b.n	800228e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002250:	d11f      	bne.n	8002292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002256:	e01c      	b.n	8002292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d903      	bls.n	8002266 <DMA_CheckFifoParam+0xb6>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d003      	beq.n	800226c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002264:	e018      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      break;
 800226a:	e015      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00e      	beq.n	8002296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e00b      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 800227e:	bf00      	nop
 8002280:	e00a      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e008      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e006      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
 800228c:	e004      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
 8002290:	e002      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;   
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
    }
  } 
  
  return status; 
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	e16b      	b.n	800259c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	f040 815a 	bne.w	8002596 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d005      	beq.n	80022fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d130      	bne.n	800235c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 0201 	and.w	r2, r3, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b03      	cmp	r3, #3
 8002366:	d017      	beq.n	8002398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d123      	bne.n	80023ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	08da      	lsrs	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3208      	adds	r2, #8
 80023e6:	69b9      	ldr	r1, [r7, #24]
 80023e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0203 	and.w	r2, r3, #3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80b4 	beq.w	8002596 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b60      	ldr	r3, [pc, #384]	; (80025b4 <HAL_GPIO_Init+0x30c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a5f      	ldr	r2, [pc, #380]	; (80025b4 <HAL_GPIO_Init+0x30c>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_GPIO_Init+0x30c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244a:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <HAL_GPIO_Init+0x310>)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x314>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02b      	beq.n	80024ce <HAL_GPIO_Init+0x226>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_GPIO_Init+0x318>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d025      	beq.n	80024ca <HAL_GPIO_Init+0x222>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a50      	ldr	r2, [pc, #320]	; (80025c4 <HAL_GPIO_Init+0x31c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01f      	beq.n	80024c6 <HAL_GPIO_Init+0x21e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <HAL_GPIO_Init+0x320>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x21a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4e      	ldr	r2, [pc, #312]	; (80025cc <HAL_GPIO_Init+0x324>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x216>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4d      	ldr	r2, [pc, #308]	; (80025d0 <HAL_GPIO_Init+0x328>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x212>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4c      	ldr	r2, [pc, #304]	; (80025d4 <HAL_GPIO_Init+0x32c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x20e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4b      	ldr	r2, [pc, #300]	; (80025d8 <HAL_GPIO_Init+0x330>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x20a>
 80024ae:	2307      	movs	r3, #7
 80024b0:	e00e      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024b2:	2308      	movs	r3, #8
 80024b4:	e00c      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024b6:	2306      	movs	r3, #6
 80024b8:	e00a      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024be:	2304      	movs	r3, #4
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024ce:	2300      	movs	r3, #0
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e0:	4935      	ldr	r1, [pc, #212]	; (80025b8 <HAL_GPIO_Init+0x310>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_GPIO_Init+0x334>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_GPIO_Init+0x334>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_GPIO_Init+0x334>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_GPIO_Init+0x334>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f ae90 	bls.w	80022c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40021c00 	.word	0x40021c00
 80025dc:	40013c00 	.word	0x40013c00

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e267      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d075      	beq.n	80026ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00c      	beq.n	8002624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4b85      	ldr	r3, [pc, #532]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	2b08      	cmp	r3, #8
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002622:	d10b      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d05b      	beq.n	80026e8 <HAL_RCC_OscConfig+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d157      	bne.n	80026e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e242      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x74>
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6f      	ldr	r2, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6c      	ldr	r2, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002678:	4b69      	ldr	r3, [pc, #420]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a68      	ldr	r2, [pc, #416]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a65      	ldr	r2, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fc8c 	bl	8000fb4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fc88 	bl	8000fb4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e207      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc78 	bl	8000fb4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fc74 	bl	8000fb4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1f3      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0xe8>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270a:	2b08      	cmp	r3, #8
 800270c:	d11c      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b44      	ldr	r3, [pc, #272]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1c7      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	e03a      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_OscConfig+0x244>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fc2d 	bl	8000fb4 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fc29 	bl	8000fb4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1a8      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4925      	ldr	r1, [pc, #148]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x244>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fc0c 	bl	8000fb4 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe fc08 	bl	8000fb4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e187      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d036      	beq.n	8002838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_RCC_OscConfig+0x248>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fbec 	bl	8000fb4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7fe fbe8 	bl	8000fb4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e167      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x200>
 80027fe:	e01b      	b.n	8002838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x248>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe fbd5 	bl	8000fb4 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e00e      	b.n	800282c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7fe fbd1 	bl	8000fb4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d907      	bls.n	800282c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e150      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
 8002820:	40023800 	.word	0x40023800
 8002824:	42470000 	.word	0x42470000
 8002828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ea      	bne.n	800280e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8097 	beq.w	8002974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b7d      	ldr	r3, [pc, #500]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a7c      	ldr	r2, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b77      	ldr	r3, [pc, #476]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b74      	ldr	r3, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a73      	ldr	r2, [pc, #460]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7fe fb91 	bl	8000fb4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe fb8d 	bl	8000fb4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e10c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x2ea>
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a63      	ldr	r2, [pc, #396]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	e01c      	b.n	8002904 <HAL_RCC_OscConfig+0x324>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x30c>
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x324>
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	4b55      	ldr	r3, [pc, #340]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a54      	ldr	r2, [pc, #336]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fb52 	bl	8000fb4 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fb4e 	bl	8000fb4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0cb      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ee      	beq.n	8002914 <HAL_RCC_OscConfig+0x334>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fb3c 	bl	8000fb4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe fb38 	bl	8000fb4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0b5      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ee      	bne.n	8002940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a1 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d05c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d141      	bne.n	8002a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fb0c 	bl	8000fb4 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fb08 	bl	8000fb4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e087      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	3b01      	subs	r3, #1
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	491b      	ldr	r1, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fae1 	bl	8000fb4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe fadd 	bl	8000fb4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e05c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x416>
 8002a14:	e054      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe faca 	bl	8000fb4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fac6 	bl	8000fb4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e045      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x444>
 8002a42:	e03d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e038      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x4ec>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d028      	beq.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d121      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0cc      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d90c      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d044      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d119      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4934      	ldr	r1, [pc, #208]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f9f8 	bl	8000fb4 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe f9f4 	bl	8000fb4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d20c      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe f958 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08007768 	.word	0x08007768
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca0:	b090      	sub	sp, #64	; 0x40
 8002ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cac:	2300      	movs	r3, #0
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d00d      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x40>
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	f200 80a1 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cce:	e09b      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cd4:	e09b      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cda:	e098      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d04:	2100      	movs	r1, #0
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d08:	fb03 f201 	mul.w	r2, r3, r1
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d16:	fba0 1202 	umull	r1, r2, r0, r2
 8002d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d22:	4413      	add	r3, r2
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	61fa      	str	r2, [r7, #28]
 8002d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d36:	f7fd fa47 	bl	80001c8 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4613      	mov	r3, r2
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d42:	e053      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	617a      	str	r2, [r7, #20]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d56:	f04f 0b00 	mov.w	fp, #0
 8002d5a:	4652      	mov	r2, sl
 8002d5c:	465b      	mov	r3, fp
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6c:	0150      	lsls	r0, r2, #5
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	ebb2 080a 	subs.w	r8, r2, sl
 8002d76:	eb63 090b 	sbc.w	r9, r3, fp
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d92:	eb63 0509 	sbc.w	r5, r3, r9
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	00eb      	lsls	r3, r5, #3
 8002da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da4:	00e2      	lsls	r2, r4, #3
 8002da6:	4614      	mov	r4, r2
 8002da8:	461d      	mov	r5, r3
 8002daa:	eb14 030a 	adds.w	r3, r4, sl
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	eb45 030b 	adc.w	r3, r5, fp
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	028b      	lsls	r3, r1, #10
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dcc:	4621      	mov	r1, r4
 8002dce:	028a      	lsls	r2, r1, #10
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	60fa      	str	r2, [r7, #12]
 8002ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de0:	f7fd f9f2 	bl	80001c8 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4613      	mov	r3, r2
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3740      	adds	r7, #64	; 0x40
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	017d7840 	.word	0x017d7840

08002e28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e022      	b.n	8002e80 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd ff53 	bl	8000cf8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f814 	bl	8002e88 <HAL_SD_InitCard>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00a      	b.n	8002e80 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002ea4:	2376      	movs	r3, #118	; 0x76
 8002ea6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681d      	ldr	r5, [r3, #0]
 8002eac:	466c      	mov	r4, sp
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f001 fa6f 	bl	80043a4 <SDIO_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e04f      	b.n	8002f78 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_SD_InitCard+0xf8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 faa7 	bl	8004436 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_SD_InitCard+0xf8>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f7fe f86c 	bl	8000fcc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fe69 	bl	8003bcc <SD_PowerON>
 8002efa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e02e      	b.n	8002f78 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fd88 	bl	8003a30 <SD_InitCard>
 8002f20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01b      	b.n	8002f78 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fb06 	bl	800455a <SDMMC_CmdBlockLength>
 8002f4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00f      	beq.n	8002f76 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_SD_InitCard+0xfc>)
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f80:	422580a0 	.word	0x422580a0
 8002f84:	004005ff 	.word	0x004005ff

08002f88 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b092      	sub	sp, #72	; 0x48
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f96:	f7fe f80d 	bl	8000fb4 <HAL_GetTick>
 8002f9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1bd      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 81b0 	bne.w	8003328 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d907      	bls.n	8002fec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e1a4      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2203      	movs	r2, #3
 8002ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	2b01      	cmp	r3, #1
 8003002:	d002      	beq.n	800300a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	025b      	lsls	r3, r3, #9
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	025b      	lsls	r3, r3, #9
 8003014:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003016:	2390      	movs	r3, #144	; 0x90
 8003018:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800301a:	2302      	movs	r3, #2
 800301c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003022:	2301      	movs	r3, #1
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f107 0214 	add.w	r2, r7, #20
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fa66 	bl	8004502 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d90a      	bls.n	8003052 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2202      	movs	r2, #2
 8003040:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003048:	4618      	mov	r0, r3
 800304a:	f001 faca 	bl	80045e2 <SDMMC_CmdReadMultiBlock>
 800304e:	6478      	str	r0, [r7, #68]	; 0x44
 8003050:	e009      	b.n	8003066 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fa9d 	bl	800459e <SDMMC_CmdReadSingleBlock>
 8003064:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7a      	ldr	r2, [pc, #488]	; (800325c <HAL_SD_ReadBlocks+0x2d4>)
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e151      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003096:	e061      	b.n	800315c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03c      	beq.n	8003120 <HAL_SD_ReadBlocks+0x198>
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d039      	beq.n	8003120 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	643b      	str	r3, [r7, #64]	; 0x40
 80030b0:	e033      	b.n	800311a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f99f 	bl	80043fa <SDIO_ReadFIFO>
 80030bc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	3301      	adds	r3, #1
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	3b01      	subs	r3, #1
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	3301      	adds	r3, #1
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e4:	3b01      	subs	r3, #1
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	3301      	adds	r3, #1
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	3b01      	subs	r3, #1
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	0e1b      	lsrs	r3, r3, #24
 8003102:	b2da      	uxtb	r2, r3
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	3301      	adds	r3, #1
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003110:	3b01      	subs	r3, #1
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	3301      	adds	r3, #1
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
 800311a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311c:	2b07      	cmp	r3, #7
 800311e:	d9c8      	bls.n	80030b2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003120:	f7fd ff48 	bl	8000fb4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800312c:	429a      	cmp	r2, r3
 800312e:	d902      	bls.n	8003136 <HAL_SD_ReadBlocks+0x1ae>
 8003130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003132:	2b00      	cmp	r3, #0
 8003134:	d112      	bne.n	800315c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_SD_ReadBlocks+0x2d4>)
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0ec      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003162:	f240 332a 	movw	r3, #810	; 0x32a
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d095      	beq.n	8003098 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d022      	beq.n	80031c0 <HAL_SD_ReadBlocks+0x238>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d91f      	bls.n	80031c0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	2b03      	cmp	r3, #3
 8003186:	d01b      	beq.n	80031c0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fa8f 	bl	80046b0 <SDMMC_CmdStopTransfer>
 8003192:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003196:	2b00      	cmp	r3, #0
 8003198:	d012      	beq.n	80031c0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2f      	ldr	r2, [pc, #188]	; (800325c <HAL_SD_ReadBlocks+0x2d4>)
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0ba      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d012      	beq.n	80031f4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <HAL_SD_ReadBlocks+0x2d4>)
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	f043 0208 	orr.w	r2, r3, #8
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0a0      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_SD_ReadBlocks+0x2d4>)
 8003208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	f043 0202 	orr.w	r2, r3, #2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e086      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a08      	ldr	r2, [pc, #32]	; (800325c <HAL_SD_ReadBlocks+0x2d4>)
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e06c      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
 800325c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f001 f8c8 	bl	80043fa <SDIO_ReadFIFO>
 800326a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	b2da      	uxtb	r2, r3
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	3301      	adds	r3, #1
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800327a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327c:	3b01      	subs	r3, #1
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b2da      	uxtb	r2, r3
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328c:	3301      	adds	r3, #1
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003292:	3b01      	subs	r3, #1
 8003294:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	b2da      	uxtb	r2, r3
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80032a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a2:	3301      	adds	r3, #1
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80032a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a8:	3b01      	subs	r3, #1
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	0e1b      	lsrs	r3, r3, #24
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	3301      	adds	r3, #1
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	3b01      	subs	r3, #1
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80032c2:	f7fd fe77 	bl	8000fb4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d902      	bls.n	80032d8 <HAL_SD_ReadBlocks+0x350>
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d112      	bne.n	80032fe <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <HAL_SD_ReadBlocks+0x3b8>)
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e01b      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_SD_ReadBlocks+0x38a>
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1a6      	bne.n	8003260 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f240 523a 	movw	r2, #1338	; 0x53a
 800331a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e006      	b.n	8003336 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3748      	adds	r7, #72	; 0x48
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	004005ff 	.word	0x004005ff

08003344 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b092      	sub	sp, #72	; 0x48
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7fd fe2f 	bl	8000fb4 <HAL_GetTick>
 8003356:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e166      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	f040 8159 	bne.w	8003636 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800338a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	441a      	add	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	429a      	cmp	r2, r3
 8003396:	d907      	bls.n	80033a8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e14d      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d002      	beq.n	80033c6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	025b      	lsls	r3, r3, #9
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	025b      	lsls	r3, r3, #9
 80033d0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033d2:	2390      	movs	r3, #144	; 0x90
 80033d4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033da:	2300      	movs	r3, #0
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80033de:	2301      	movs	r3, #1
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f107 0218 	add.w	r2, r7, #24
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 f888 	bl	8004502 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d90a      	bls.n	800340e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f930 	bl	800466a <SDMMC_CmdWriteMultiBlock>
 800340a:	6478      	str	r0, [r7, #68]	; 0x44
 800340c:	e009      	b.n	8003422 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2210      	movs	r2, #16
 8003412:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f903 	bl	8004626 <SDMMC_CmdWriteSingleBlock>
 8003420:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a87      	ldr	r2, [pc, #540]	; (800364c <HAL_SD_WriteBlocks+0x308>)
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003436:	431a      	orrs	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0fa      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003452:	e065      	b.n	8003520 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d040      	beq.n	80034e4 <HAL_SD_WriteBlocks+0x1a0>
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d03d      	beq.n	80034e4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003468:	2300      	movs	r3, #0
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
 800346c:	e037      	b.n	80034de <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	3301      	adds	r3, #1
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	3b01      	subs	r3, #1
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	3301      	adds	r3, #1
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003494:	3b01      	subs	r3, #1
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	041a      	lsls	r2, r3, #16
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a6:	3301      	adds	r3, #1
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	3b01      	subs	r3, #1
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	061a      	lsls	r2, r3, #24
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	3301      	adds	r3, #1
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	3b01      	subs	r3, #1
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f107 0214 	add.w	r2, r7, #20
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ff9e 	bl	8004414 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	3301      	adds	r3, #1
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d9c4      	bls.n	800346e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034e4:	f7fd fd66 	bl	8000fb4 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d902      	bls.n	80034fa <HAL_SD_WriteBlocks+0x1b6>
 80034f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d112      	bne.n	8003520 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a53      	ldr	r2, [pc, #332]	; (800364c <HAL_SD_WriteBlocks+0x308>)
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e091      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003526:	f240 331a 	movw	r3, #794	; 0x31a
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d091      	beq.n	8003454 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d022      	beq.n	8003584 <HAL_SD_WriteBlocks+0x240>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d91f      	bls.n	8003584 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	2b03      	cmp	r3, #3
 800354a:	d01b      	beq.n	8003584 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f001 f8ad 	bl	80046b0 <SDMMC_CmdStopTransfer>
 8003556:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_SD_WriteBlocks+0x308>)
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e05f      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2d      	ldr	r2, [pc, #180]	; (800364c <HAL_SD_WriteBlocks+0x308>)
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	f043 0208 	orr.w	r2, r3, #8
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e045      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a20      	ldr	r2, [pc, #128]	; (800364c <HAL_SD_WriteBlocks+0x308>)
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	f043 0202 	orr.w	r2, r3, #2
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e02b      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_SD_WriteBlocks+0x308>)
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e011      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f240 523a 	movw	r2, #1338	; 0x53a
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e006      	b.n	8003644 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3748      	adds	r7, #72	; 0x48
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	004005ff 	.word	0x004005ff

08003650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365e:	0f9b      	lsrs	r3, r3, #30
 8003660:	b2da      	uxtb	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	b2da      	uxtb	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	b2da      	uxtb	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	b2da      	uxtb	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	b2da      	uxtb	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b0:	0d1b      	lsrs	r3, r3, #20
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ce:	0bdb      	lsrs	r3, r3, #15
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e0:	0b9b      	lsrs	r3, r3, #14
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f2:	0b5b      	lsrs	r3, r3, #13
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003704:	0b1b      	lsrs	r3, r3, #12
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	2b00      	cmp	r3, #0
 800371e:	d163      	bne.n	80037e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	f640 73fc 	movw	r3, #4092	; 0xffc
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003730:	0f92      	lsrs	r2, r2, #30
 8003732:	431a      	orrs	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373c:	0edb      	lsrs	r3, r3, #27
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	b2da      	uxtb	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374e:	0e1b      	lsrs	r3, r3, #24
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	b2da      	uxtb	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003760:	0d5b      	lsrs	r3, r3, #21
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003784:	0bdb      	lsrs	r3, r3, #15
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	7e1b      	ldrb	r3, [r3, #24]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	3302      	adds	r3, #2
 80037a8:	2201      	movs	r2, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80037b2:	fb03 f202 	mul.w	r2, r3, r2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	7a1b      	ldrb	r3, [r3, #8]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	2201      	movs	r2, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80037d4:	0a52      	lsrs	r2, r2, #9
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
 80037e6:	e031      	b.n	800384c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d11d      	bne.n	800382c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	3301      	adds	r3, #1
 800380c:	029a      	lsls	r2, r3, #10
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003820:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	661a      	str	r2, [r3, #96]	; 0x60
 800382a:	e00f      	b.n	800384c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_SD_GetCardCSD+0x344>)
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e09d      	b.n	8003988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003850:	0b9b      	lsrs	r3, r3, #14
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	b2da      	uxtb	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003862:	09db      	lsrs	r3, r3, #7
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386a:	b2da      	uxtb	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387a:	b2da      	uxtb	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	0fdb      	lsrs	r3, r3, #31
 8003886:	b2da      	uxtb	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	0f5b      	lsrs	r3, r3, #29
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	b2da      	uxtb	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	0e9b      	lsrs	r3, r3, #26
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	0d9b      	lsrs	r3, r3, #22
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	0d5b      	lsrs	r3, r3, #21
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	0bdb      	lsrs	r3, r3, #15
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	0b9b      	lsrs	r3, r3, #14
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	0b1b      	lsrs	r3, r3, #12
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	b2da      	uxtb	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	b2da      	uxtb	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	b2da      	uxtb	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003976:	b2da      	uxtb	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	004005ff 	.word	0x004005ff

08003998 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f970 	bl	8003ce8 <SD_SendStatus>
 8003a08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	0a5b      	lsrs	r3, r3, #9
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003a26:	693b      	ldr	r3, [r7, #16]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	b094      	sub	sp, #80	; 0x50
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd06 	bl	8004452 <SDIO_GetPowerState>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a50:	e0b8      	b.n	8003bc4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d02f      	beq.n	8003aba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 feed 	bl	800483e <SDMMC_CmdSendCID>
 8003a64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <SD_InitCard+0x40>
    {
      return errorstate;
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6e:	e0a9      	b.n	8003bc4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fd30 	bl	80044dc <SDIO_GetResponse>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2104      	movs	r1, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fd27 	bl	80044dc <SDIO_GetResponse>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2108      	movs	r1, #8
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fd1e 	bl	80044dc <SDIO_GetResponse>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	210c      	movs	r1, #12
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fd15 	bl	80044dc <SDIO_GetResponse>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d00d      	beq.n	8003ade <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f107 020e 	add.w	r2, r7, #14
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fef3 	bl	80048b8 <SDMMC_CmdSetRelAdd>
 8003ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SD_InitCard+0xae>
    {
      return errorstate;
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	e072      	b.n	8003bc4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d036      	beq.n	8003b54 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003ae6:	89fb      	ldrh	r3, [r7, #14]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f000 febd 	bl	800487a <SDMMC_CmdSendCSD>
 8003b00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	e05b      	b.n	8003bc4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fce2 	bl	80044dc <SDIO_GetResponse>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2104      	movs	r1, #4
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fcd9 	bl	80044dc <SDIO_GetResponse>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2108      	movs	r1, #8
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fcd0 	bl	80044dc <SDIO_GetResponse>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	210c      	movs	r1, #12
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fcc7 	bl	80044dc <SDIO_GetResponse>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2104      	movs	r1, #4
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fcbe 	bl	80044dc <SDIO_GetResponse>
 8003b60:	4603      	mov	r3, r0
 8003b62:	0d1a      	lsrs	r2, r3, #20
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fd6e 	bl	8003650 <HAL_SD_GetCardCSD>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b7e:	e021      	b.n	8003bc4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	4615      	mov	r5, r2
 8003b90:	4622      	mov	r2, r4
 8003b92:	462b      	mov	r3, r5
 8003b94:	4608      	mov	r0, r1
 8003b96:	f000 fdad 	bl	80046f4 <SDMMC_CmdSelDesel>
 8003b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <SD_InitCard+0x176>
  {
    return errorstate;
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	e00e      	b.n	8003bc4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681d      	ldr	r5, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	466c      	mov	r4, sp
 8003bae:	f103 0210 	add.w	r2, r3, #16
 8003bb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bb8:	3304      	adds	r3, #4
 8003bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f000 fbf1 	bl	80043a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3740      	adds	r7, #64	; 0x40
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdb0      	pop	{r4, r5, r7, pc}

08003bcc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fda8 	bl	800473a <SDMMC_CmdGoIdleState>
 8003bea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	e072      	b.n	8003cdc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fdbb 	bl	8004776 <SDMMC_CmdOperCond>
 8003c00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fd91 	bl	800473a <SDMMC_CmdGoIdleState>
 8003c18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	e05b      	b.n	8003cdc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d137      	bne.n	8003ca2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fdbb 	bl	80047b4 <SDMMC_CmdAppCommand>
 8003c3e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02d      	beq.n	8003ca2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c4a:	e047      	b.n	8003cdc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fdae 	bl	80047b4 <SDMMC_CmdAppCommand>
 8003c58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <SD_PowerON+0x98>
    {
      return errorstate;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	e03b      	b.n	8003cdc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	491e      	ldr	r1, [pc, #120]	; (8003ce4 <SD_PowerON+0x118>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fdc4 	bl	80047f8 <SDMMC_CmdAppOperCommand>
 8003c70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c7c:	e02e      	b.n	8003cdc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fc29 	bl	80044dc <SDIO_GetResponse>
 8003c8a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	0fdb      	lsrs	r3, r3, #31
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <SD_PowerON+0xcc>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <SD_PowerON+0xce>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]

    count++;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d802      	bhi.n	8003cb2 <SD_PowerON+0xe6>
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0cc      	beq.n	8003c4c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d902      	bls.n	8003cc2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc0:	e00c      	b.n	8003cdc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
 8003cd2:	e002      	b.n	8003cda <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	c1100000 	.word	0xc1100000

08003ce8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cfc:	e018      	b.n	8003d30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 fdf5 	bl	80048fa <SDMMC_CmdSendStatus>
 8003d10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	e009      	b.n	8003d30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fbda 	bl	80044dc <SDIO_GetResponse>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd f832 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 f95e 	bl	8004038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e046      	b.n	8003e7e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_TIM_Base_Start+0xb4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d022      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d01d      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_TIM_Base_Start+0xb8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_TIM_Base_Start+0xbc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_TIM_Base_Start+0xc0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_TIM_Base_Start+0xc4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_TIM_Base_Start+0xc8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_TIM_Base_Start+0xcc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d010      	beq.n	8003e7c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40010400 	.word	0x40010400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40001800 	.word	0x40001800

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0b4      	b.n	800402e <HAL_TIM_ConfigClockSource+0x186>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d03e      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0xd4>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f02:	f200 8087 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	f000 8086 	beq.w	800401a <HAL_TIM_ConfigClockSource+0x172>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d87f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d01a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xa6>
 8003f18:	2b70      	cmp	r3, #112	; 0x70
 8003f1a:	d87b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d050      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f20:	2b60      	cmp	r3, #96	; 0x60
 8003f22:	d877      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d03c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f28:	2b50      	cmp	r3, #80	; 0x50
 8003f2a:	d873      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d058      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d86f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d064      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d86b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d060      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d867      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d05c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d05a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	e062      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f000 f985 	bl	800426c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
      break;
 8003f7a:	e04f      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f000 f96e 	bl	800426c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e03c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 f8e2 	bl	8004178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2150      	movs	r1, #80	; 0x50
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f93b 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e02c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 f901 	bl	80041d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2160      	movs	r1, #96	; 0x60
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f92b 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e01c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 f8c2 	bl	8004178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f91b 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8004000:	e00c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 f912 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8004012:	e003      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e000      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800401a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a40      	ldr	r2, [pc, #256]	; (800414c <TIM_Base_SetConfig+0x114>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004056:	d00f      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3d      	ldr	r2, [pc, #244]	; (8004150 <TIM_Base_SetConfig+0x118>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3c      	ldr	r2, [pc, #240]	; (8004154 <TIM_Base_SetConfig+0x11c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <TIM_Base_SetConfig+0x120>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3a      	ldr	r2, [pc, #232]	; (800415c <TIM_Base_SetConfig+0x124>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2f      	ldr	r2, [pc, #188]	; (800414c <TIM_Base_SetConfig+0x114>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004098:	d027      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <TIM_Base_SetConfig+0x118>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d023      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <TIM_Base_SetConfig+0x11c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01f      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <TIM_Base_SetConfig+0x120>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a29      	ldr	r2, [pc, #164]	; (800415c <TIM_Base_SetConfig+0x124>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d017      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a28      	ldr	r2, [pc, #160]	; (8004160 <TIM_Base_SetConfig+0x128>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a27      	ldr	r2, [pc, #156]	; (8004164 <TIM_Base_SetConfig+0x12c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00f      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <TIM_Base_SetConfig+0x130>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a25      	ldr	r2, [pc, #148]	; (800416c <TIM_Base_SetConfig+0x134>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a24      	ldr	r2, [pc, #144]	; (8004170 <TIM_Base_SetConfig+0x138>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a23      	ldr	r2, [pc, #140]	; (8004174 <TIM_Base_SetConfig+0x13c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <TIM_Base_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0xf8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a0c      	ldr	r2, [pc, #48]	; (800415c <TIM_Base_SetConfig+0x124>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	615a      	str	r2, [r3, #20]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40010400 	.word	0x40010400
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800
 800416c:	40001800 	.word	0x40001800
 8004170:	40001c00 	.word	0x40001c00
 8004174:	40002000 	.word	0x40002000

08004178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 030a 	bic.w	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0210 	bic.w	r2, r3, #16
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	f043 0307 	orr.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	431a      	orrs	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e05a      	b.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d01d      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d018      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10c      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40010400 	.word	0x40010400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40001800 	.word	0x40001800

080043a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80043a4:	b084      	sub	sp, #16
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	f107 001c 	add.w	r0, r7, #28
 80043b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80043ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80043bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80043be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80043c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80043c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80043ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80043ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80043de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	b004      	add	sp, #16
 80043f8:	4770      	bx	lr

080043fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2203      	movs	r2, #3
 8004442:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0303 	and.w	r3, r3, #3
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800448c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004492:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004498:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80044a8:	f023 030f 	bic.w	r3, r3, #15
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	b2db      	uxtb	r3, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3314      	adds	r3, #20
 80044ea:	461a      	mov	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4413      	add	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
}  
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004528:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800452e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004534:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800454c:	2300      	movs	r3, #0

}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004568:	2310      	movs	r3, #16
 800456a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff74 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	2110      	movs	r1, #16
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9d7 	bl	8004940 <SDMMC_GetCmdResp1>
 8004592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004594:	69fb      	ldr	r3, [r7, #28]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b088      	sub	sp, #32
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80045ac:	2311      	movs	r3, #17
 80045ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff52 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	2111      	movs	r1, #17
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f9b5 	bl	8004940 <SDMMC_GetCmdResp1>
 80045d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045d8:	69fb      	ldr	r3, [r7, #28]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b088      	sub	sp, #32
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80045f0:	2312      	movs	r3, #18
 80045f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045f4:	2340      	movs	r3, #64	; 0x40
 80045f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff30 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	2112      	movs	r1, #18
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f993 	bl	8004940 <SDMMC_GetCmdResp1>
 800461a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800461c:	69fb      	ldr	r3, [r7, #28]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004634:	2318      	movs	r3, #24
 8004636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004644:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff0e 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	2118      	movs	r1, #24
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f971 	bl	8004940 <SDMMC_GetCmdResp1>
 800465e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004660:	69fb      	ldr	r3, [r7, #28]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b088      	sub	sp, #32
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004678:	2319      	movs	r3, #25
 800467a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff feec 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	2119      	movs	r1, #25
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f94f 	bl	8004940 <SDMMC_GetCmdResp1>
 80046a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046a4:	69fb      	ldr	r3, [r7, #28]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80046bc:	230c      	movs	r3, #12
 80046be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff feca 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <SDMMC_CmdStopTransfer+0x40>)
 80046dc:	210c      	movs	r1, #12
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f92e 	bl	8004940 <SDMMC_GetCmdResp1>
 80046e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	05f5e100 	.word	0x05f5e100

080046f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004704:	2307      	movs	r3, #7
 8004706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004714:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	4619      	mov	r1, r3
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fea6 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	2107      	movs	r1, #7
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f909 	bl	8004940 <SDMMC_GetCmdResp1>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004732:	4618      	mov	r0, r3
 8004734:	3728      	adds	r7, #40	; 0x28
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b088      	sub	sp, #32
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004756:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004758:	f107 0308 	add.w	r3, r7, #8
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fe85 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fb23 	bl	8004db0 <SDMMC_GetCmdError>
 800476a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800476c:	69fb      	ldr	r3, [r7, #28]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b088      	sub	sp, #32
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800477e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004784:	2308      	movs	r3, #8
 8004786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004788:	2340      	movs	r3, #64	; 0x40
 800478a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004796:	f107 0308 	add.w	r3, r7, #8
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fe66 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fab6 	bl	8004d14 <SDMMC_GetCmdResp7>
 80047a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047aa:	69fb      	ldr	r3, [r7, #28]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80047c2:	2337      	movs	r3, #55	; 0x37
 80047c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047c6:	2340      	movs	r3, #64	; 0x40
 80047c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe47 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80047e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e4:	2137      	movs	r1, #55	; 0x37
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8aa 	bl	8004940 <SDMMC_GetCmdResp1>
 80047ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047ee:	69fb      	ldr	r3, [r7, #28]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800480e:	2329      	movs	r3, #41	; 0x29
 8004810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004812:	2340      	movs	r3, #64	; 0x40
 8004814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800481a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004820:	f107 0308 	add.w	r3, r7, #8
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fe21 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f9bd 	bl	8004bac <SDMMC_GetCmdResp3>
 8004832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004834:	69fb      	ldr	r3, [r7, #28]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800484a:	2302      	movs	r3, #2
 800484c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800484e:	23c0      	movs	r3, #192	; 0xc0
 8004850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fe03 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f957 	bl	8004b1c <SDMMC_GetCmdResp2>
 800486e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004870:	69fb      	ldr	r3, [r7, #28]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b088      	sub	sp, #32
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004888:	2309      	movs	r3, #9
 800488a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800488c:	23c0      	movs	r3, #192	; 0xc0
 800488e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004898:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fde4 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f938 	bl	8004b1c <SDMMC_GetCmdResp2>
 80048ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ae:	69fb      	ldr	r3, [r7, #28]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80048c6:	2303      	movs	r3, #3
 80048c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fdc5 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	2103      	movs	r1, #3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f99d 	bl	8004c28 <SDMMC_GetCmdResp6>
 80048ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048f0:	69fb      	ldr	r3, [r7, #28]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b088      	sub	sp, #32
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004908:	230d      	movs	r3, #13
 800490a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800490c:	2340      	movs	r3, #64	; 0x40
 800490e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fda4 	bl	800446e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	210d      	movs	r1, #13
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f807 	bl	8004940 <SDMMC_GetCmdResp1>
 8004932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004934:	69fb      	ldr	r3, [r7, #28]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	460b      	mov	r3, r1
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800494e:	4b70      	ldr	r3, [pc, #448]	; (8004b10 <SDMMC_GetCmdResp1+0x1d0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a70      	ldr	r2, [pc, #448]	; (8004b14 <SDMMC_GetCmdResp1+0x1d4>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	0a5a      	lsrs	r2, r3, #9
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	61fa      	str	r2, [r7, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800496c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004970:	e0c9      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ef      	beq.n	8004962 <SDMMC_GetCmdResp1+0x22>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ea      	bne.n	8004962 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2204      	movs	r2, #4
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800499e:	2304      	movs	r3, #4
 80049a0:	e0b1      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0a6      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22c5      	movs	r2, #197	; 0xc5
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff fd7f 	bl	80044c2 <SDIO_GetCommandResponse>
 80049c4:	4603      	mov	r3, r0
 80049c6:	461a      	mov	r2, r3
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d001      	beq.n	80049d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e099      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80049d2:	2100      	movs	r1, #0
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff fd81 	bl	80044dc <SDIO_GetResponse>
 80049da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <SDMMC_GetCmdResp1+0x1d8>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e08d      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da02      	bge.n	80049f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80049f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f4:	e087      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004a00:	2340      	movs	r3, #64	; 0x40
 8004a02:	e080      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	e079      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a20:	e071      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a30:	e069      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a40:	e061      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a50:	e059      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a60:	e051      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a70:	e049      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a80:	e041      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a90:	e039      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aa0:	e031      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004aac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ab0:	e029      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004abc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ac0:	e021      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004acc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ad0:	e019      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ae0:	e011      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004af0:	e009      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004afc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004b00:	e001      	b.n	8004b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000000 	.word	0x20000000
 8004b14:	10624dd3 	.word	0x10624dd3
 8004b18:	fdffe008 	.word	0xfdffe008

08004b1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b24:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <SDMMC_GetCmdResp2+0x88>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <SDMMC_GetCmdResp2+0x8c>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	0a5b      	lsrs	r3, r3, #9
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	60fa      	str	r2, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b48:	e026      	b.n	8004b98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <SDMMC_GetCmdResp2+0x1e>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ea      	bne.n	8004b3a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2204      	movs	r2, #4
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b76:	2304      	movs	r3, #4
 8004b78:	e00e      	b.n	8004b98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e003      	b.n	8004b98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	22c5      	movs	r2, #197	; 0xc5
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	10624dd3 	.word	0x10624dd3

08004bac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <SDMMC_GetCmdResp3+0x74>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <SDMMC_GetCmdResp3+0x78>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	0a5b      	lsrs	r3, r3, #9
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1e5a      	subs	r2, r3, #1
 8004bce:	60fa      	str	r2, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bd8:	e01b      	b.n	8004c12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <SDMMC_GetCmdResp3+0x1e>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ea      	bne.n	8004bca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2204      	movs	r2, #4
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c06:	2304      	movs	r3, #4
 8004c08:	e003      	b.n	8004c12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	22c5      	movs	r2, #197	; 0xc5
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000000 	.word	0x20000000
 8004c24:	10624dd3 	.word	0x10624dd3

08004c28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	460b      	mov	r3, r1
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c36:	4b35      	ldr	r3, [pc, #212]	; (8004d0c <SDMMC_GetCmdResp6+0xe4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <SDMMC_GetCmdResp6+0xe8>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	0a5b      	lsrs	r3, r3, #9
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	1e5a      	subs	r2, r3, #1
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c5a:	e052      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ef      	beq.n	8004c4c <SDMMC_GetCmdResp6+0x24>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1ea      	bne.n	8004c4c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2204      	movs	r2, #4
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c88:	2304      	movs	r3, #4
 8004c8a:	e03a      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e02f      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fc0d 	bl	80044c2 <SDIO_GetCommandResponse>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	7afb      	ldrb	r3, [r7, #11]
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d001      	beq.n	8004cb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e025      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	22c5      	movs	r2, #197	; 0xc5
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff fc0c 	bl	80044dc <SDIO_GetResponse>
 8004cc4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	0c1b      	lsrs	r3, r3, #16
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e011      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cec:	e009      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cfc:	e001      	b.n	8004d02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000000 	.word	0x20000000
 8004d10:	10624dd3 	.word	0x10624dd3

08004d14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <SDMMC_GetCmdResp7+0x94>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <SDMMC_GetCmdResp7+0x98>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0a5b      	lsrs	r3, r3, #9
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	60fa      	str	r2, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d40:	e02c      	b.n	8004d9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0ef      	beq.n	8004d32 <SDMMC_GetCmdResp7+0x1e>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ea      	bne.n	8004d32 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d6e:	2304      	movs	r3, #4
 8004d70:	e014      	b.n	8004d9c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e009      	b.n	8004d9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d9a:	2300      	movs	r3, #0
  
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000000 	.word	0x20000000
 8004dac:	10624dd3 	.word	0x10624dd3

08004db0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <SDMMC_GetCmdError+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <SDMMC_GetCmdError+0x54>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0a5b      	lsrs	r3, r3, #9
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1e5a      	subs	r2, r3, #1
 8004dd2:	60fa      	str	r2, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ddc:	e009      	b.n	8004df2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f1      	beq.n	8004dce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	22c5      	movs	r2, #197	; 0xc5
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000000 	.word	0x20000000
 8004e04:	10624dd3 	.word	0x10624dd3

08004e08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004e0c:	4904      	ldr	r1, [pc, #16]	; (8004e20 <MX_FATFS_Init+0x18>)
 8004e0e:	4805      	ldr	r0, [pc, #20]	; (8004e24 <MX_FATFS_Init+0x1c>)
 8004e10:	f002 fc2a 	bl	8007668 <FATFS_LinkDriver>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <MX_FATFS_Init+0x20>)
 8004e1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200001b0 	.word	0x200001b0
 8004e24:	08007780 	.word	0x08007780
 8004e28:	200001ac 	.word	0x200001ac

08004e2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004e46:	f000 f86b 	bl	8004f20 <BSP_SD_IsDetected>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e005      	b.n	8004e60 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004e54:	4804      	ldr	r0, [pc, #16]	; (8004e68 <BSP_SD_Init+0x2c>)
 8004e56:	f7fd ffe7 	bl	8002e28 <HAL_SD_Init>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200000d0 	.word	0x200000d0

08004e6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <BSP_SD_ReadBlocks+0x38>)
 8004e8a:	f7fe f87d 	bl	8002f88 <HAL_SD_ReadBlocks>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200000d0 	.word	0x200000d0

08004ea8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	4806      	ldr	r0, [pc, #24]	; (8004ee0 <BSP_SD_WriteBlocks+0x38>)
 8004ec6:	f7fe fa3d 	bl	8003344 <HAL_SD_WriteBlocks>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200000d0 	.word	0x200000d0

08004ee4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004ee8:	4805      	ldr	r0, [pc, #20]	; (8004f00 <BSP_SD_GetCardState+0x1c>)
 8004eea:	f7fe fd81 	bl	80039f0 <HAL_SD_GetCardState>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200000d0 	.word	0x200000d0

08004f04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4803      	ldr	r0, [pc, #12]	; (8004f1c <BSP_SD_GetCardInfo+0x18>)
 8004f10:	f7fe fd42 	bl	8003998 <HAL_SD_GetCardInfo>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200000d0 	.word	0x200000d0

08004f20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004f26:	2301      	movs	r3, #1
 8004f28:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	b2db      	uxtb	r3, r3
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <SD_CheckStatus+0x38>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004f4c:	f7ff ffca 	bl	8004ee4 <BSP_SD_GetCardState>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004f56:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <SD_CheckStatus+0x38>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <SD_CheckStatus+0x38>)
 8004f64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <SD_CheckStatus+0x38>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b2db      	uxtb	r3, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000009 	.word	0x20000009

08004f78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <SD_initialize+0x38>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004f88:	f7ff ff58 	bl	8004e3c <BSP_SD_Init>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffd1 	bl	8004f3c <SD_CheckStatus>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <SD_initialize+0x38>)
 8004fa0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <SD_initialize+0x38>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b2db      	uxtb	r3, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000009 	.word	0x20000009

08004fb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff ffbb 	bl	8004f3c <SD_CheckStatus>
 8004fc6:	4603      	mov	r3, r0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	68b8      	ldr	r0, [r7, #8]
 8004fee:	f7ff ff3d 	bl	8004e6c <BSP_SD_ReadBlocks>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004ff8:	bf00      	nop
 8004ffa:	f7ff ff73 	bl	8004ee4 <BSP_SD_GetCardState>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1fa      	bne.n	8004ffa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4603      	mov	r3, r0
 8005020:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f7ff ff3a 	bl	8004ea8 <BSP_SD_WriteBlocks>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d107      	bne.n	800504a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800503a:	bf00      	nop
 800503c:	f7ff ff52 	bl	8004ee4 <BSP_SD_GetCardState>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1fa      	bne.n	800503c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	; 0x30
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	603a      	str	r2, [r7, #0]
 800505e:	71fb      	strb	r3, [r7, #7]
 8005060:	460b      	mov	r3, r1
 8005062:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800506a:	4b25      	ldr	r3, [pc, #148]	; (8005100 <SD_ioctl+0xac>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <SD_ioctl+0x28>
 8005078:	2303      	movs	r3, #3
 800507a:	e03c      	b.n	80050f6 <SD_ioctl+0xa2>

  switch (cmd)
 800507c:	79bb      	ldrb	r3, [r7, #6]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d834      	bhi.n	80050ec <SD_ioctl+0x98>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <SD_ioctl+0x34>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	08005099 	.word	0x08005099
 800508c:	080050a1 	.word	0x080050a1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050d3 	.word	0x080050d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800509e:	e028      	b.n	80050f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff2d 	bl	8004f04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050b6:	e01c      	b.n	80050f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff21 	bl	8004f04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050d0:	e00f      	b.n	80050f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80050d2:	f107 030c 	add.w	r3, r7, #12
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff14 	bl	8004f04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	0a5a      	lsrs	r2, r3, #9
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050ea:	e002      	b.n	80050f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80050f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3730      	adds	r7, #48	; 0x30
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000009 	.word	0x20000009

08005104 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <disk_status+0x30>)
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	79fa      	ldrb	r2, [r7, #7]
 800511c:	4905      	ldr	r1, [pc, #20]	; (8005134 <disk_status+0x30>)
 800511e:	440a      	add	r2, r1
 8005120:	7a12      	ldrb	r2, [r2, #8]
 8005122:	4610      	mov	r0, r2
 8005124:	4798      	blx	r3
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]
  return stat;
 800512a:	7bfb      	ldrb	r3, [r7, #15]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200001dc 	.word	0x200001dc

08005138 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	4a0d      	ldr	r2, [pc, #52]	; (8005180 <disk_initialize+0x48>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d111      	bne.n	8005174 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <disk_initialize+0x48>)
 8005154:	2101      	movs	r1, #1
 8005156:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <disk_initialize+0x48>)
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	79fa      	ldrb	r2, [r7, #7]
 8005166:	4906      	ldr	r1, [pc, #24]	; (8005180 <disk_initialize+0x48>)
 8005168:	440a      	add	r2, r1
 800516a:	7a12      	ldrb	r2, [r2, #8]
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200001dc 	.word	0x200001dc

08005184 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <disk_read+0x3c>)
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	689c      	ldr	r4, [r3, #8]
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	4a07      	ldr	r2, [pc, #28]	; (80051c0 <disk_read+0x3c>)
 80051a4:	4413      	add	r3, r2
 80051a6:	7a18      	ldrb	r0, [r3, #8]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	47a0      	blx	r4
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	bf00      	nop
 80051c0:	200001dc 	.word	0x200001dc

080051c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <disk_write+0x3c>)
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68dc      	ldr	r4, [r3, #12]
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4a07      	ldr	r2, [pc, #28]	; (8005200 <disk_write+0x3c>)
 80051e4:	4413      	add	r3, r2
 80051e6:	7a18      	ldrb	r0, [r3, #8]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	47a0      	blx	r4
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd90      	pop	{r4, r7, pc}
 80051fe:	bf00      	nop
 8005200:	200001dc 	.word	0x200001dc

08005204 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	603a      	str	r2, [r7, #0]
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	460b      	mov	r3, r1
 8005212:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <disk_ioctl+0x38>)
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	79fa      	ldrb	r2, [r7, #7]
 8005222:	4906      	ldr	r1, [pc, #24]	; (800523c <disk_ioctl+0x38>)
 8005224:	440a      	add	r2, r1
 8005226:	7a10      	ldrb	r0, [r2, #8]
 8005228:	79b9      	ldrb	r1, [r7, #6]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4798      	blx	r3
 800522e:	4603      	mov	r3, r0
 8005230:	73fb      	strb	r3, [r7, #15]
  return res;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	200001dc 	.word	0x200001dc

08005240 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3301      	adds	r3, #1
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	b21a      	sxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b21b      	sxth	r3, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	b21b      	sxth	r3, r3
 8005260:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005262:	89fb      	ldrh	r3, [r7, #14]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3303      	adds	r3, #3
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	3202      	adds	r2, #2
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	3201      	adds	r2, #1
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	7812      	ldrb	r2, [r2, #0]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	887a      	ldrh	r2, [r7, #2]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	887b      	ldrh	r3, [r7, #2]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	1c53      	adds	r3, r2, #1
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	6179      	str	r1, [r7, #20]
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3b01      	subs	r3, #1
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f1      	bne.n	800535e <mem_cpy+0x1a>
	}
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	617a      	str	r2, [r7, #20]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f3      	bne.n	8005396 <mem_set+0x10>
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	4619      	mov	r1, r3
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	61ba      	str	r2, [r7, #24]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <mem_cmp+0x40>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0eb      	beq.n	80053d4 <mem_cmp+0x18>

	return r;
 80053fc:	697b      	ldr	r3, [r7, #20]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005414:	e002      	b.n	800541c <chk_chr+0x12>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3301      	adds	r3, #1
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <chk_chr+0x26>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	4293      	cmp	r3, r2
 800542e:	d1f2      	bne.n	8005416 <chk_chr+0xc>
	return *str;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	781b      	ldrb	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e029      	b.n	80054a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <chk_lock+0xb4>)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	4413      	add	r3, r2
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01d      	beq.n	800549e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005462:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <chk_lock+0xb4>)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	4413      	add	r3, r2
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d116      	bne.n	80054a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <chk_lock+0xb4>)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4413      	add	r3, r2
 800547c:	3304      	adds	r3, #4
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005484:	429a      	cmp	r2, r3
 8005486:	d10c      	bne.n	80054a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005488:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <chk_lock+0xb4>)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4413      	add	r3, r2
 8005490:	3308      	adds	r3, #8
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005498:	429a      	cmp	r2, r3
 800549a:	d102      	bne.n	80054a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800549c:	e007      	b.n	80054ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d9d2      	bls.n	8005454 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d109      	bne.n	80054c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <chk_lock+0x80>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d101      	bne.n	80054c4 <chk_lock+0x84>
 80054c0:	2300      	movs	r3, #0
 80054c2:	e010      	b.n	80054e6 <chk_lock+0xa6>
 80054c4:	2312      	movs	r3, #18
 80054c6:	e00e      	b.n	80054e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d108      	bne.n	80054e0 <chk_lock+0xa0>
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <chk_lock+0xb4>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	4413      	add	r3, r2
 80054d6:	330c      	adds	r3, #12
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054de:	d101      	bne.n	80054e4 <chk_lock+0xa4>
 80054e0:	2310      	movs	r3, #16
 80054e2:	e000      	b.n	80054e6 <chk_lock+0xa6>
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	200001bc 	.word	0x200001bc

080054f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	e002      	b.n	800550a <enq_lock+0x12>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3301      	adds	r3, #1
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d806      	bhi.n	800551e <enq_lock+0x26>
 8005510:	4a09      	ldr	r2, [pc, #36]	; (8005538 <enq_lock+0x40>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	4413      	add	r3, r2
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f2      	bne.n	8005504 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b02      	cmp	r3, #2
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	200001bc 	.word	0x200001bc

0800553c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e01f      	b.n	800558c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800554c:	4a41      	ldr	r2, [pc, #260]	; (8005654 <inc_lock+0x118>)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	4413      	add	r3, r2
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d113      	bne.n	8005586 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800555e:	4a3d      	ldr	r2, [pc, #244]	; (8005654 <inc_lock+0x118>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	3304      	adds	r3, #4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800556e:	429a      	cmp	r2, r3
 8005570:	d109      	bne.n	8005586 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005572:	4a38      	ldr	r2, [pc, #224]	; (8005654 <inc_lock+0x118>)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	4413      	add	r3, r2
 800557a:	3308      	adds	r3, #8
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005582:	429a      	cmp	r2, r3
 8005584:	d006      	beq.n	8005594 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d9dc      	bls.n	800554c <inc_lock+0x10>
 8005592:	e000      	b.n	8005596 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005594:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d132      	bne.n	8005602 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e002      	b.n	80055a8 <inc_lock+0x6c>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d806      	bhi.n	80055bc <inc_lock+0x80>
 80055ae:	4a29      	ldr	r2, [pc, #164]	; (8005654 <inc_lock+0x118>)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	4413      	add	r3, r2
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f2      	bne.n	80055a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d101      	bne.n	80055c6 <inc_lock+0x8a>
 80055c2:	2300      	movs	r3, #0
 80055c4:	e040      	b.n	8005648 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4922      	ldr	r1, [pc, #136]	; (8005654 <inc_lock+0x118>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	440b      	add	r3, r1
 80055d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	491e      	ldr	r1, [pc, #120]	; (8005654 <inc_lock+0x118>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	440b      	add	r3, r1
 80055e0:	3304      	adds	r3, #4
 80055e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	491a      	ldr	r1, [pc, #104]	; (8005654 <inc_lock+0x118>)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	440b      	add	r3, r1
 80055f0:	3308      	adds	r3, #8
 80055f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80055f4:	4a17      	ldr	r2, [pc, #92]	; (8005654 <inc_lock+0x118>)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	4413      	add	r3, r2
 80055fc:	330c      	adds	r3, #12
 80055fe:	2200      	movs	r2, #0
 8005600:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <inc_lock+0xe0>
 8005608:	4a12      	ldr	r2, [pc, #72]	; (8005654 <inc_lock+0x118>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	4413      	add	r3, r2
 8005610:	330c      	adds	r3, #12
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <inc_lock+0xe0>
 8005618:	2300      	movs	r3, #0
 800561a:	e015      	b.n	8005648 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <inc_lock+0xf8>
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <inc_lock+0x118>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	4413      	add	r3, r2
 800562a:	330c      	adds	r3, #12
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	e001      	b.n	8005638 <inc_lock+0xfc>
 8005634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005638:	4906      	ldr	r1, [pc, #24]	; (8005654 <inc_lock+0x118>)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	440b      	add	r3, r1
 8005640:	330c      	adds	r3, #12
 8005642:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	200001bc 	.word	0x200001bc

08005658 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3b01      	subs	r3, #1
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d825      	bhi.n	80056b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <dec_lock+0x74>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	4413      	add	r3, r2
 8005674:	330c      	adds	r3, #12
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800567a:	89fb      	ldrh	r3, [r7, #14]
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d101      	bne.n	8005686 <dec_lock+0x2e>
 8005682:	2300      	movs	r3, #0
 8005684:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005686:	89fb      	ldrh	r3, [r7, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <dec_lock+0x3a>
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	3b01      	subs	r3, #1
 8005690:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005692:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <dec_lock+0x74>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	330c      	adds	r3, #12
 800569c:	89fa      	ldrh	r2, [r7, #14]
 800569e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056a0:	89fb      	ldrh	r3, [r7, #14]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d105      	bne.n	80056b2 <dec_lock+0x5a>
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <dec_lock+0x74>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	4413      	add	r3, r2
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	737b      	strb	r3, [r7, #13]
 80056b6:	e001      	b.n	80056bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80056b8:	2302      	movs	r3, #2
 80056ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80056bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200001bc 	.word	0x200001bc

080056d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e010      	b.n	8005700 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80056de:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <clear_lock+0x44>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4413      	add	r3, r2
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d105      	bne.n	80056fa <clear_lock+0x2a>
 80056ee:	4a09      	ldr	r2, [pc, #36]	; (8005714 <clear_lock+0x44>)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d9eb      	bls.n	80056de <clear_lock+0xe>
	}
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	200001bc 	.word	0x200001bc

08005718 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	78db      	ldrb	r3, [r3, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d034      	beq.n	8005796 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	7858      	ldrb	r0, [r3, #1]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800573c:	2301      	movs	r3, #1
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	f7ff fd40 	bl	80051c4 <disk_write>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <sync_window+0x38>
			res = FR_DISK_ERR;
 800574a:	2301      	movs	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	e022      	b.n	8005796 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	1ad2      	subs	r2, r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	429a      	cmp	r2, r3
 8005764:	d217      	bcs.n	8005796 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	789b      	ldrb	r3, [r3, #2]
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	e010      	b.n	8005790 <sync_window+0x78>
					wsect += fs->fsize;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7858      	ldrb	r0, [r3, #1]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005782:	2301      	movs	r3, #1
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	f7ff fd1d 	bl	80051c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3b01      	subs	r3, #1
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d8eb      	bhi.n	800576e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d01b      	beq.n	80057f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ffad 	bl	8005718 <sync_window>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d113      	bne.n	80057f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7858      	ldrb	r0, [r3, #1]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057d2:	2301      	movs	r3, #1
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	f7ff fcd5 	bl	8005184 <disk_read>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80057e0:	f04f 33ff 	mov.w	r3, #4294967295
 80057e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff87 	bl	8005718 <sync_window>
 800580a:	4603      	mov	r3, r0
 800580c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d158      	bne.n	80058c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b03      	cmp	r3, #3
 800581a:	d148      	bne.n	80058ae <sync_fs+0xb2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	791b      	ldrb	r3, [r3, #4]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d144      	bne.n	80058ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3330      	adds	r3, #48	; 0x30
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fda9 	bl	8005386 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3330      	adds	r3, #48	; 0x30
 8005838:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800583c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fd38 	bl	80052b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3330      	adds	r3, #48	; 0x30
 800584a:	4921      	ldr	r1, [pc, #132]	; (80058d0 <sync_fs+0xd4>)
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fd4d 	bl	80052ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3330      	adds	r3, #48	; 0x30
 8005856:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800585a:	491e      	ldr	r1, [pc, #120]	; (80058d4 <sync_fs+0xd8>)
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fd45 	bl	80052ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3330      	adds	r3, #48	; 0x30
 8005866:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f7ff fd3b 	bl	80052ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3330      	adds	r3, #48	; 0x30
 800587a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7ff fd31 	bl	80052ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7858      	ldrb	r0, [r3, #1]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	2301      	movs	r3, #1
 80058a4:	f7ff fc8e 	bl	80051c4 <disk_write>
			fs->fsi_flag = 0;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	2200      	movs	r2, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fca4 	bl	8005204 <disk_ioctl>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <sync_fs+0xca>
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	41615252 	.word	0x41615252
 80058d4:	61417272 	.word	0x61417272

080058d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	3b02      	subs	r3, #2
 80058e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	3b02      	subs	r3, #2
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d301      	bcc.n	80058f8 <clust2sect+0x20>
 80058f4:	2300      	movs	r3, #0
 80058f6:	e008      	b.n	800590a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	895b      	ldrh	r3, [r3, #10]
 80058fc:	461a      	mov	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	fb03 f202 	mul.w	r2, r3, r2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	4413      	add	r3, r2
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b086      	sub	sp, #24
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d904      	bls.n	8005936 <get_fat+0x20>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005936:	2301      	movs	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e08f      	b.n	8005a5c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800593c:	f04f 33ff 	mov.w	r3, #4294967295
 8005940:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d062      	beq.n	8005a10 <get_fat+0xfa>
 800594a:	2b03      	cmp	r3, #3
 800594c:	dc7c      	bgt.n	8005a48 <get_fat+0x132>
 800594e:	2b01      	cmp	r3, #1
 8005950:	d002      	beq.n	8005958 <get_fat+0x42>
 8005952:	2b02      	cmp	r3, #2
 8005954:	d042      	beq.n	80059dc <get_fat+0xc6>
 8005956:	e077      	b.n	8005a48 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	0a5b      	lsrs	r3, r3, #9
 800596e:	4413      	add	r3, r2
 8005970:	4619      	mov	r1, r3
 8005972:	6938      	ldr	r0, [r7, #16]
 8005974:	f7ff ff14 	bl	80057a0 <move_window>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d167      	bne.n	8005a4e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	60fa      	str	r2, [r7, #12]
 8005984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005990:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	0a5b      	lsrs	r3, r3, #9
 800599a:	4413      	add	r3, r2
 800599c:	4619      	mov	r1, r3
 800599e:	6938      	ldr	r0, [r7, #16]
 80059a0:	f7ff fefe 	bl	80057a0 <move_window>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d153      	bne.n	8005a52 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <get_fat+0xbc>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	e002      	b.n	80059d8 <get_fat+0xc2>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d8:	617b      	str	r3, [r7, #20]
			break;
 80059da:	e03f      	b.n	8005a5c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	4413      	add	r3, r2
 80059e6:	4619      	mov	r1, r3
 80059e8:	6938      	ldr	r0, [r7, #16]
 80059ea:	f7ff fed9 	bl	80057a0 <move_window>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d130      	bne.n	8005a56 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a02:	4413      	add	r3, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fc1b 	bl	8005240 <ld_word>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	617b      	str	r3, [r7, #20]
			break;
 8005a0e:	e025      	b.n	8005a5c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	4413      	add	r3, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6938      	ldr	r0, [r7, #16]
 8005a1e:	f7ff febf 	bl	80057a0 <move_window>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d118      	bne.n	8005a5a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005a36:	4413      	add	r3, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fc19 	bl	8005270 <ld_dword>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a44:	617b      	str	r3, [r7, #20]
			break;
 8005a46:	e009      	b.n	8005a5c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a48:	2301      	movs	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e006      	b.n	8005a5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a4e:	bf00      	nop
 8005a50:	e004      	b.n	8005a5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a5a:	bf00      	nop
		}
	}

	return val;
 8005a5c:	697b      	ldr	r3, [r7, #20]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a66:	b590      	push	{r4, r7, lr}
 8005a68:	b089      	sub	sp, #36	; 0x24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005a72:	2302      	movs	r3, #2
 8005a74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f240 80d2 	bls.w	8005c22 <put_fat+0x1bc>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f080 80cc 	bcs.w	8005c22 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	f000 8096 	beq.w	8005bc0 <put_fat+0x15a>
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	f300 80cd 	bgt.w	8005c34 <put_fat+0x1ce>
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d002      	beq.n	8005aa4 <put_fat+0x3e>
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d06e      	beq.n	8005b80 <put_fat+0x11a>
 8005aa2:	e0c7      	b.n	8005c34 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4413      	add	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	0a5b      	lsrs	r3, r3, #9
 8005aba:	4413      	add	r3, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7ff fe6e 	bl	80057a0 <move_window>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 80ab 	bne.w	8005c26 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	61b9      	str	r1, [r7, #24]
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	4413      	add	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00d      	beq.n	8005b0a <put_fat+0xa4>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	b25a      	sxtb	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b25b      	sxtb	r3, r3
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e001      	b.n	8005b0e <put_fat+0xa8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	0a5b      	lsrs	r3, r3, #9
 8005b20:	4413      	add	r3, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fe3b 	bl	80057a0 <move_window>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b2e:	7ffb      	ldrb	r3, [r7, #31]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d17a      	bne.n	8005c2a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b40:	4413      	add	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <put_fat+0xf0>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	e00e      	b.n	8005b74 <put_fat+0x10e>
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b25b      	sxtb	r3, r3
 8005b5c:	f023 030f 	bic.w	r3, r3, #15
 8005b60:	b25a      	sxtb	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	b25b      	sxtb	r3, r3
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b25b      	sxtb	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	70da      	strb	r2, [r3, #3]
			break;
 8005b7e:	e059      	b.n	8005c34 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	4413      	add	r3, r2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fe07 	bl	80057a0 <move_window>
 8005b92:	4603      	mov	r3, r0
 8005b94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d148      	bne.n	8005c2e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005baa:	4413      	add	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fb7f 	bl	80052b6 <st_word>
			fs->wflag = 1;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	70da      	strb	r2, [r3, #3]
			break;
 8005bbe:	e039      	b.n	8005c34 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	4413      	add	r3, r2
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff fde7 	bl	80057a0 <move_window>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d12a      	bne.n	8005c32 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005bf0:	4413      	add	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fb3c 	bl	8005270 <ld_dword>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005bfe:	4323      	orrs	r3, r4
 8005c00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c10:	4413      	add	r3, r2
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fb69 	bl	80052ec <st_dword>
			fs->wflag = 1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	70da      	strb	r2, [r3, #3]
			break;
 8005c20:	e008      	b.n	8005c34 <put_fat+0x1ce>
		}
	}
 8005c22:	bf00      	nop
 8005c24:	e006      	b.n	8005c34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c26:	bf00      	nop
 8005c28:	e004      	b.n	8005c34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c2a:	bf00      	nop
 8005c2c:	e002      	b.n	8005c34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c32:	bf00      	nop
	return res;
 8005c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	; 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd90      	pop	{r4, r7, pc}

08005c3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b088      	sub	sp, #32
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d904      	bls.n	8005c64 <remove_chain+0x26>
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d301      	bcc.n	8005c68 <remove_chain+0x2a>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e04b      	b.n	8005d00 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	69b8      	ldr	r0, [r7, #24]
 8005c76:	f7ff fef6 	bl	8005a66 <put_fat>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <remove_chain+0x4a>
 8005c84:	7ffb      	ldrb	r3, [r7, #31]
 8005c86:	e03b      	b.n	8005d00 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fe43 	bl	8005916 <get_fat>
 8005c90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d031      	beq.n	8005cfc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <remove_chain+0x64>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e02e      	b.n	8005d00 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d101      	bne.n	8005cae <remove_chain+0x70>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e028      	b.n	8005d00 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005cae:	2200      	movs	r2, #0
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	69b8      	ldr	r0, [r7, #24]
 8005cb4:	f7ff fed7 	bl	8005a66 <put_fat>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <remove_chain+0x88>
 8005cc2:	7ffb      	ldrb	r3, [r7, #31]
 8005cc4:	e01c      	b.n	8005d00 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	3b02      	subs	r3, #2
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d20b      	bcs.n	8005cec <remove_chain+0xae>
			fs->free_clst++;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	791b      	ldrb	r3, [r3, #4]
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d3c6      	bcc.n	8005c88 <remove_chain+0x4a>
 8005cfa:	e000      	b.n	8005cfe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005cfc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <create_chain+0x2c>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d31b      	bcc.n	8005d6c <create_chain+0x64>
 8005d34:	2301      	movs	r3, #1
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e018      	b.n	8005d6c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff fdea 	bl	8005916 <get_fat>
 8005d42:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d801      	bhi.n	8005d4e <create_chain+0x46>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e070      	b.n	8005e30 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d101      	bne.n	8005d5a <create_chain+0x52>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	e06a      	b.n	8005e30 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d201      	bcs.n	8005d68 <create_chain+0x60>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	e063      	b.n	8005e30 <create_chain+0x128>
		scl = clst;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d307      	bcc.n	8005d90 <create_chain+0x88>
				ncl = 2;
 8005d80:	2302      	movs	r3, #2
 8005d82:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d901      	bls.n	8005d90 <create_chain+0x88>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e04f      	b.n	8005e30 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d90:	69f9      	ldr	r1, [r7, #28]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fdbf 	bl	8005916 <get_fat>
 8005d98:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00e      	beq.n	8005dbe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d003      	beq.n	8005dae <create_chain+0xa6>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d101      	bne.n	8005db2 <create_chain+0xaa>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	e03e      	b.n	8005e30 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d1da      	bne.n	8005d70 <create_chain+0x68>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e038      	b.n	8005e30 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005dbe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	69f9      	ldr	r1, [r7, #28]
 8005dc6:	6938      	ldr	r0, [r7, #16]
 8005dc8:	f7ff fe4d 	bl	8005a66 <put_fat>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <create_chain+0xe2>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6938      	ldr	r0, [r7, #16]
 8005de2:	f7ff fe40 	bl	8005a66 <put_fat>
 8005de6:	4603      	mov	r3, r0
 8005de8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <create_chain+0x116>
		fs->last_clst = ncl;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	3b02      	subs	r3, #2
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d804      	bhi.n	8005e0e <create_chain+0x106>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	1e5a      	subs	r2, r3, #1
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	791b      	ldrb	r3, [r3, #4]
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	711a      	strb	r2, [r3, #4]
 8005e1c:	e007      	b.n	8005e2e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d102      	bne.n	8005e2a <create_chain+0x122>
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	e000      	b.n	8005e2c <create_chain+0x124>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e2e:	69fb      	ldr	r3, [r7, #28]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	0a5b      	lsrs	r3, r3, #9
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	8952      	ldrh	r2, [r2, #10]
 8005e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1d1a      	adds	r2, r3, #4
 8005e62:	613a      	str	r2, [r7, #16]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <clmt_clust+0x3a>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e010      	b.n	8005e94 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d307      	bcc.n	8005e8a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3304      	adds	r3, #4
 8005e86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e88:	e7e9      	b.n	8005e5e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005e8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb6:	d204      	bcs.n	8005ec2 <dir_sdi+0x22>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e063      	b.n	8005f8e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <dir_sdi+0x46>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d902      	bls.n	8005ee6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10c      	bne.n	8005f06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	8912      	ldrh	r2, [r2, #8]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d301      	bcc.n	8005efc <dir_sdi+0x5c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e048      	b.n	8005f8e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	61da      	str	r2, [r3, #28]
 8005f04:	e029      	b.n	8005f5a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	895b      	ldrh	r3, [r3, #10]
 8005f0a:	025b      	lsls	r3, r3, #9
 8005f0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f0e:	e019      	b.n	8005f44 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fcfe 	bl	8005916 <get_fat>
 8005f1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d101      	bne.n	8005f28 <dir_sdi+0x88>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e032      	b.n	8005f8e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d904      	bls.n	8005f38 <dir_sdi+0x98>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d301      	bcc.n	8005f3c <dir_sdi+0x9c>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e028      	b.n	8005f8e <dir_sdi+0xee>
			ofs -= csz;
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d2e1      	bcs.n	8005f10 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005f4c:	6979      	ldr	r1, [r7, #20]
 8005f4e:	6938      	ldr	r0, [r7, #16]
 8005f50:	f7ff fcc2 	bl	80058d8 <clust2sect>
 8005f54:	4602      	mov	r2, r0
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <dir_sdi+0xcc>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e010      	b.n	8005f8e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	0a5b      	lsrs	r3, r3, #9
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	441a      	add	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	3320      	adds	r3, #32
 8005fac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <dir_next+0x28>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fbc:	d301      	bcc.n	8005fc2 <dir_next+0x2c>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	e0aa      	b.n	8006118 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 8098 	bne.w	80060fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	8912      	ldrh	r2, [r2, #8]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	f0c0 8088 	bcc.w	80060fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	61da      	str	r2, [r3, #28]
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	e08f      	b.n	8006118 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	0a5b      	lsrs	r3, r3, #9
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	8952      	ldrh	r2, [r2, #10]
 8006000:	3a01      	subs	r2, #1
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d17a      	bne.n	80060fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7ff fc80 	bl	8005916 <get_fat>
 8006016:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d801      	bhi.n	8006022 <dir_next+0x8c>
 800601e:	2302      	movs	r3, #2
 8006020:	e07a      	b.n	8006118 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d101      	bne.n	800602e <dir_next+0x98>
 800602a:	2301      	movs	r3, #1
 800602c:	e074      	b.n	8006118 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	d358      	bcc.n	80060ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	61da      	str	r2, [r3, #28]
 8006044:	2304      	movs	r3, #4
 8006046:	e067      	b.n	8006118 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f7ff fe59 	bl	8005d08 <create_chain>
 8006056:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <dir_next+0xcc>
 800605e:	2307      	movs	r3, #7
 8006060:	e05a      	b.n	8006118 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <dir_next+0xd6>
 8006068:	2302      	movs	r3, #2
 800606a:	e055      	b.n	8006118 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d101      	bne.n	8006078 <dir_next+0xe2>
 8006074:	2301      	movs	r3, #1
 8006076:	e04f      	b.n	8006118 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff fb4d 	bl	8005718 <sync_window>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <dir_next+0xf2>
 8006084:	2301      	movs	r3, #1
 8006086:	e047      	b.n	8006118 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3330      	adds	r3, #48	; 0x30
 800608c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff f977 	bl	8005386 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fc1a 	bl	80058d8 <clust2sect>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80060aa:	e012      	b.n	80060d2 <dir_next+0x13c>
						fs->wflag = 1;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff fb30 	bl	8005718 <sync_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <dir_next+0x12c>
 80060be:	2301      	movs	r3, #1
 80060c0:	e02a      	b.n	8006118 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3301      	adds	r3, #1
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	895b      	ldrh	r3, [r3, #10]
 80060d6:	461a      	mov	r2, r3
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4293      	cmp	r3, r2
 80060dc:	d3e6      	bcc.n	80060ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad2      	subs	r2, r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fbf0 	bl	80058d8 <clust2sect>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff feb4 	bl	8005ea0 <dir_sdi>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800613c:	7dfb      	ldrb	r3, [r7, #23]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d12b      	bne.n	800619a <dir_alloc+0x7a>
		n = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4619      	mov	r1, r3
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff fb27 	bl	80057a0 <move_window>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11d      	bne.n	8006198 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2be5      	cmp	r3, #229	; 0xe5
 8006164:	d004      	beq.n	8006170 <dir_alloc+0x50>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d107      	bne.n	8006180 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	3301      	adds	r3, #1
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d102      	bne.n	8006184 <dir_alloc+0x64>
 800617e:	e00c      	b.n	800619a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006184:	2101      	movs	r1, #1
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff ff05 	bl	8005f96 <dir_next>
 800618c:	4603      	mov	r3, r0
 800618e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0d7      	beq.n	8006146 <dir_alloc+0x26>
 8006196:	e000      	b.n	800619a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006198:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2b04      	cmp	r3, #4
 800619e:	d101      	bne.n	80061a4 <dir_alloc+0x84>
 80061a0:	2307      	movs	r3, #7
 80061a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	331a      	adds	r3, #26
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff f83f 	bl	8005240 <ld_word>
 80061c2:	4603      	mov	r3, r0
 80061c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d109      	bne.n	80061e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff f834 	bl	8005240 <ld_word>
 80061d8:	4603      	mov	r3, r0
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	331a      	adds	r3, #26
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	b292      	uxth	r2, r2
 8006200:	4611      	mov	r1, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f857 	bl	80052b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d109      	bne.n	8006224 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f103 0214 	add.w	r2, r3, #20
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	b29b      	uxth	r3, r3
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f7ff f849 	bl	80052b6 <st_word>
	}
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800623a:	2100      	movs	r1, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff fe2f 	bl	8005ea0 <dir_sdi>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <dir_find+0x24>
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	e03e      	b.n	80062ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	4619      	mov	r1, r3
 8006256:	6938      	ldr	r0, [r7, #16]
 8006258:	f7ff faa2 	bl	80057a0 <move_window>
 800625c:	4603      	mov	r3, r0
 800625e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d12f      	bne.n	80062c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <dir_find+0x4e>
 8006274:	2304      	movs	r3, #4
 8006276:	75fb      	strb	r3, [r7, #23]
 8006278:	e028      	b.n	80062cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	330b      	adds	r3, #11
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006286:	b2da      	uxtb	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	330b      	adds	r3, #11
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <dir_find+0x86>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a18      	ldr	r0, [r3, #32]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3324      	adds	r3, #36	; 0x24
 80062a4:	220b      	movs	r2, #11
 80062a6:	4619      	mov	r1, r3
 80062a8:	f7ff f888 	bl	80053bc <mem_cmp>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062b2:	2100      	movs	r1, #0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fe6e 	bl	8005f96 <dir_next>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0c5      	beq.n	8006250 <dir_find+0x24>
 80062c4:	e002      	b.n	80062cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062ca:	bf00      	nop

	return res;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80062e4:	2101      	movs	r1, #1
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ff1a 	bl	8006120 <dir_alloc>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11c      	bne.n	8006330 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	4619      	mov	r1, r3
 80062fc:	68b8      	ldr	r0, [r7, #8]
 80062fe:	f7ff fa4f 	bl	80057a0 <move_window>
 8006302:	4603      	mov	r3, r0
 8006304:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d111      	bne.n	8006330 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	2220      	movs	r2, #32
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff f836 	bl	8005386 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a18      	ldr	r0, [r3, #32]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3324      	adds	r3, #36	; 0x24
 8006322:	220b      	movs	r2, #11
 8006324:	4619      	mov	r1, r3
 8006326:	f7ff f80d 	bl	8005344 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2201      	movs	r2, #1
 800632e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006352:	220b      	movs	r2, #11
 8006354:	2120      	movs	r1, #32
 8006356:	68b8      	ldr	r0, [r7, #8]
 8006358:	f7ff f815 	bl	8005386 <mem_set>
	si = i = 0; ni = 8;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	2308      	movs	r3, #8
 8006366:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	61fa      	str	r2, [r7, #28]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006376:	7efb      	ldrb	r3, [r7, #27]
 8006378:	2b20      	cmp	r3, #32
 800637a:	d94e      	bls.n	800641a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800637c:	7efb      	ldrb	r3, [r7, #27]
 800637e:	2b2f      	cmp	r3, #47	; 0x2f
 8006380:	d006      	beq.n	8006390 <create_name+0x54>
 8006382:	7efb      	ldrb	r3, [r7, #27]
 8006384:	2b5c      	cmp	r3, #92	; 0x5c
 8006386:	d110      	bne.n	80063aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006388:	e002      	b.n	8006390 <create_name+0x54>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b2f      	cmp	r3, #47	; 0x2f
 800639a:	d0f6      	beq.n	800638a <create_name+0x4e>
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b5c      	cmp	r3, #92	; 0x5c
 80063a6:	d0f0      	beq.n	800638a <create_name+0x4e>
			break;
 80063a8:	e038      	b.n	800641c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80063aa:	7efb      	ldrb	r3, [r7, #27]
 80063ac:	2b2e      	cmp	r3, #46	; 0x2e
 80063ae:	d003      	beq.n	80063b8 <create_name+0x7c>
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d30c      	bcc.n	80063d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b0b      	cmp	r3, #11
 80063bc:	d002      	beq.n	80063c4 <create_name+0x88>
 80063be:	7efb      	ldrb	r3, [r7, #27]
 80063c0:	2b2e      	cmp	r3, #46	; 0x2e
 80063c2:	d001      	beq.n	80063c8 <create_name+0x8c>
 80063c4:	2306      	movs	r3, #6
 80063c6:	e044      	b.n	8006452 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80063c8:	2308      	movs	r3, #8
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	230b      	movs	r3, #11
 80063ce:	617b      	str	r3, [r7, #20]
			continue;
 80063d0:	e022      	b.n	8006418 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80063d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	da04      	bge.n	80063e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80063da:	7efb      	ldrb	r3, [r7, #27]
 80063dc:	3b80      	subs	r3, #128	; 0x80
 80063de:	4a1f      	ldr	r2, [pc, #124]	; (800645c <create_name+0x120>)
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80063e4:	7efb      	ldrb	r3, [r7, #27]
 80063e6:	4619      	mov	r1, r3
 80063e8:	481d      	ldr	r0, [pc, #116]	; (8006460 <create_name+0x124>)
 80063ea:	f7ff f80e 	bl	800540a <chk_chr>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <create_name+0xbc>
 80063f4:	2306      	movs	r3, #6
 80063f6:	e02c      	b.n	8006452 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80063f8:	7efb      	ldrb	r3, [r7, #27]
 80063fa:	2b60      	cmp	r3, #96	; 0x60
 80063fc:	d905      	bls.n	800640a <create_name+0xce>
 80063fe:	7efb      	ldrb	r3, [r7, #27]
 8006400:	2b7a      	cmp	r3, #122	; 0x7a
 8006402:	d802      	bhi.n	800640a <create_name+0xce>
 8006404:	7efb      	ldrb	r3, [r7, #27]
 8006406:	3b20      	subs	r3, #32
 8006408:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	613a      	str	r2, [r7, #16]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	4413      	add	r3, r2
 8006414:	7efa      	ldrb	r2, [r7, #27]
 8006416:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006418:	e7a6      	b.n	8006368 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800641a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	441a      	add	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <create_name+0xf4>
 800642c:	2306      	movs	r3, #6
 800642e:	e010      	b.n	8006452 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2be5      	cmp	r3, #229	; 0xe5
 8006436:	d102      	bne.n	800643e <create_name+0x102>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2205      	movs	r2, #5
 800643c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800643e:	7efb      	ldrb	r3, [r7, #27]
 8006440:	2b20      	cmp	r3, #32
 8006442:	d801      	bhi.n	8006448 <create_name+0x10c>
 8006444:	2204      	movs	r2, #4
 8006446:	e000      	b.n	800644a <create_name+0x10e>
 8006448:	2200      	movs	r2, #0
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	330b      	adds	r3, #11
 800644e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006450:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	08007794 	.word	0x08007794
 8006460:	08007724 	.word	0x08007724

08006464 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006478:	e002      	b.n	8006480 <follow_path+0x1c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b2f      	cmp	r3, #47	; 0x2f
 8006486:	d0f8      	beq.n	800647a <follow_path+0x16>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b5c      	cmp	r3, #92	; 0x5c
 800648e:	d0f4      	beq.n	800647a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b1f      	cmp	r3, #31
 800649c:	d80a      	bhi.n	80064b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fcf9 	bl	8005ea0 <dir_sdi>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75fb      	strb	r3, [r7, #23]
 80064b2:	e043      	b.n	800653c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064b4:	463b      	mov	r3, r7
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff3f 	bl	800633c <create_name>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d134      	bne.n	8006532 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff feaf 	bl	800622c <dir_find>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d127      	bne.n	8006536 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d122      	bne.n	8006536 <follow_path+0xd2>
 80064f0:	2305      	movs	r3, #5
 80064f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80064f4:	e01f      	b.n	8006536 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11c      	bne.n	800653a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	799b      	ldrb	r3, [r3, #6]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800650c:	2305      	movs	r3, #5
 800650e:	75fb      	strb	r3, [r7, #23]
 8006510:	e014      	b.n	800653c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	4413      	add	r3, r2
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff fe42 	bl	80061ae <ld_clust>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006530:	e7c0      	b.n	80064b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <follow_path+0xd8>
				break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800653a:	bf00      	nop
			}
		}
	}

	return res;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006546:	b480      	push	{r7}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800654e:	f04f 33ff 	mov.w	r3, #4294967295
 8006552:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d031      	beq.n	80065c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e002      	b.n	800656a <get_ldnumber+0x24>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3301      	adds	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b20      	cmp	r3, #32
 8006570:	d903      	bls.n	800657a <get_ldnumber+0x34>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b3a      	cmp	r3, #58	; 0x3a
 8006578:	d1f4      	bne.n	8006564 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b3a      	cmp	r3, #58	; 0x3a
 8006580:	d11c      	bne.n	80065bc <get_ldnumber+0x76>
			tp = *path;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	60fa      	str	r2, [r7, #12]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	3b30      	subs	r3, #48	; 0x30
 8006592:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b09      	cmp	r3, #9
 8006598:	d80e      	bhi.n	80065b8 <get_ldnumber+0x72>
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d10a      	bne.n	80065b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d107      	bne.n	80065b8 <get_ldnumber+0x72>
					vol = (int)i;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3301      	adds	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	e002      	b.n	80065c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80065c0:	693b      	ldr	r3, [r7, #16]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	70da      	strb	r2, [r3, #3]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f04f 32ff 	mov.w	r2, #4294967295
 80065e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff f8d8 	bl	80057a0 <move_window>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <check_fs+0x2a>
 80065f6:	2304      	movs	r3, #4
 80065f8:	e038      	b.n	800666c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3330      	adds	r3, #48	; 0x30
 80065fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fe1c 	bl	8005240 <ld_word>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <check_fs+0x48>
 8006614:	2303      	movs	r3, #3
 8006616:	e029      	b.n	800666c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800661e:	2be9      	cmp	r3, #233	; 0xe9
 8006620:	d009      	beq.n	8006636 <check_fs+0x66>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006628:	2beb      	cmp	r3, #235	; 0xeb
 800662a:	d11e      	bne.n	800666a <check_fs+0x9a>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006632:	2b90      	cmp	r3, #144	; 0x90
 8006634:	d119      	bne.n	800666a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3330      	adds	r3, #48	; 0x30
 800663a:	3336      	adds	r3, #54	; 0x36
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe fe17 	bl	8005270 <ld_dword>
 8006642:	4603      	mov	r3, r0
 8006644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006648:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <check_fs+0xa4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d101      	bne.n	8006652 <check_fs+0x82>
 800664e:	2300      	movs	r3, #0
 8006650:	e00c      	b.n	800666c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3330      	adds	r3, #48	; 0x30
 8006656:	3352      	adds	r3, #82	; 0x52
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fe09 	bl	8005270 <ld_dword>
 800665e:	4603      	mov	r3, r0
 8006660:	4a05      	ldr	r2, [pc, #20]	; (8006678 <check_fs+0xa8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <check_fs+0x9a>
 8006666:	2300      	movs	r3, #0
 8006668:	e000      	b.n	800666c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800666a:	2302      	movs	r3, #2
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	00544146 	.word	0x00544146
 8006678:	33544146 	.word	0x33544146

0800667c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b096      	sub	sp, #88	; 0x58
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff ff58 	bl	8006546 <get_ldnumber>
 8006696:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	da01      	bge.n	80066a2 <find_volume+0x26>
 800669e:	230b      	movs	r3, #11
 80066a0:	e22d      	b.n	8006afe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066a2:	4aa1      	ldr	r2, [pc, #644]	; (8006928 <find_volume+0x2ac>)
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <find_volume+0x3a>
 80066b2:	230c      	movs	r3, #12
 80066b4:	e223      	b.n	8006afe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01a      	beq.n	8006702 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe fd17 	bl	8005104 <disk_status>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10c      	bne.n	8006702 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <find_volume+0x82>
 80066ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80066fa:	230a      	movs	r3, #10
 80066fc:	e1ff      	b.n	8006afe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80066fe:	2300      	movs	r3, #0
 8006700:	e1fd      	b.n	8006afe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fd0f 	bl	8005138 <disk_initialize>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800672c:	2303      	movs	r3, #3
 800672e:	e1e6      	b.n	8006afe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <find_volume+0xca>
 8006736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006742:	230a      	movs	r3, #10
 8006744:	e1db      	b.n	8006afe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800674a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800674c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800674e:	f7ff ff3f 	bl	80065d0 <check_fs>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800675c:	2b02      	cmp	r3, #2
 800675e:	d149      	bne.n	80067f4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006760:	2300      	movs	r3, #0
 8006762:	643b      	str	r3, [r7, #64]	; 0x40
 8006764:	e01e      	b.n	80067a4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800676c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006774:	4413      	add	r3, r2
 8006776:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	3304      	adds	r3, #4
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <find_volume+0x114>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	3308      	adds	r3, #8
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fd72 	bl	8005270 <ld_dword>
 800678c:	4602      	mov	r2, r0
 800678e:	e000      	b.n	8006792 <find_volume+0x116>
 8006790:	2200      	movs	r2, #0
 8006792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	3358      	adds	r3, #88	; 0x58
 8006798:	443b      	add	r3, r7
 800679a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800679e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a0:	3301      	adds	r3, #1
 80067a2:	643b      	str	r3, [r7, #64]	; 0x40
 80067a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d9dd      	bls.n	8006766 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80067aa:	2300      	movs	r3, #0
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <find_volume+0x13e>
 80067b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b6:	3b01      	subs	r3, #1
 80067b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80067ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	3358      	adds	r3, #88	; 0x58
 80067c0:	443b      	add	r3, r7
 80067c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80067c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <find_volume+0x15e>
 80067ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067d2:	f7ff fefd 	bl	80065d0 <check_fs>
 80067d6:	4603      	mov	r3, r0
 80067d8:	e000      	b.n	80067dc <find_volume+0x160>
 80067da:	2303      	movs	r3, #3
 80067dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80067e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d905      	bls.n	80067f4 <find_volume+0x178>
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	3301      	adds	r3, #1
 80067ec:	643b      	str	r3, [r7, #64]	; 0x40
 80067ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d9e2      	bls.n	80067ba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d101      	bne.n	8006800 <find_volume+0x184>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e17e      	b.n	8006afe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006804:	2b01      	cmp	r3, #1
 8006806:	d901      	bls.n	800680c <find_volume+0x190>
 8006808:	230d      	movs	r3, #13
 800680a:	e178      	b.n	8006afe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	3330      	adds	r3, #48	; 0x30
 8006810:	330b      	adds	r3, #11
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fd14 	bl	8005240 <ld_word>
 8006818:	4603      	mov	r3, r0
 800681a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681e:	d001      	beq.n	8006824 <find_volume+0x1a8>
 8006820:	230d      	movs	r3, #13
 8006822:	e16c      	b.n	8006afe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	3330      	adds	r3, #48	; 0x30
 8006828:	3316      	adds	r3, #22
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fd08 	bl	8005240 <ld_word>
 8006830:	4603      	mov	r3, r0
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <find_volume+0x1cc>
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	3330      	adds	r3, #48	; 0x30
 800683e:	3324      	adds	r3, #36	; 0x24
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fd15 	bl	8005270 <ld_dword>
 8006846:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800684c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	789b      	ldrb	r3, [r3, #2]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d005      	beq.n	800686c <find_volume+0x1f0>
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	789b      	ldrb	r3, [r3, #2]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d001      	beq.n	800686c <find_volume+0x1f0>
 8006868:	230d      	movs	r3, #13
 800686a:	e148      	b.n	8006afe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	461a      	mov	r2, r3
 8006872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006874:	fb02 f303 	mul.w	r3, r2, r3
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b29a      	uxth	r2, r3
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	895b      	ldrh	r3, [r3, #10]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <find_volume+0x224>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	895b      	ldrh	r3, [r3, #10]
 8006892:	461a      	mov	r2, r3
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	895b      	ldrh	r3, [r3, #10]
 8006898:	3b01      	subs	r3, #1
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <find_volume+0x228>
 80068a0:	230d      	movs	r3, #13
 80068a2:	e12c      	b.n	8006afe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	3330      	adds	r3, #48	; 0x30
 80068a8:	3311      	adds	r3, #17
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fcc8 	bl	8005240 <ld_word>
 80068b0:	4603      	mov	r3, r0
 80068b2:	461a      	mov	r2, r3
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	891b      	ldrh	r3, [r3, #8]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <find_volume+0x24e>
 80068c6:	230d      	movs	r3, #13
 80068c8:	e119      	b.n	8006afe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	3330      	adds	r3, #48	; 0x30
 80068ce:	3313      	adds	r3, #19
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fcb5 	bl	8005240 <ld_word>
 80068d6:	4603      	mov	r3, r0
 80068d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <find_volume+0x272>
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	3330      	adds	r3, #48	; 0x30
 80068e4:	3320      	adds	r3, #32
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fcc2 	bl	8005270 <ld_dword>
 80068ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	3330      	adds	r3, #48	; 0x30
 80068f2:	330e      	adds	r3, #14
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fca3 	bl	8005240 <ld_word>
 80068fa:	4603      	mov	r3, r0
 80068fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80068fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <find_volume+0x28c>
 8006904:	230d      	movs	r3, #13
 8006906:	e0fa      	b.n	8006afe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006908:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800690a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690c:	4413      	add	r3, r2
 800690e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006910:	8912      	ldrh	r2, [r2, #8]
 8006912:	0912      	lsrs	r2, r2, #4
 8006914:	b292      	uxth	r2, r2
 8006916:	4413      	add	r3, r2
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800691a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	429a      	cmp	r2, r3
 8006920:	d204      	bcs.n	800692c <find_volume+0x2b0>
 8006922:	230d      	movs	r3, #13
 8006924:	e0eb      	b.n	8006afe <find_volume+0x482>
 8006926:	bf00      	nop
 8006928:	200001b4 	.word	0x200001b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800692c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006934:	8952      	ldrh	r2, [r2, #10]
 8006936:	fbb3 f3f2 	udiv	r3, r3, r2
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <find_volume+0x2ca>
 8006942:	230d      	movs	r3, #13
 8006944:	e0db      	b.n	8006afe <find_volume+0x482>
		fmt = FS_FAT32;
 8006946:	2303      	movs	r3, #3
 8006948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006952:	4293      	cmp	r3, r2
 8006954:	d802      	bhi.n	800695c <find_volume+0x2e0>
 8006956:	2302      	movs	r3, #2
 8006958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006962:	4293      	cmp	r3, r2
 8006964:	d802      	bhi.n	800696c <find_volume+0x2f0>
 8006966:	2301      	movs	r3, #1
 8006968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1c9a      	adds	r2, r3, #2
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006978:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800697a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800697c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697e:	441a      	add	r2, r3
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	441a      	add	r2, r3
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800698e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006992:	2b03      	cmp	r3, #3
 8006994:	d11e      	bne.n	80069d4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	3330      	adds	r3, #48	; 0x30
 800699a:	332a      	adds	r3, #42	; 0x2a
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fc4f 	bl	8005240 <ld_word>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <find_volume+0x330>
 80069a8:	230d      	movs	r3, #13
 80069aa:	e0a8      	b.n	8006afe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	891b      	ldrh	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <find_volume+0x33c>
 80069b4:	230d      	movs	r3, #13
 80069b6:	e0a2      	b.n	8006afe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	3330      	adds	r3, #48	; 0x30
 80069bc:	332c      	adds	r3, #44	; 0x2c
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fc56 	bl	8005270 <ld_dword>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	647b      	str	r3, [r7, #68]	; 0x44
 80069d2:	e01f      	b.n	8006a14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	891b      	ldrh	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <find_volume+0x364>
 80069dc:	230d      	movs	r3, #13
 80069de:	e08e      	b.n	8006afe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	441a      	add	r2, r3
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d103      	bne.n	80069fc <find_volume+0x380>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	e00a      	b.n	8006a12 <find_volume+0x396>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	695a      	ldr	r2, [r3, #20]
 8006a00:	4613      	mov	r3, r2
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	4413      	add	r3, r2
 8006a06:	085a      	lsrs	r2, r3, #1
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	699a      	ldr	r2, [r3, #24]
 8006a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a1e:	0a5b      	lsrs	r3, r3, #9
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d201      	bcs.n	8006a28 <find_volume+0x3ac>
 8006a24:	230d      	movs	r3, #13
 8006a26:	e06a      	b.n	8006afe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2e:	611a      	str	r2, [r3, #16]
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d149      	bne.n	8006ada <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	3330      	adds	r3, #48	; 0x30
 8006a4a:	3330      	adds	r3, #48	; 0x30
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe fbf7 	bl	8005240 <ld_word>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d140      	bne.n	8006ada <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a60:	f7fe fe9e 	bl	80057a0 <move_window>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d137      	bne.n	8006ada <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	3330      	adds	r3, #48	; 0x30
 8006a74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe fbe1 	bl	8005240 <ld_word>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d127      	bne.n	8006ada <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	3330      	adds	r3, #48	; 0x30
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fbee 	bl	8005270 <ld_dword>
 8006a94:	4603      	mov	r3, r0
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <find_volume+0x48c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d11e      	bne.n	8006ada <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	3330      	adds	r3, #48	; 0x30
 8006aa0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe fbe3 	bl	8005270 <ld_dword>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <find_volume+0x490>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d113      	bne.n	8006ada <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	3330      	adds	r3, #48	; 0x30
 8006ab6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fbd8 	bl	8005270 <ld_dword>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	3330      	adds	r3, #48	; 0x30
 8006aca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fbce 	bl	8005270 <ld_dword>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006ae0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <find_volume+0x494>)
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <find_volume+0x494>)
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <find_volume+0x494>)
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006af8:	f7fe fdea 	bl	80056d0 <clear_lock>
#endif
	return FR_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3758      	adds	r7, #88	; 0x58
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	41615252 	.word	0x41615252
 8006b0c:	61417272 	.word	0x61417272
 8006b10:	200001b8 	.word	0x200001b8

08006b14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b1e:	2309      	movs	r3, #9
 8006b20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01c      	beq.n	8006b62 <validate+0x4e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d018      	beq.n	8006b62 <validate+0x4e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d013      	beq.n	8006b62 <validate+0x4e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	889a      	ldrh	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	88db      	ldrh	r3, [r3, #6]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d10c      	bne.n	8006b62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fad8 	bl	8005104 <disk_status>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <validate+0x4e>
			res = FR_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <validate+0x5a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	e000      	b.n	8006b70 <validate+0x5c>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	6013      	str	r3, [r2, #0]
	return res;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b92:	f107 0310 	add.w	r3, r7, #16
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fcd5 	bl	8006546 <get_ldnumber>
 8006b9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da01      	bge.n	8006ba8 <f_mount+0x28>
 8006ba4:	230b      	movs	r3, #11
 8006ba6:	e02b      	b.n	8006c00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <f_mount+0x88>)
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006bb8:	69b8      	ldr	r0, [r7, #24]
 8006bba:	f7fe fd89 	bl	80056d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	490d      	ldr	r1, [pc, #52]	; (8006c08 <f_mount+0x88>)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <f_mount+0x66>
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <f_mount+0x6a>
 8006be6:	2300      	movs	r3, #0
 8006be8:	e00a      	b.n	8006c00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006bea:	f107 010c 	add.w	r1, r7, #12
 8006bee:	f107 0308 	add.w	r3, r7, #8
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff fd41 	bl	800667c <find_volume>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	200001b4 	.word	0x200001b4

08006c0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b098      	sub	sp, #96	; 0x60
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <f_open+0x18>
 8006c20:	2309      	movs	r3, #9
 8006c22:	e1ad      	b.n	8006f80 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006c2c:	79fa      	ldrb	r2, [r7, #7]
 8006c2e:	f107 0110 	add.w	r1, r7, #16
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fd20 	bl	800667c <find_volume>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 8191 	bne.w	8006f6e <f_open+0x362>
		dj.obj.fs = fs;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	f107 0314 	add.w	r3, r7, #20
 8006c56:	4611      	mov	r1, r2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fc03 	bl	8006464 <follow_path>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d11a      	bne.n	8006ca2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006c6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da03      	bge.n	8006c7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006c76:	2306      	movs	r3, #6
 8006c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c7c:	e011      	b.n	8006ca2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f107 0314 	add.w	r3, r7, #20
 8006c94:	4611      	mov	r1, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fbd2 	bl	8005440 <chk_lock>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	f003 031c 	and.w	r3, r3, #28
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d07f      	beq.n	8006dac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d017      	beq.n	8006ce4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d10e      	bne.n	8006cda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006cbc:	f7fe fc1c 	bl	80054f8 <enq_lock>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <f_open+0xc8>
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff fb03 	bl	80062d6 <dir_register>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	e000      	b.n	8006cd6 <f_open+0xca>
 8006cd4:	2312      	movs	r3, #18
 8006cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	f043 0308 	orr.w	r3, r3, #8
 8006ce0:	71fb      	strb	r3, [r7, #7]
 8006ce2:	e010      	b.n	8006d06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ce4:	7ebb      	ldrb	r3, [r7, #26]
 8006ce6:	f003 0311 	and.w	r3, r3, #17
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <f_open+0xea>
					res = FR_DENIED;
 8006cee:	2307      	movs	r3, #7
 8006cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cf4:	e007      	b.n	8006d06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <f_open+0xfa>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d168      	bne.n	8006de0 <f_open+0x1d4>
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d063      	beq.n	8006de0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006d18:	f7fe f888 	bl	8004e2c <get_fattime>
 8006d1c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d20:	330e      	adds	r3, #14
 8006d22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe fae1 	bl	80052ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	3316      	adds	r3, #22
 8006d2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fadb 	bl	80052ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	330b      	adds	r3, #11
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fa32 	bl	80061ae <ld_clust>
 8006d4a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d50:	2200      	movs	r2, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fa4a 	bl	80061ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	331c      	adds	r3, #28
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fac4 	bl	80052ec <st_dword>
					fs->wflag = 1;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2201      	movs	r2, #1
 8006d68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d037      	beq.n	8006de0 <f_open+0x1d4>
						dw = fs->winsect;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe ff5d 	bl	8005c3e <remove_chain>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d126      	bne.n	8006de0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fd02 	bl	80057a0 <move_window>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006da6:	3a01      	subs	r2, #1
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	e019      	b.n	8006de0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d115      	bne.n	8006de0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006db4:	7ebb      	ldrb	r3, [r7, #26]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006dc4:	e00c      	b.n	8006de0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <f_open+0x1d4>
 8006dd0:	7ebb      	ldrb	r3, [r7, #26]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <f_open+0x1d4>
						res = FR_DENIED;
 8006dda:	2307      	movs	r3, #7
 8006ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d128      	bne.n	8006e3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf14      	ite	ne
 8006e12:	2301      	movne	r3, #1
 8006e14:	2300      	moveq	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f107 0314 	add.w	r3, r7, #20
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fb8b 	bl	800553c <inc_lock>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <f_open+0x22e>
 8006e34:	2302      	movs	r3, #2
 8006e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 8095 	bne.w	8006f6e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff f9af 	bl	80061ae <ld_clust>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	331c      	adds	r3, #28
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fa08 	bl	8005270 <ld_dword>
 8006e60:	4602      	mov	r2, r0
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	88da      	ldrh	r2, [r3, #6]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	79fa      	ldrb	r2, [r7, #7]
 8006e7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3330      	adds	r3, #48	; 0x30
 8006e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fa72 	bl	8005386 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d060      	beq.n	8006f6e <f_open+0x362>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05c      	beq.n	8006f6e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	895b      	ldrh	r3, [r3, #10]
 8006ec0:	025b      	lsls	r3, r3, #9
 8006ec2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed0:	e016      	b.n	8006f00 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fd1d 	bl	8005916 <get_fat>
 8006edc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d802      	bhi.n	8006eea <f_open+0x2de>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d102      	bne.n	8006ef8 <f_open+0x2ec>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	657b      	str	r3, [r7, #84]	; 0x54
 8006f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <f_open+0x304>
 8006f08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d8e0      	bhi.n	8006ed2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d127      	bne.n	8006f6e <f_open+0x362>
 8006f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d022      	beq.n	8006f6e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fcd3 	bl	80058d8 <clust2sect>
 8006f32:	6478      	str	r0, [r7, #68]	; 0x44
 8006f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <f_open+0x336>
						res = FR_INT_ERR;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f40:	e015      	b.n	8006f6e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f44:	0a5a      	lsrs	r2, r3, #9
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	441a      	add	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	7858      	ldrb	r0, [r3, #1]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f7fe f911 	bl	8005184 <disk_read>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <f_open+0x362>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <f_open+0x370>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3760      	adds	r7, #96	; 0x60
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08c      	sub	sp, #48	; 0x30
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f107 0210 	add.w	r2, r7, #16
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fdb3 	bl	8006b14 <validate>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <f_write+0x44>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	7d5b      	ldrb	r3, [r3, #21]
 8006fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <f_write+0x4a>
 8006fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fd0:	e14b      	b.n	800726a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	7d1b      	ldrb	r3, [r3, #20]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <f_write+0x5a>
 8006fde:	2307      	movs	r3, #7
 8006fe0:	e143      	b.n	800726a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	441a      	add	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	f080 812d 	bcs.w	800724e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006ffc:	e127      	b.n	800724e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 80e3 	bne.w	80071d2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	8952      	ldrh	r2, [r2, #10]
 8007016:	3a01      	subs	r2, #1
 8007018:	4013      	ands	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d143      	bne.n	80070aa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d11a      	bne.n	800706c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fe64 	bl	8005d08 <create_chain>
 8007040:	62b8      	str	r0, [r7, #40]	; 0x28
 8007042:	e013      	b.n	800706c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	4619      	mov	r1, r3
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7fe fef0 	bl	8005e38 <clmt_clust>
 8007058:	62b8      	str	r0, [r7, #40]	; 0x28
 800705a:	e007      	b.n	800706c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f7fe fe4f 	bl	8005d08 <create_chain>
 800706a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 80f2 	beq.w	8007258 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b01      	cmp	r3, #1
 8007078:	d104      	bne.n	8007084 <f_write+0xfc>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2202      	movs	r2, #2
 800707e:	755a      	strb	r2, [r3, #21]
 8007080:	2302      	movs	r3, #2
 8007082:	e0f2      	b.n	800726a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d104      	bne.n	8007096 <f_write+0x10e>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	755a      	strb	r2, [r3, #21]
 8007092:	2301      	movs	r3, #1
 8007094:	e0e9      	b.n	800726a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <f_write+0x122>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da18      	bge.n	80070e6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	7858      	ldrb	r0, [r3, #1]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1a      	ldr	r2, [r3, #32]
 80070c2:	2301      	movs	r3, #1
 80070c4:	f7fe f87e 	bl	80051c4 <disk_write>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <f_write+0x150>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	755a      	strb	r2, [r3, #21]
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0c8      	b.n	800726a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	7d1b      	ldrb	r3, [r3, #20]
 80070dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7fe fbf2 	bl	80058d8 <clust2sect>
 80070f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <f_write+0x17e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2202      	movs	r2, #2
 8007100:	755a      	strb	r2, [r3, #21]
 8007102:	2302      	movs	r3, #2
 8007104:	e0b1      	b.n	800726a <f_write+0x2e2>
			sect += csect;
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	4413      	add	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	0a5b      	lsrs	r3, r3, #9
 8007112:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d03c      	beq.n	8007194 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	4413      	add	r3, r2
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	8952      	ldrh	r2, [r2, #10]
 8007124:	4293      	cmp	r3, r2
 8007126:	d905      	bls.n	8007134 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	895b      	ldrh	r3, [r3, #10]
 800712c:	461a      	mov	r2, r3
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	7858      	ldrb	r0, [r3, #1]
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	69f9      	ldr	r1, [r7, #28]
 800713e:	f7fe f841 	bl	80051c4 <disk_write>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <f_write+0x1ca>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	755a      	strb	r2, [r3, #21]
 800714e:	2301      	movs	r3, #1
 8007150:	e08b      	b.n	800726a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	429a      	cmp	r2, r3
 800715e:	d915      	bls.n	800718c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	025b      	lsls	r3, r3, #9
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007178:	4619      	mov	r1, r3
 800717a:	f7fe f8e3 	bl	8005344 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	7d1b      	ldrb	r3, [r3, #20]
 8007182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	025b      	lsls	r3, r3, #9
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007192:	e03f      	b.n	8007214 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	429a      	cmp	r2, r3
 800719c:	d016      	beq.n	80071cc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d210      	bcs.n	80071cc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	7858      	ldrb	r0, [r3, #1]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071b4:	2301      	movs	r3, #1
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	f7fd ffe4 	bl	8005184 <disk_read>
 80071bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d004      	beq.n	80071cc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	755a      	strb	r2, [r3, #21]
 80071c8:	2301      	movs	r3, #1
 80071ca:	e04e      	b.n	800726a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80071e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d901      	bls.n	80071ec <f_write+0x264>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	4413      	add	r3, r2
 80071fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fe:	69f9      	ldr	r1, [r7, #28]
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe f89f 	bl	8005344 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	7d1b      	ldrb	r3, [r3, #20]
 800720a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	4413      	add	r3, r2
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	441a      	add	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	619a      	str	r2, [r3, #24]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	429a      	cmp	r2, r3
 8007232:	bf38      	it	cc
 8007234:	461a      	movcc	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	441a      	add	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f aed4 	bne.w	8006ffe <f_write+0x76>
 8007256:	e000      	b.n	800725a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007258:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7d1b      	ldrb	r3, [r3, #20]
 800725e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007262:	b2da      	uxtb	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3730      	adds	r7, #48	; 0x30
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f107 0208 	add.w	r2, r7, #8
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fc46 	bl	8006b14 <validate>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d168      	bne.n	8007364 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7d1b      	ldrb	r3, [r3, #20]
 8007296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d062      	beq.n	8007364 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	7d1b      	ldrb	r3, [r3, #20]
 80072a2:	b25b      	sxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da15      	bge.n	80072d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	7858      	ldrb	r0, [r3, #1]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	2301      	movs	r3, #1
 80072b8:	f7fd ff84 	bl	80051c4 <disk_write>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <f_sync+0x54>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e04f      	b.n	8007366 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7d1b      	ldrb	r3, [r3, #20]
 80072ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80072d4:	f7fd fdaa 	bl	8004e2c <get_fattime>
 80072d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe fa5c 	bl	80057a0 <move_window>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d138      	bne.n	8007364 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	330b      	adds	r3, #11
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	330b      	adds	r3, #11
 8007302:	f042 0220 	orr.w	r2, r2, #32
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	461a      	mov	r2, r3
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	f7fe ff69 	bl	80061ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f103 021c 	add.w	r2, r3, #28
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f7fd ffe0 	bl	80052ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3316      	adds	r3, #22
 8007330:	6939      	ldr	r1, [r7, #16]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd ffda 	bl	80052ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3312      	adds	r3, #18
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd ffb9 	bl	80052b6 <st_word>
					fs->wflag = 1;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2201      	movs	r2, #1
 8007348:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe fa55 	bl	80057fc <sync_fs>
 8007352:	4603      	mov	r3, r0
 8007354:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	7d1b      	ldrb	r3, [r3, #20]
 800735a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735e:	b2da      	uxtb	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007364:	7dfb      	ldrb	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff ff7b 	bl	8007272 <f_sync>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d118      	bne.n	80073b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f107 0208 	add.w	r2, r7, #8
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fbc0 	bl	8006b14 <validate>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10c      	bne.n	80073b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe f958 	bl	8005658 <dec_lock>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b096      	sub	sp, #88	; 0x58
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80073ca:	f107 0108 	add.w	r1, r7, #8
 80073ce:	1d3b      	adds	r3, r7, #4
 80073d0:	2202      	movs	r2, #2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff f952 	bl	800667c <find_volume>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80073e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 80ec 	bne.w	80075c4 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f107 030c 	add.w	r3, r7, #12
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff f835 	bl	8006464 <follow_path>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8007400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <f_mkdir+0x4c>
 8007408:	2308      	movs	r3, #8
 800740a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800740e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007412:	2b04      	cmp	r3, #4
 8007414:	f040 80d6 	bne.w	80075c4 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8007418:	f107 030c 	add.w	r3, r7, #12
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fc72 	bl	8005d08 <create_chain>
 8007424:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	895b      	ldrh	r3, [r3, #10]
 800742a:	025b      	lsls	r3, r3, #9
 800742c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8007434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <f_mkdir+0x7e>
 800743a:	2307      	movs	r3, #7
 800743c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8007440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007442:	2b01      	cmp	r3, #1
 8007444:	d102      	bne.n	800744c <f_mkdir+0x8a>
 8007446:	2302      	movs	r3, #2
 8007448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800744c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d102      	bne.n	800745a <f_mkdir+0x98>
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800745a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <f_mkdir+0xae>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe f957 	bl	8005718 <sync_window>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8007470:	f7fd fcdc 	bl	8004e2c <get_fattime>
 8007474:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8007476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800747a:	2b00      	cmp	r3, #0
 800747c:	d16a      	bne.n	8007554 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fa28 	bl	80058d8 <clust2sect>
 8007488:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3330      	adds	r3, #48	; 0x30
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8007490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007494:	2100      	movs	r1, #0
 8007496:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007498:	f7fd ff75 	bl	8005386 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800749c:	220b      	movs	r2, #11
 800749e:	2120      	movs	r1, #32
 80074a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074a2:	f7fd ff70 	bl	8005386 <mem_set>
					dir[DIR_Name] = '.';
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	222e      	movs	r2, #46	; 0x2e
 80074aa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	330b      	adds	r3, #11
 80074b0:	2210      	movs	r2, #16
 80074b2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80074b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b6:	3316      	adds	r3, #22
 80074b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fd ff16 	bl	80052ec <st_dword>
					st_clust(fs, dir, dcl);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fe90 	bl	80061ec <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80074cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ce:	3320      	adds	r3, #32
 80074d0:	2220      	movs	r2, #32
 80074d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd ff35 	bl	8005344 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	3321      	adds	r3, #33	; 0x21
 80074de:	222e      	movs	r2, #46	; 0x2e
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d106      	bne.n	80074fc <f_mkdir+0x13a>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d101      	bne.n	80074fc <f_mkdir+0x13a>
 80074f8:	2300      	movs	r3, #0
 80074fa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80074fc:	68b8      	ldr	r0, [r7, #8]
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	3320      	adds	r3, #32
 8007502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007504:	4619      	mov	r1, r3
 8007506:	f7fe fe71 	bl	80061ec <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	895b      	ldrh	r3, [r3, #10]
 800750e:	653b      	str	r3, [r7, #80]	; 0x50
 8007510:	e01b      	b.n	800754a <f_mkdir+0x188>
					fs->winsect = dsc++;
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2201      	movs	r2, #1
 8007520:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe f8f7 	bl	8005718 <sync_window>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8007530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10c      	bne.n	8007552 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8007538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753c:	2100      	movs	r1, #0
 800753e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007540:	f7fd ff21 	bl	8005386 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007546:	3b01      	subs	r3, #1
 8007548:	653b      	str	r3, [r7, #80]	; 0x50
 800754a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e0      	bne.n	8007512 <f_mkdir+0x150>
 8007550:	e000      	b.n	8007554 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8007552:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8007554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800755c:	f107 030c 	add.w	r3, r7, #12
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe feb8 	bl	80062d6 <dir_register>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800756c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007570:	2b00      	cmp	r3, #0
 8007572:	d120      	bne.n	80075b6 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	3316      	adds	r3, #22
 800757c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd feb4 	bl	80052ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007588:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fe2e 	bl	80061ec <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	330b      	adds	r3, #11
 8007594:	2210      	movs	r2, #16
 8007596:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2201      	movs	r2, #1
 800759c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800759e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10e      	bne.n	80075c4 <f_mkdir+0x202>
					res = sync_fs(fs);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe f927 	bl	80057fc <sync_fs>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80075b4:	e006      	b.n	80075c4 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	2200      	movs	r2, #0
 80075bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fb3d 	bl	8005c3e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80075c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3758      	adds	r7, #88	; 0x58
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 80075e8:	7a5b      	ldrb	r3, [r3, #9]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d131      	bne.n	8007654 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075f0:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 80075f2:	7a5b      	ldrb	r3, [r3, #9]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 80075fa:	2100      	movs	r1, #0
 80075fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075fe:	4b19      	ldr	r3, [pc, #100]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 8007600:	7a5b      	ldrb	r3, [r3, #9]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800760e:	4b15      	ldr	r3, [pc, #84]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 8007610:	7a5b      	ldrb	r3, [r3, #9]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 8007618:	4413      	add	r3, r2
 800761a:	79fa      	ldrb	r2, [r7, #7]
 800761c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800761e:	4b11      	ldr	r3, [pc, #68]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 8007620:	7a5b      	ldrb	r3, [r3, #9]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	b2d1      	uxtb	r1, r2
 8007628:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <FATFS_LinkDriverEx+0x94>)
 800762a:	7251      	strb	r1, [r2, #9]
 800762c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800762e:	7dbb      	ldrb	r3, [r7, #22]
 8007630:	3330      	adds	r3, #48	; 0x30
 8007632:	b2da      	uxtb	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3301      	adds	r3, #1
 800763c:	223a      	movs	r2, #58	; 0x3a
 800763e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3302      	adds	r3, #2
 8007644:	222f      	movs	r2, #47	; 0x2f
 8007646:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	3303      	adds	r3, #3
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	200001dc 	.word	0x200001dc

08007668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007672:	2200      	movs	r2, #0
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ffaa 	bl	80075d0 <FATFS_LinkDriverEx>
 800767c:	4603      	mov	r3, r0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <__libc_init_array>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4d0d      	ldr	r5, [pc, #52]	; (80076c0 <__libc_init_array+0x38>)
 800768c:	4c0d      	ldr	r4, [pc, #52]	; (80076c4 <__libc_init_array+0x3c>)
 800768e:	1b64      	subs	r4, r4, r5
 8007690:	10a4      	asrs	r4, r4, #2
 8007692:	2600      	movs	r6, #0
 8007694:	42a6      	cmp	r6, r4
 8007696:	d109      	bne.n	80076ac <__libc_init_array+0x24>
 8007698:	4d0b      	ldr	r5, [pc, #44]	; (80076c8 <__libc_init_array+0x40>)
 800769a:	4c0c      	ldr	r4, [pc, #48]	; (80076cc <__libc_init_array+0x44>)
 800769c:	f000 f820 	bl	80076e0 <_init>
 80076a0:	1b64      	subs	r4, r4, r5
 80076a2:	10a4      	asrs	r4, r4, #2
 80076a4:	2600      	movs	r6, #0
 80076a6:	42a6      	cmp	r6, r4
 80076a8:	d105      	bne.n	80076b6 <__libc_init_array+0x2e>
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b0:	4798      	blx	r3
 80076b2:	3601      	adds	r6, #1
 80076b4:	e7ee      	b.n	8007694 <__libc_init_array+0xc>
 80076b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ba:	4798      	blx	r3
 80076bc:	3601      	adds	r6, #1
 80076be:	e7f2      	b.n	80076a6 <__libc_init_array+0x1e>
 80076c0:	0800781c 	.word	0x0800781c
 80076c4:	0800781c 	.word	0x0800781c
 80076c8:	0800781c 	.word	0x0800781c
 80076cc:	08007820 	.word	0x08007820

080076d0 <memset>:
 80076d0:	4402      	add	r2, r0
 80076d2:	4603      	mov	r3, r0
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d100      	bne.n	80076da <memset+0xa>
 80076d8:	4770      	bx	lr
 80076da:	f803 1b01 	strb.w	r1, [r3], #1
 80076de:	e7f9      	b.n	80076d4 <memset+0x4>

080076e0 <_init>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr

080076ec <_fini>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr
