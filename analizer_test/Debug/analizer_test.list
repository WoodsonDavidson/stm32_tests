
analizer_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003b70  08003b70  00013b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bd8  08003bd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bd8  08003bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08003c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003c50  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f60  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001522  00000000  00000000  00025ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00027520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00027b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016765  00000000  00000000  00028138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000716b  00000000  00000000  0003e89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080fc3  00000000  00000000  00045a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c69cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  000c6a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b54 	.word	0x08003b54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003b54 	.word	0x08003b54

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2ulz>:
 8000a28:	b5d0      	push	{r4, r6, r7, lr}
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <__aeabi_d2ulz+0x34>)
 8000a2e:	4606      	mov	r6, r0
 8000a30:	460f      	mov	r7, r1
 8000a32:	f7ff fd49 	bl	80004c8 <__aeabi_dmul>
 8000a36:	f000 f815 	bl	8000a64 <__aeabi_d2uiz>
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	f7ff fcca 	bl	80003d4 <__aeabi_ui2d>
 8000a40:	2200      	movs	r2, #0
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <__aeabi_d2ulz+0x38>)
 8000a44:	f7ff fd40 	bl	80004c8 <__aeabi_dmul>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	4639      	mov	r1, r7
 8000a50:	f7ff fb82 	bl	8000158 <__aeabi_dsub>
 8000a54:	f000 f806 	bl	8000a64 <__aeabi_d2uiz>
 8000a58:	4621      	mov	r1, r4
 8000a5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000a5c:	3df00000 	.word	0x3df00000
 8000a60:	41f00000 	.word	0x41f00000

08000a64 <__aeabi_d2uiz>:
 8000a64:	004a      	lsls	r2, r1, #1
 8000a66:	d211      	bcs.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a6c:	d211      	bcs.n	8000a92 <__aeabi_d2uiz+0x2e>
 8000a6e:	d50d      	bpl.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a78:	d40e      	bmi.n	8000a98 <__aeabi_d2uiz+0x34>
 8000a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d102      	bne.n	8000a9e <__aeabi_d2uiz+0x3a>
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 fb3a 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f805 	bl	8000aba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 f874 	bl	8000b9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ab4:	f000 f83c 	bl	8000b30 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x14>

08000aba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b090      	sub	sp, #64	; 0x40
 8000abe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac0:	f107 0318 	add.w	r3, r7, #24
 8000ac4:	2228      	movs	r2, #40	; 0x28
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 f959 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 feb2 	bl	8001858 <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000afa:	f000 fa21 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afe:	230f      	movs	r3, #15
 8000b00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f920 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b22:	f000 fa0d 	bl	8000f40 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3740      	adds	r7, #64	; 0x40
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <MX_SPI1_Init+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_SPI1_Init+0x64>)
 8000b82:	f001 fa47 	bl	8002014 <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f000 f9d8 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000008c 	.word	0x2000008c
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb0:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bce:	f043 0320 	orr.w	r3, r3, #32
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_GPIO_Init+0xe0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	4820      	ldr	r0, [pc, #128]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000c00:	f000 fdfa 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xe8>)
 8000c0a:	f000 fdf5 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000c28:	f000 fc62 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000c42:	f000 fc55 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c46:	2310      	movs	r3, #16
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MX_GPIO_Init+0xe8>)
 8000c5e:	f000 fc47 	bl	80014f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f000 fb93 	bl	8001392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f000 fbac 	bl	80013ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	10110000 	.word	0x10110000

08000c8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	CRC7 = GET_CRC7(0b100000000011111111); //1011010*/




	uint8_t crc7_plus_1_cmd0 = (GET_CRC7(0b100000000000000000000000000000000000000) << 1) + 1; //cmd0
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000c9e:	f000 f887 	bl	8000db0 <GET_CRC7>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t crc7_plus_1_cmd8 = (GET_CRC7(0b100100000000000000000000000000000000001) << 1) + 1; //cmd8
 8000cae:	f04f 0001 	mov.w	r0, #1
 8000cb2:	f04f 0148 	mov.w	r1, #72	; 0x48
 8000cb6:	f000 f87b 	bl	8000db0 <GET_CRC7>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	uint8_t nulls80[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8000cc6:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x114>)
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cce:	c303      	stmia	r3!, {r0, r1}
 8000cd0:	801a      	strh	r2, [r3, #0]
	uint8_t cmd0[] = {0x40, 0x00, 0x00, 0x00, 0x00, crc7_plus_1_cmd0};
 8000cd2:	2340      	movs	r3, #64	; 0x40
 8000cd4:	773b      	strb	r3, [r7, #28]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	777b      	strb	r3, [r7, #29]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	77bb      	strb	r3, [r7, #30]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	77fb      	strb	r3, [r7, #31]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 3020 	strb.w	r3, [r7, #32]
 8000ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t cmd8[] = {0x48, 0x00, 0x00, 0x00, 0x01, crc7_plus_1_cmd8}; //0x01 - 2.7 - 3.6 V
 8000cf0:	2348      	movs	r3, #72	; 0x48
 8000cf2:	753b      	strb	r3, [r7, #20]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	757b      	strb	r3, [r7, #21]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	75bb      	strb	r3, [r7, #22]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]
 8000d00:	2301      	movs	r3, #1
 8000d02:	763b      	strb	r3, [r7, #24]
 8000d04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d08:	767b      	strb	r3, [r7, #25]
	uint8_t response[] = {0,0,0,0,0};
 8000d0a:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d14:	6018      	str	r0, [r3, #0]
 8000d16:	3304      	adds	r3, #4
 8000d18:	7019      	strb	r1, [r3, #0]





	HAL_SPI_Transmit(&hspi1, &nulls80[0], 10, HAL_MAX_DELAY);
 8000d1a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	220a      	movs	r2, #10
 8000d24:	4820      	ldr	r0, [pc, #128]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d26:	f001 f9f9 	bl	800211c <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	481f      	ldr	r0, [pc, #124]	; (8000dac <HAL_GPIO_EXTI_Callback+0x120>)
 8000d30:	f000 fd62 	bl	80017f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd0[0], 6, HAL_MAX_DELAY);
 8000d34:	f107 011c 	add.w	r1, r7, #28
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2206      	movs	r2, #6
 8000d3e:	481a      	ldr	r0, [pc, #104]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d40:	f001 f9ec 	bl	800211c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	4818      	ldr	r0, [pc, #96]	; (8000dac <HAL_GPIO_EXTI_Callback+0x120>)
 8000d4a:	f000 fd55 	bl	80017f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2110      	movs	r1, #16
 8000d52:	4816      	ldr	r0, [pc, #88]	; (8000dac <HAL_GPIO_EXTI_Callback+0x120>)
 8000d54:	f000 fd50 	bl	80017f8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &response[0], 5, HAL_MAX_DELAY);
 8000d58:	f107 010c 	add.w	r1, r7, #12
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	2205      	movs	r2, #5
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d64:	f001 fb1d 	bl	80023a2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <HAL_GPIO_EXTI_Callback+0x120>)
 8000d6e:	f000 fd43 	bl	80017f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <HAL_GPIO_EXTI_Callback+0x120>)
 8000d78:	f000 fd3e 	bl	80017f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd8[0], 6, HAL_MAX_DELAY);
 8000d7c:	f107 0114 	add.w	r1, r7, #20
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	2206      	movs	r2, #6
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d88:	f001 f9c8 	bl	800211c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_GPIO_EXTI_Callback+0x120>)
 8000d92:	f000 fd31 	bl	80017f8 <HAL_GPIO_WritePin>





}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	; 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08003b70 	.word	0x08003b70
 8000da4:	08003b7c 	.word	0x08003b7c
 8000da8:	2000008c 	.word	0x2000008c
 8000dac:	40010800 	.word	0x40010800

08000db0 <GET_CRC7>:



uint8_t GET_CRC7(uint64_t data){
 8000db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db4:	b091      	sub	sp, #68	; 0x44
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t nulls = 64; //45
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	//uint64_t data;
	uint64_t pol = 0x89;
 8000dc2:	f04f 0289 	mov.w	r2, #137	; 0x89
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint8_t data_len = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t pol_len = 8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint64_t pol_long = 0;
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t flag = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t CRC7 = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint64_t pow_2_nulls = 0;
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t pow_2_nulls_p_1 = 0;
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t nulls_for_pol = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
	data = data << 7;
 8000e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	01cb      	lsls	r3, r1, #7
 8000e1c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000e20:	01c2      	lsls	r2, r0, #7
 8000e22:	e9c7 2300 	strd	r2, r3, [r7]

	do{
		do{
			pow_2_nulls = (pow(2,nulls));
 8000e26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fad2 	bl	80003d4 <__aeabi_ui2d>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	f04f 0000 	mov.w	r0, #0
 8000e38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e3c:	f001 ffa8 	bl	8002d90 <pow>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fdee 	bl	8000a28 <__aeabi_d2ulz>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	e9c7 2306 	strd	r2, r3, [r7, #24]
			pow_2_nulls_p_1 = (pow(2,(nulls+1)));
 8000e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff faca 	bl	80003f4 <__aeabi_i2d>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	f04f 0000 	mov.w	r0, #0
 8000e68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e6c:	f001 ff90 	bl	8002d90 <pow>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fdd6 	bl	8000a28 <__aeabi_d2ulz>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
			if(data >= pow_2_nulls && data < pow_2_nulls_p_1){
 8000e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e8c:	4290      	cmp	r0, r2
 8000e8e:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e92:	d30f      	bcc.n	8000eb4 <GET_CRC7+0x104>
 8000e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ea2:	d207      	bcs.n	8000eb4 <GET_CRC7+0x104>
				data_len = nulls + 1;
 8000ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				flag = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			}
			nulls = nulls - 1;
 8000eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}while(flag == 0);	//till this point i calculate data_len
 8000ebe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0af      	beq.n	8000e26 <GET_CRC7+0x76>
		flag = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(data_len > 7){
 8000ecc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d923      	bls.n	8000f1c <GET_CRC7+0x16c>
			nulls_for_pol = data_len - pol_len;
 8000ed4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	73fb      	strb	r3, [r7, #15]
			pol_long = pol << nulls_for_pol;
 8000ee0:	7bf9      	ldrb	r1, [r7, #15]
 8000ee2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ee6:	f1a1 0620 	sub.w	r6, r1, #32
 8000eea:	f1c1 0020 	rsb	r0, r1, #32
 8000eee:	fa03 f501 	lsl.w	r5, r3, r1
 8000ef2:	fa02 f606 	lsl.w	r6, r2, r6
 8000ef6:	4335      	orrs	r5, r6
 8000ef8:	fa22 f000 	lsr.w	r0, r2, r0
 8000efc:	4305      	orrs	r5, r0
 8000efe:	fa02 f401 	lsl.w	r4, r2, r1
 8000f02:	e9c7 4508 	strd	r4, r5, [r7, #32]
			data = data ^ pol_long;	//till this point i calculate "x or"
 8000f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f0e:	ea80 0802 	eor.w	r8, r0, r2
 8000f12:	ea81 0903 	eor.w	r9, r1, r3
 8000f16:	e9c7 8900 	strd	r8, r9, [r7]
 8000f1a:	e005      	b.n	8000f28 <GET_CRC7+0x178>
		}else{
			CRC7 = data;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			flag = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		}
	}while(flag != 2);
 8000f28:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	f47f af7a 	bne.w	8000e26 <GET_CRC7+0x76>
	return CRC7;
 8000f32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3744      	adds	r7, #68	; 0x44
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x60>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_MspInit+0x60>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_SPI_MspInit+0x98>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d137      	bne.n	8001040 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_SPI_MspInit+0x9c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HAL_SPI_MspInit+0x9c>)
 8000fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_SPI_MspInit+0x9c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_SPI_MspInit+0x9c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x9c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_SPI_MspInit+0x9c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001000:	23a0      	movs	r3, #160	; 0xa0
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <HAL_SPI_MspInit+0xa0>)
 8001014:	f000 fa6c 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_SPI_MspInit+0xa0>)
 800102c:	f000 fa60 	bl	80014f0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2023      	movs	r0, #35	; 0x23
 8001036:	f000 f9ac 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800103a:	2023      	movs	r0, #35	; 0x23
 800103c:	f000 f9c5 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013000 	.word	0x40013000
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f887 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <SPI1_IRQHandler+0x10>)
 80010aa:	f001 fc43 	bl	8002934 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000008c 	.word	0x2000008c

080010b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80010bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010c0:	f000 fbb2 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d4:	f7ff fff8 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010da:	490c      	ldr	r1, [pc, #48]	; (800110c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010f0:	4c09      	ldr	r4, [pc, #36]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f001 fe1b 	bl	8002d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff fccf 	bl	8000aa4 <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001110:	08003be0 	.word	0x08003be0
  ldr r2, =_sbss
 8001114:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001118:	200000e8 	.word	0x200000e8

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x28>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f923 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff ff06 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f93b 	bl	80013e6 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f903 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x20>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000008 	.word	0x20000008
 80011cc:	200000e4 	.word	0x200000e4

080011d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_GetTick+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	200000e4 	.word	0x200000e4

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4906      	ldr	r1, [pc, #24]	; (800127c <__NVIC_EnableIRQ+0x34>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff90 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff2d 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff42 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff35 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d005      	beq.n	8001424 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2204      	movs	r2, #4
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e051      	b.n	80014c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 020e 	bic.w	r2, r2, #14
 8001432:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_DMA_Abort_IT+0xd4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d029      	beq.n	80014a2 <HAL_DMA_Abort_IT+0xa2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_DMA_Abort_IT+0xd8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d022      	beq.n	800149e <HAL_DMA_Abort_IT+0x9e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <HAL_DMA_Abort_IT+0xdc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01a      	beq.n	8001498 <HAL_DMA_Abort_IT+0x98>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_DMA_Abort_IT+0xe0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d012      	beq.n	8001492 <HAL_DMA_Abort_IT+0x92>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_DMA_Abort_IT+0xe4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00a      	beq.n	800148c <HAL_DMA_Abort_IT+0x8c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_DMA_Abort_IT+0xe8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d102      	bne.n	8001486 <HAL_DMA_Abort_IT+0x86>
 8001480:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001484:	e00e      	b.n	80014a4 <HAL_DMA_Abort_IT+0xa4>
 8001486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800148a:	e00b      	b.n	80014a4 <HAL_DMA_Abort_IT+0xa4>
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	e008      	b.n	80014a4 <HAL_DMA_Abort_IT+0xa4>
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	e005      	b.n	80014a4 <HAL_DMA_Abort_IT+0xa4>
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	e002      	b.n	80014a4 <HAL_DMA_Abort_IT+0xa4>
 800149e:	2310      	movs	r3, #16
 80014a0:	e000      	b.n	80014a4 <HAL_DMA_Abort_IT+0xa4>
 80014a2:	2301      	movs	r3, #1
 80014a4:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_DMA_Abort_IT+0xec>)
 80014a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
    } 
  }
  return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020008 	.word	0x40020008
 80014d8:	4002001c 	.word	0x4002001c
 80014dc:	40020030 	.word	0x40020030
 80014e0:	40020044 	.word	0x40020044
 80014e4:	40020058 	.word	0x40020058
 80014e8:	4002006c 	.word	0x4002006c
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e169      	b.n	80017d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001504:	2201      	movs	r2, #1
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8158 	bne.w	80017d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a9a      	ldr	r2, [pc, #616]	; (8001790 <HAL_GPIO_Init+0x2a0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d05e      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800152c:	4a98      	ldr	r2, [pc, #608]	; (8001790 <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d875      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001532:	4a98      	ldr	r2, [pc, #608]	; (8001794 <HAL_GPIO_Init+0x2a4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d058      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001538:	4a96      	ldr	r2, [pc, #600]	; (8001794 <HAL_GPIO_Init+0x2a4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d86f      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800153e:	4a96      	ldr	r2, [pc, #600]	; (8001798 <HAL_GPIO_Init+0x2a8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d052      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001544:	4a94      	ldr	r2, [pc, #592]	; (8001798 <HAL_GPIO_Init+0x2a8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d869      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800154a:	4a94      	ldr	r2, [pc, #592]	; (800179c <HAL_GPIO_Init+0x2ac>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d04c      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001550:	4a92      	ldr	r2, [pc, #584]	; (800179c <HAL_GPIO_Init+0x2ac>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d863      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001556:	4a92      	ldr	r2, [pc, #584]	; (80017a0 <HAL_GPIO_Init+0x2b0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d046      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800155c:	4a90      	ldr	r2, [pc, #576]	; (80017a0 <HAL_GPIO_Init+0x2b0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d85d      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d82a      	bhi.n	80015bc <HAL_GPIO_Init+0xcc>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d859      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_GPIO_Init+0x80>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015c5 	.word	0x080015c5
 8001578:	080015d7 	.word	0x080015d7
 800157c:	08001619 	.word	0x08001619
 8001580:	0800161f 	.word	0x0800161f
 8001584:	0800161f 	.word	0x0800161f
 8001588:	0800161f 	.word	0x0800161f
 800158c:	0800161f 	.word	0x0800161f
 8001590:	0800161f 	.word	0x0800161f
 8001594:	0800161f 	.word	0x0800161f
 8001598:	0800161f 	.word	0x0800161f
 800159c:	0800161f 	.word	0x0800161f
 80015a0:	0800161f 	.word	0x0800161f
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	0800161f 	.word	0x0800161f
 80015ac:	0800161f 	.word	0x0800161f
 80015b0:	0800161f 	.word	0x0800161f
 80015b4:	080015cd 	.word	0x080015cd
 80015b8:	080015e1 	.word	0x080015e1
 80015bc:	4a79      	ldr	r2, [pc, #484]	; (80017a4 <HAL_GPIO_Init+0x2b4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c2:	e02c      	b.n	800161e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e029      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e024      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	3308      	adds	r3, #8
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e01f      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	330c      	adds	r3, #12
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e01a      	b.n	8001620 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f2:	2304      	movs	r3, #4
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e013      	b.n	8001620 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	611a      	str	r2, [r3, #16]
          break;
 800160a:	e009      	b.n	8001620 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
          break;
 8001616:	e003      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x130>
          break;
 800161e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d801      	bhi.n	800162a <HAL_GPIO_Init+0x13a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e001      	b.n	800162e <HAL_GPIO_Init+0x13e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d802      	bhi.n	800163c <HAL_GPIO_Init+0x14c>
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x152>
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	3b08      	subs	r3, #8
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	210f      	movs	r1, #15
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	6a39      	ldr	r1, [r7, #32]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80b1 	beq.w	80017d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001670:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a4c      	ldr	r2, [pc, #304]	; (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_GPIO_Init+0x2b8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001688:	4a48      	ldr	r2, [pc, #288]	; (80017ac <HAL_GPIO_Init+0x2bc>)
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a40      	ldr	r2, [pc, #256]	; (80017b0 <HAL_GPIO_Init+0x2c0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d013      	beq.n	80016dc <HAL_GPIO_Init+0x1ec>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3f      	ldr	r2, [pc, #252]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d00d      	beq.n	80016d8 <HAL_GPIO_Init+0x1e8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <HAL_GPIO_Init+0x2c8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d007      	beq.n	80016d4 <HAL_GPIO_Init+0x1e4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_GPIO_Init+0x1e0>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e004      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e002      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016dc:	2300      	movs	r3, #0
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4093      	lsls	r3, r2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ee:	492f      	ldr	r1, [pc, #188]	; (80017ac <HAL_GPIO_Init+0x2bc>)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	492c      	ldr	r1, [pc, #176]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4928      	ldr	r1, [pc, #160]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001720:	4013      	ands	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4922      	ldr	r1, [pc, #136]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	491e      	ldr	r1, [pc, #120]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001748:	4013      	ands	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4918      	ldr	r1, [pc, #96]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4914      	ldr	r1, [pc, #80]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d021      	beq.n	80017c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	490e      	ldr	r1, [pc, #56]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e021      	b.n	80017d2 <HAL_GPIO_Init+0x2e2>
 800178e:	bf00      	nop
 8001790:	10320000 	.word	0x10320000
 8001794:	10310000 	.word	0x10310000
 8001798:	10220000 	.word	0x10220000
 800179c:	10210000 	.word	0x10210000
 80017a0:	10120000 	.word	0x10120000
 80017a4:	10110000 	.word	0x10110000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_GPIO_Init+0x304>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	4909      	ldr	r1, [pc, #36]	; (80017f4 <HAL_GPIO_Init+0x304>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	3301      	adds	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f47f ae8e 	bne.w	8001504 <HAL_GPIO_Init+0x14>
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	372c      	adds	r7, #44	; 0x2c
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40010400 	.word	0x40010400

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa20 	bl	8000c8c <HAL_GPIO_EXTI_Callback>
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e272      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
 8001890:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06c      	beq.n	8001984 <HAL_RCC_OscConfig+0x12c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d168      	bne.n	8001984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e24c      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x76>
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xbc>
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 8001914:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fc4c 	bl	80011d0 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fc48 	bl	80011d0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e200      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe4>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fc38 	bl	80011d0 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fc34 	bl	80011d0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1ec      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x10c>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4939      	ldr	r1, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fbed 	bl	80011d0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fbe9 	bl	80011d0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1a1      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fbcc 	bl	80011d0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fbc8 	bl	80011d0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e180      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03a      	beq.n	8001adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fbac 	bl	80011d0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fba8 	bl	80011d0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e160      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fa9c 	bl	8001fd8 <RCC_Delay>
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fb92 	bl	80011d0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fb8e 	bl	80011d0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e146      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	42420000 	.word	0x42420000
 8001acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e9      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a6 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7e      	ldr	r2, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fb4f 	bl	80011d0 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fb4b 	bl	80011d0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e103      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a6e      	ldr	r2, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	e01c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x356>
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff faff 	bl	80011d0 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fafb 	bl	80011d0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0b1      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fae9 	bl	80011d0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fae5 	bl	80011d0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e09b      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a3b      	ldr	r2, [pc, #236]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d061      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d146      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fab9 	bl	80011d0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fab5 	bl	80011d0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e06d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	4921      	ldr	r1, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a19      	ldr	r1, [r3, #32]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	430b      	orrs	r3, r1
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fa89 	bl	80011d0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fa85 	bl	80011d0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e03d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46a>
 8001ce0:	e035      	b.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa72 	bl	80011d0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff fa6e 	bl	80011d0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e026      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x498>
 8001d0e:	e01e      	b.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e019      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_OscConfig+0x500>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0d0      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4965      	ldr	r1, [pc, #404]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d040      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e073      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7ff f9c0 	bl	80011d0 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff f9bc 	bl	80011d0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e053      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d210      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e032      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f821 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1cc>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f91e 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003b84 	.word	0x08003b84
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5e:	e027      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f62:	613b      	str	r3, [r7, #16]
      break;
 8001f64:	e027      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0c5b      	lsrs	r3, r3, #17
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f92:	fb03 f202 	mul.w	r2, r3, r2
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e004      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	613b      	str	r3, [r7, #16]
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	613b      	str	r3, [r7, #16]
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	693b      	ldr	r3, [r7, #16]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	007a1200 	.word	0x007a1200
 8001fcc:	08003b94 	.word	0x08003b94
 8001fd0:	08003ba4 	.word	0x08003ba4
 8001fd4:	003d0900 	.word	0x003d0900

08001fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <RCC_Delay+0x34>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <RCC_Delay+0x38>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0a5b      	lsrs	r3, r3, #9
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff4:	bf00      	nop
  }
  while (Delay --);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <RCC_Delay+0x1c>
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000000 	.word	0x20000000
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e076      	b.n	8002114 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2b00      	cmp	r3, #0
 800202c:	d108      	bne.n	8002040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002036:	d009      	beq.n	800204c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
 800203e:	e005      	b.n	800204c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe ffa2 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002082:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	ea42 0103 	orr.w	r1, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	0c1a      	lsrs	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f002 0204 	and.w	r2, r2, #4
 80020f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002102:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_SPI_Transmit+0x22>
 800213a:	2302      	movs	r3, #2
 800213c:	e12d      	b.n	800239a <HAL_SPI_Transmit+0x27e>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002146:	f7ff f843 	bl	80011d0 <HAL_GetTick>
 800214a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d002      	beq.n	8002162 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002160:	e116      	b.n	8002390 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_SPI_Transmit+0x52>
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002172:	e10d      	b.n	8002390 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2203      	movs	r2, #3
 8002178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	88fa      	ldrh	r2, [r7, #6]
 800218c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ba:	d10f      	bne.n	80021dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d007      	beq.n	80021fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002202:	d14f      	bne.n	80022a4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Transmit+0xf6>
 800220c:	8afb      	ldrh	r3, [r7, #22]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d142      	bne.n	8002298 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002236:	e02f      	b.n	8002298 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d112      	bne.n	800226c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	1c9a      	adds	r2, r3, #2
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	86da      	strh	r2, [r3, #54]	; 0x36
 800226a:	e015      	b.n	8002298 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226c:	f7fe ffb0 	bl	80011d0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d803      	bhi.n	8002284 <HAL_SPI_Transmit+0x168>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d102      	bne.n	800228a <HAL_SPI_Transmit+0x16e>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002296:	e07b      	b.n	8002390 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ca      	bne.n	8002238 <HAL_SPI_Transmit+0x11c>
 80022a2:	e050      	b.n	8002346 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_SPI_Transmit+0x196>
 80022ac:	8afb      	ldrh	r3, [r7, #22]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d144      	bne.n	800233c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022d8:	e030      	b.n	800233c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d113      	bne.n	8002310 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	86da      	strh	r2, [r3, #54]	; 0x36
 800230e:	e015      	b.n	800233c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002310:	f7fe ff5e 	bl	80011d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d803      	bhi.n	8002328 <HAL_SPI_Transmit+0x20c>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d102      	bne.n	800232e <HAL_SPI_Transmit+0x212>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800233a:	e029      	b.n	8002390 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1c9      	bne.n	80022da <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fcd0 	bl	8002cf0 <SPI_EndRxTxTransaction>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	77fb      	strb	r3, [r7, #31]
 8002386:	e003      	b.n	8002390 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002398:	7ffb      	ldrb	r3, [r7, #31]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b088      	sub	sp, #32
 80023a6:	af02      	add	r7, sp, #8
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d002      	beq.n	80023c8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023c6:	e0fb      	b.n	80025c0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d0:	d112      	bne.n	80023f8 <HAL_SPI_Receive+0x56>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10e      	bne.n	80023f8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2204      	movs	r2, #4
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f8ef 	bl	80025d2 <HAL_SPI_TransmitReceive>
 80023f4:	4603      	mov	r3, r0
 80023f6:	e0e8      	b.n	80025ca <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_SPI_Receive+0x64>
 8002402:	2302      	movs	r3, #2
 8002404:	e0e1      	b.n	80025ca <HAL_SPI_Receive+0x228>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800240e:	f7fe fedf 	bl	80011d0 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_SPI_Receive+0x7e>
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002424:	e0cc      	b.n	80025c0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2204      	movs	r2, #4
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	88fa      	ldrh	r2, [r7, #6]
 800243e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246c:	d10f      	bne.n	800248e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d007      	beq.n	80024ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d16a      	bne.n	800258a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024b4:	e032      	b.n	800251c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d115      	bne.n	80024f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f103 020c 	add.w	r2, r3, #12
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024ee:	e015      	b.n	800251c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f0:	f7fe fe6e 	bl	80011d0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d803      	bhi.n	8002508 <HAL_SPI_Receive+0x166>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d102      	bne.n	800250e <HAL_SPI_Receive+0x16c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800251a:	e051      	b.n	80025c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1c7      	bne.n	80024b6 <HAL_SPI_Receive+0x114>
 8002526:	e035      	b.n	8002594 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d113      	bne.n	800255e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	b292      	uxth	r2, r2
 8002542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	1c9a      	adds	r2, r3, #2
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800255c:	e015      	b.n	800258a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800255e:	f7fe fe37 	bl	80011d0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d803      	bhi.n	8002576 <HAL_SPI_Receive+0x1d4>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d102      	bne.n	800257c <HAL_SPI_Receive+0x1da>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002588:	e01a      	b.n	80025c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1c9      	bne.n	8002528 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fb57 	bl	8002c4c <SPI_EndRxTransaction>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
 80025b6:	e003      	b.n	80025c0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08c      	sub	sp, #48	; 0x30
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025e0:	2301      	movs	r3, #1
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x26>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e198      	b.n	800292a <HAL_SPI_TransmitReceive+0x358>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002600:	f7fe fde6 	bl	80011d0 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800260c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800261a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800261e:	2b01      	cmp	r3, #1
 8002620:	d00f      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x70>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002628:	d107      	bne.n	800263a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_SPI_TransmitReceive+0x68>
 8002632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002636:	2b04      	cmp	r3, #4
 8002638:	d003      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002640:	e16d      	b.n	800291e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x82>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x82>
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800265a:	e160      	b.n	800291e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b04      	cmp	r3, #4
 8002666:	d003      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2205      	movs	r2, #5
 800266c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	887a      	ldrh	r2, [r7, #2]
 8002686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d007      	beq.n	80026c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026cc:	d17c      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x10a>
 80026d6:	8b7b      	ldrh	r3, [r7, #26]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d16a      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	1c9a      	adds	r2, r3, #2
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002700:	e057      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11b      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x176>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x176>
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d113      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d119      	bne.n	800278a <HAL_SPI_TransmitReceive+0x1b8>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d014      	beq.n	800278a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	b292      	uxth	r2, r2
 800276c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	1c9a      	adds	r2, r3, #2
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002786:	2301      	movs	r3, #1
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800278a:	f7fe fd21 	bl	80011d0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002796:	429a      	cmp	r2, r3
 8002798:	d80b      	bhi.n	80027b2 <HAL_SPI_TransmitReceive+0x1e0>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d007      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80027b0:	e0b5      	b.n	800291e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1a2      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x130>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d19d      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x130>
 80027c6:	e080      	b.n	80028ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0x204>
 80027d0:	8b7b      	ldrh	r3, [r7, #26]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d16f      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027fc:	e05b      	b.n	80028b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b02      	cmp	r3, #2
 800280a:	d11c      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x274>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_SPI_TransmitReceive+0x274>
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d114      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d119      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x2b6>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d014      	beq.n	8002888 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002884:	2301      	movs	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002888:	f7fe fca2 	bl	80011d0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002894:	429a      	cmp	r2, r3
 8002896:	d803      	bhi.n	80028a0 <HAL_SPI_TransmitReceive+0x2ce>
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d102      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x2d4>
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80028b4:	e033      	b.n	800291e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d19e      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x22c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d199      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa0e 	bl	8002cf0 <SPI_EndRxTxTransaction>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028e6:	e01a      	b.n	800291e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002914:	e003      	b.n	800291e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800292a:	4618      	mov	r0, r3
 800292c:	3730      	adds	r7, #48	; 0x30
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10f      	bne.n	8002978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
    return;
 8002976:	e0be      	b.n	8002af6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_SPI_IRQHandler+0x66>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	09db      	lsrs	r3, r3, #7
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
    return;
 8002998:	e0ad      	b.n	8002af6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_SPI_IRQHandler+0x80>
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80a1 	beq.w	8002af6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 809a 	beq.w	8002af6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d011      	beq.n	80029fe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	e00b      	b.n	8002a16 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
        return;
 8002a14:	e06f      	b.n	8002af6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d014      	beq.n	8002a4c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d04f      	beq.n	8002af4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a62:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_SPI_IRQHandler+0x14c>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d034      	beq.n	8002aea <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0203 	bic.w	r2, r2, #3
 8002a8e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_SPI_IRQHandler+0x1c8>)
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fcab 	bl	8001400 <HAL_DMA_Abort_IT>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d016      	beq.n	8002af2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_SPI_IRQHandler+0x1c8>)
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fc95 	bl	8001400 <HAL_DMA_Abort_IT>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ae8:	e003      	b.n	8002af2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f808 	bl	8002b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002af0:	e000      	b.n	8002af4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002af2:	bf00      	nop
    return;
 8002af4:	bf00      	nop
  }
}
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	08002b13 	.word	0x08002b13

08002b00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff ffe7 	bl	8002b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b4c:	f7fe fb40 	bl	80011d0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b5c:	f7fe fb38 	bl	80011d0 <HAL_GetTick>
 8002b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	0d1b      	lsrs	r3, r3, #20
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	e054      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d050      	beq.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b7c:	f7fe fb28 	bl	80011d0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d902      	bls.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13d      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d111      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d004      	beq.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d107      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d10f      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e017      	b.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d19b      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c60:	d111      	bne.n	8002c86 <SPI_EndRxTransaction+0x3a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6a:	d004      	beq.n	8002c76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c74:	d107      	bne.n	8002c86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c84:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8e:	d117      	bne.n	8002cc0 <SPI_EndRxTransaction+0x74>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d112      	bne.n	8002cc0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff ff49 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01a      	beq.n	8002ce6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e013      	b.n	8002ce8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff ff36 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e000      	b.n	8002ce8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff ff18 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e000      	b.n	8002d24 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <__errno>:
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <__errno+0x8>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	2000000c 	.word	0x2000000c

08002d38 <__libc_init_array>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	4d0c      	ldr	r5, [pc, #48]	; (8002d70 <__libc_init_array+0x38>)
 8002d3e:	4c0d      	ldr	r4, [pc, #52]	; (8002d74 <__libc_init_array+0x3c>)
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	42a6      	cmp	r6, r4
 8002d46:	d109      	bne.n	8002d5c <__libc_init_array+0x24>
 8002d48:	f000 ff04 	bl	8003b54 <_init>
 8002d4c:	2600      	movs	r6, #0
 8002d4e:	4d0a      	ldr	r5, [pc, #40]	; (8002d78 <__libc_init_array+0x40>)
 8002d50:	4c0a      	ldr	r4, [pc, #40]	; (8002d7c <__libc_init_array+0x44>)
 8002d52:	1b64      	subs	r4, r4, r5
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	42a6      	cmp	r6, r4
 8002d58:	d105      	bne.n	8002d66 <__libc_init_array+0x2e>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d60:	4798      	blx	r3
 8002d62:	3601      	adds	r6, #1
 8002d64:	e7ee      	b.n	8002d44 <__libc_init_array+0xc>
 8002d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6a:	4798      	blx	r3
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	e7f2      	b.n	8002d56 <__libc_init_array+0x1e>
 8002d70:	08003bd8 	.word	0x08003bd8
 8002d74:	08003bd8 	.word	0x08003bd8
 8002d78:	08003bd8 	.word	0x08003bd8
 8002d7c:	08003bdc 	.word	0x08003bdc

08002d80 <memset>:
 8002d80:	4603      	mov	r3, r0
 8002d82:	4402      	add	r2, r0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <pow>:
 8002d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4680      	mov	r8, r0
 8002d9a:	4689      	mov	r9, r1
 8002d9c:	f000 f860 	bl	8002e60 <__ieee754_pow>
 8002da0:	4622      	mov	r2, r4
 8002da2:	4606      	mov	r6, r0
 8002da4:	460f      	mov	r7, r1
 8002da6:	462b      	mov	r3, r5
 8002da8:	4620      	mov	r0, r4
 8002daa:	4629      	mov	r1, r5
 8002dac:	f7fd fe26 	bl	80009fc <__aeabi_dcmpun>
 8002db0:	bbc8      	cbnz	r0, 8002e26 <pow+0x96>
 8002db2:	2200      	movs	r2, #0
 8002db4:	2300      	movs	r3, #0
 8002db6:	4640      	mov	r0, r8
 8002db8:	4649      	mov	r1, r9
 8002dba:	f7fd fded 	bl	8000998 <__aeabi_dcmpeq>
 8002dbe:	b1b8      	cbz	r0, 8002df0 <pow+0x60>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fde6 	bl	8000998 <__aeabi_dcmpeq>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d141      	bne.n	8002e54 <pow+0xc4>
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f000 fe39 	bl	8003a4a <finite>
 8002dd8:	b328      	cbz	r0, 8002e26 <pow+0x96>
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd fde3 	bl	80009ac <__aeabi_dcmplt>
 8002de6:	b1f0      	cbz	r0, 8002e26 <pow+0x96>
 8002de8:	f7ff ffa0 	bl	8002d2c <__errno>
 8002dec:	2322      	movs	r3, #34	; 0x22
 8002dee:	e019      	b.n	8002e24 <pow+0x94>
 8002df0:	4630      	mov	r0, r6
 8002df2:	4639      	mov	r1, r7
 8002df4:	f000 fe29 	bl	8003a4a <finite>
 8002df8:	b9c8      	cbnz	r0, 8002e2e <pow+0x9e>
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f000 fe24 	bl	8003a4a <finite>
 8002e02:	b1a0      	cbz	r0, 8002e2e <pow+0x9e>
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f000 fe1f 	bl	8003a4a <finite>
 8002e0c:	b178      	cbz	r0, 8002e2e <pow+0x9e>
 8002e0e:	4632      	mov	r2, r6
 8002e10:	463b      	mov	r3, r7
 8002e12:	4630      	mov	r0, r6
 8002e14:	4639      	mov	r1, r7
 8002e16:	f7fd fdf1 	bl	80009fc <__aeabi_dcmpun>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d0e4      	beq.n	8002de8 <pow+0x58>
 8002e1e:	f7ff ff85 	bl	8002d2c <__errno>
 8002e22:	2321      	movs	r3, #33	; 0x21
 8002e24:	6003      	str	r3, [r0, #0]
 8002e26:	4630      	mov	r0, r6
 8002e28:	4639      	mov	r1, r7
 8002e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2300      	movs	r3, #0
 8002e32:	4630      	mov	r0, r6
 8002e34:	4639      	mov	r1, r7
 8002e36:	f7fd fdaf 	bl	8000998 <__aeabi_dcmpeq>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d0f3      	beq.n	8002e26 <pow+0x96>
 8002e3e:	4640      	mov	r0, r8
 8002e40:	4649      	mov	r1, r9
 8002e42:	f000 fe02 	bl	8003a4a <finite>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d0ed      	beq.n	8002e26 <pow+0x96>
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	f000 fdfc 	bl	8003a4a <finite>
 8002e52:	e7c8      	b.n	8002de6 <pow+0x56>
 8002e54:	2600      	movs	r6, #0
 8002e56:	4f01      	ldr	r7, [pc, #4]	; (8002e5c <pow+0xcc>)
 8002e58:	e7e5      	b.n	8002e26 <pow+0x96>
 8002e5a:	bf00      	nop
 8002e5c:	3ff00000 	.word	0x3ff00000

08002e60 <__ieee754_pow>:
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	b093      	sub	sp, #76	; 0x4c
 8002e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e6a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8002e6e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002e72:	4689      	mov	r9, r1
 8002e74:	ea56 0102 	orrs.w	r1, r6, r2
 8002e78:	4680      	mov	r8, r0
 8002e7a:	d111      	bne.n	8002ea0 <__ieee754_pow+0x40>
 8002e7c:	1803      	adds	r3, r0, r0
 8002e7e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002e82:	4152      	adcs	r2, r2
 8002e84:	4299      	cmp	r1, r3
 8002e86:	4b82      	ldr	r3, [pc, #520]	; (8003090 <__ieee754_pow+0x230>)
 8002e88:	4193      	sbcs	r3, r2
 8002e8a:	f080 84b9 	bcs.w	8003800 <__ieee754_pow+0x9a0>
 8002e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e92:	4640      	mov	r0, r8
 8002e94:	4649      	mov	r1, r9
 8002e96:	f7fd f961 	bl	800015c <__adddf3>
 8002e9a:	4683      	mov	fp, r0
 8002e9c:	468c      	mov	ip, r1
 8002e9e:	e06f      	b.n	8002f80 <__ieee754_pow+0x120>
 8002ea0:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <__ieee754_pow+0x234>)
 8002ea2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002ea6:	429c      	cmp	r4, r3
 8002ea8:	464d      	mov	r5, r9
 8002eaa:	4682      	mov	sl, r0
 8002eac:	dc06      	bgt.n	8002ebc <__ieee754_pow+0x5c>
 8002eae:	d101      	bne.n	8002eb4 <__ieee754_pow+0x54>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1ec      	bne.n	8002e8e <__ieee754_pow+0x2e>
 8002eb4:	429e      	cmp	r6, r3
 8002eb6:	dc01      	bgt.n	8002ebc <__ieee754_pow+0x5c>
 8002eb8:	d10f      	bne.n	8002eda <__ieee754_pow+0x7a>
 8002eba:	b172      	cbz	r2, 8002eda <__ieee754_pow+0x7a>
 8002ebc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002ec0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002ec4:	ea55 050a 	orrs.w	r5, r5, sl
 8002ec8:	d1e1      	bne.n	8002e8e <__ieee754_pow+0x2e>
 8002eca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002ed4:	4152      	adcs	r2, r2
 8002ed6:	429d      	cmp	r5, r3
 8002ed8:	e7d5      	b.n	8002e86 <__ieee754_pow+0x26>
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	da39      	bge.n	8002f52 <__ieee754_pow+0xf2>
 8002ede:	4b6e      	ldr	r3, [pc, #440]	; (8003098 <__ieee754_pow+0x238>)
 8002ee0:	429e      	cmp	r6, r3
 8002ee2:	dc52      	bgt.n	8002f8a <__ieee754_pow+0x12a>
 8002ee4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002ee8:	429e      	cmp	r6, r3
 8002eea:	f340 849c 	ble.w	8003826 <__ieee754_pow+0x9c6>
 8002eee:	1533      	asrs	r3, r6, #20
 8002ef0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002ef4:	2b14      	cmp	r3, #20
 8002ef6:	dd0f      	ble.n	8002f18 <__ieee754_pow+0xb8>
 8002ef8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002efc:	fa22 f103 	lsr.w	r1, r2, r3
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f040 848e 	bne.w	8003826 <__ieee754_pow+0x9c6>
 8002f0a:	f001 0101 	and.w	r1, r1, #1
 8002f0e:	f1c1 0302 	rsb	r3, r1, #2
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	b182      	cbz	r2, 8002f38 <__ieee754_pow+0xd8>
 8002f16:	e05d      	b.n	8002fd4 <__ieee754_pow+0x174>
 8002f18:	2a00      	cmp	r2, #0
 8002f1a:	d159      	bne.n	8002fd0 <__ieee754_pow+0x170>
 8002f1c:	f1c3 0314 	rsb	r3, r3, #20
 8002f20:	fa46 f103 	asr.w	r1, r6, r3
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	42b3      	cmp	r3, r6
 8002f2a:	f040 8479 	bne.w	8003820 <__ieee754_pow+0x9c0>
 8002f2e:	f001 0101 	and.w	r1, r1, #1
 8002f32:	f1c1 0302 	rsb	r3, r1, #2
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4b58      	ldr	r3, [pc, #352]	; (800309c <__ieee754_pow+0x23c>)
 8002f3a:	429e      	cmp	r6, r3
 8002f3c:	d132      	bne.n	8002fa4 <__ieee754_pow+0x144>
 8002f3e:	2f00      	cmp	r7, #0
 8002f40:	f280 846a 	bge.w	8003818 <__ieee754_pow+0x9b8>
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	2000      	movs	r0, #0
 8002f4a:	4954      	ldr	r1, [pc, #336]	; (800309c <__ieee754_pow+0x23c>)
 8002f4c:	f7fd fbe6 	bl	800071c <__aeabi_ddiv>
 8002f50:	e7a3      	b.n	8002e9a <__ieee754_pow+0x3a>
 8002f52:	2300      	movs	r3, #0
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d13c      	bne.n	8002fd4 <__ieee754_pow+0x174>
 8002f5a:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <__ieee754_pow+0x234>)
 8002f5c:	429e      	cmp	r6, r3
 8002f5e:	d1eb      	bne.n	8002f38 <__ieee754_pow+0xd8>
 8002f60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002f64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002f68:	ea53 030a 	orrs.w	r3, r3, sl
 8002f6c:	f000 8448 	beq.w	8003800 <__ieee754_pow+0x9a0>
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <__ieee754_pow+0x240>)
 8002f72:	429c      	cmp	r4, r3
 8002f74:	dd0b      	ble.n	8002f8e <__ieee754_pow+0x12e>
 8002f76:	2f00      	cmp	r7, #0
 8002f78:	f2c0 8448 	blt.w	800380c <__ieee754_pow+0x9ac>
 8002f7c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002f80:	4658      	mov	r0, fp
 8002f82:	4661      	mov	r1, ip
 8002f84:	b013      	add	sp, #76	; 0x4c
 8002f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e7e2      	b.n	8002f54 <__ieee754_pow+0xf4>
 8002f8e:	2f00      	cmp	r7, #0
 8002f90:	f04f 0b00 	mov.w	fp, #0
 8002f94:	f04f 0c00 	mov.w	ip, #0
 8002f98:	daf2      	bge.n	8002f80 <__ieee754_pow+0x120>
 8002f9a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002f9e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002fa2:	e7ed      	b.n	8002f80 <__ieee754_pow+0x120>
 8002fa4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002fa8:	d106      	bne.n	8002fb8 <__ieee754_pow+0x158>
 8002faa:	4642      	mov	r2, r8
 8002fac:	464b      	mov	r3, r9
 8002fae:	4640      	mov	r0, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	f7fd fa89 	bl	80004c8 <__aeabi_dmul>
 8002fb6:	e770      	b.n	8002e9a <__ieee754_pow+0x3a>
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <__ieee754_pow+0x244>)
 8002fba:	429f      	cmp	r7, r3
 8002fbc:	d10a      	bne.n	8002fd4 <__ieee754_pow+0x174>
 8002fbe:	2d00      	cmp	r5, #0
 8002fc0:	db08      	blt.n	8002fd4 <__ieee754_pow+0x174>
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	b013      	add	sp, #76	; 0x4c
 8002fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fcc:	f000 bc5e 	b.w	800388c <__ieee754_sqrt>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	f000 fd34 	bl	8003a44 <fabs>
 8002fdc:	4683      	mov	fp, r0
 8002fde:	468c      	mov	ip, r1
 8002fe0:	f1ba 0f00 	cmp.w	sl, #0
 8002fe4:	d128      	bne.n	8003038 <__ieee754_pow+0x1d8>
 8002fe6:	b124      	cbz	r4, 8002ff2 <__ieee754_pow+0x192>
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <__ieee754_pow+0x23c>)
 8002fea:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d122      	bne.n	8003038 <__ieee754_pow+0x1d8>
 8002ff2:	2f00      	cmp	r7, #0
 8002ff4:	da07      	bge.n	8003006 <__ieee754_pow+0x1a6>
 8002ff6:	465a      	mov	r2, fp
 8002ff8:	4663      	mov	r3, ip
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	4927      	ldr	r1, [pc, #156]	; (800309c <__ieee754_pow+0x23c>)
 8002ffe:	f7fd fb8d 	bl	800071c <__aeabi_ddiv>
 8003002:	4683      	mov	fp, r0
 8003004:	468c      	mov	ip, r1
 8003006:	2d00      	cmp	r5, #0
 8003008:	daba      	bge.n	8002f80 <__ieee754_pow+0x120>
 800300a:	9b00      	ldr	r3, [sp, #0]
 800300c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003010:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003014:	4323      	orrs	r3, r4
 8003016:	d108      	bne.n	800302a <__ieee754_pow+0x1ca>
 8003018:	465a      	mov	r2, fp
 800301a:	4663      	mov	r3, ip
 800301c:	4658      	mov	r0, fp
 800301e:	4661      	mov	r1, ip
 8003020:	f7fd f89a 	bl	8000158 <__aeabi_dsub>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	e790      	b.n	8002f4c <__ieee754_pow+0xec>
 800302a:	9b00      	ldr	r3, [sp, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d1a7      	bne.n	8002f80 <__ieee754_pow+0x120>
 8003030:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003034:	469c      	mov	ip, r3
 8003036:	e7a3      	b.n	8002f80 <__ieee754_pow+0x120>
 8003038:	0feb      	lsrs	r3, r5, #31
 800303a:	3b01      	subs	r3, #1
 800303c:	930c      	str	r3, [sp, #48]	; 0x30
 800303e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003040:	9b00      	ldr	r3, [sp, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	d104      	bne.n	8003050 <__ieee754_pow+0x1f0>
 8003046:	4642      	mov	r2, r8
 8003048:	464b      	mov	r3, r9
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	e7e7      	b.n	8003020 <__ieee754_pow+0x1c0>
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <__ieee754_pow+0x248>)
 8003052:	429e      	cmp	r6, r3
 8003054:	f340 80f6 	ble.w	8003244 <__ieee754_pow+0x3e4>
 8003058:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800305c:	429e      	cmp	r6, r3
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <__ieee754_pow+0x240>)
 8003060:	dd09      	ble.n	8003076 <__ieee754_pow+0x216>
 8003062:	429c      	cmp	r4, r3
 8003064:	dc0c      	bgt.n	8003080 <__ieee754_pow+0x220>
 8003066:	2f00      	cmp	r7, #0
 8003068:	da0c      	bge.n	8003084 <__ieee754_pow+0x224>
 800306a:	2000      	movs	r0, #0
 800306c:	b013      	add	sp, #76	; 0x4c
 800306e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003072:	f000 bce2 	b.w	8003a3a <__math_oflow>
 8003076:	429c      	cmp	r4, r3
 8003078:	dbf5      	blt.n	8003066 <__ieee754_pow+0x206>
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <__ieee754_pow+0x23c>)
 800307c:	429c      	cmp	r4, r3
 800307e:	dd15      	ble.n	80030ac <__ieee754_pow+0x24c>
 8003080:	2f00      	cmp	r7, #0
 8003082:	dcf2      	bgt.n	800306a <__ieee754_pow+0x20a>
 8003084:	2000      	movs	r0, #0
 8003086:	b013      	add	sp, #76	; 0x4c
 8003088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	f000 bcd0 	b.w	8003a30 <__math_uflow>
 8003090:	fff00000 	.word	0xfff00000
 8003094:	7ff00000 	.word	0x7ff00000
 8003098:	433fffff 	.word	0x433fffff
 800309c:	3ff00000 	.word	0x3ff00000
 80030a0:	3fefffff 	.word	0x3fefffff
 80030a4:	3fe00000 	.word	0x3fe00000
 80030a8:	41e00000 	.word	0x41e00000
 80030ac:	4661      	mov	r1, ip
 80030ae:	2200      	movs	r2, #0
 80030b0:	4658      	mov	r0, fp
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <__ieee754_pow+0x3d0>)
 80030b4:	f7fd f850 	bl	8000158 <__aeabi_dsub>
 80030b8:	a355      	add	r3, pc, #340	; (adr r3, 8003210 <__ieee754_pow+0x3b0>)
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	4604      	mov	r4, r0
 80030c0:	460d      	mov	r5, r1
 80030c2:	f7fd fa01 	bl	80004c8 <__aeabi_dmul>
 80030c6:	a354      	add	r3, pc, #336	; (adr r3, 8003218 <__ieee754_pow+0x3b8>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	4606      	mov	r6, r0
 80030ce:	460f      	mov	r7, r1
 80030d0:	4620      	mov	r0, r4
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7fd f9f8 	bl	80004c8 <__aeabi_dmul>
 80030d8:	2200      	movs	r2, #0
 80030da:	4682      	mov	sl, r0
 80030dc:	468b      	mov	fp, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	4b54      	ldr	r3, [pc, #336]	; (8003234 <__ieee754_pow+0x3d4>)
 80030e4:	f7fd f9f0 	bl	80004c8 <__aeabi_dmul>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	a14c      	add	r1, pc, #304	; (adr r1, 8003220 <__ieee754_pow+0x3c0>)
 80030ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030f2:	f7fd f831 	bl	8000158 <__aeabi_dsub>
 80030f6:	4622      	mov	r2, r4
 80030f8:	462b      	mov	r3, r5
 80030fa:	f7fd f9e5 	bl	80004c8 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	2000      	movs	r0, #0
 8003104:	494c      	ldr	r1, [pc, #304]	; (8003238 <__ieee754_pow+0x3d8>)
 8003106:	f7fd f827 	bl	8000158 <__aeabi_dsub>
 800310a:	4622      	mov	r2, r4
 800310c:	462b      	mov	r3, r5
 800310e:	4680      	mov	r8, r0
 8003110:	4689      	mov	r9, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f7fd f9d7 	bl	80004c8 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4640      	mov	r0, r8
 8003120:	4649      	mov	r1, r9
 8003122:	f7fd f9d1 	bl	80004c8 <__aeabi_dmul>
 8003126:	a340      	add	r3, pc, #256	; (adr r3, 8003228 <__ieee754_pow+0x3c8>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd f9cc 	bl	80004c8 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4650      	mov	r0, sl
 8003136:	4659      	mov	r1, fp
 8003138:	f7fd f80e 	bl	8000158 <__aeabi_dsub>
 800313c:	f04f 0a00 	mov.w	sl, #0
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4604      	mov	r4, r0
 8003146:	460d      	mov	r5, r1
 8003148:	4630      	mov	r0, r6
 800314a:	4639      	mov	r1, r7
 800314c:	f7fd f806 	bl	800015c <__adddf3>
 8003150:	4632      	mov	r2, r6
 8003152:	463b      	mov	r3, r7
 8003154:	4650      	mov	r0, sl
 8003156:	468b      	mov	fp, r1
 8003158:	f7fc fffe 	bl	8000158 <__aeabi_dsub>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fc fff8 	bl	8000158 <__aeabi_dsub>
 8003168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800316c:	9b00      	ldr	r3, [sp, #0]
 800316e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003170:	3b01      	subs	r3, #1
 8003172:	4313      	orrs	r3, r2
 8003174:	f04f 0600 	mov.w	r6, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	bf0c      	ite	eq
 800317e:	4b2f      	ldreq	r3, [pc, #188]	; (800323c <__ieee754_pow+0x3dc>)
 8003180:	4b2b      	ldrne	r3, [pc, #172]	; (8003230 <__ieee754_pow+0x3d0>)
 8003182:	4604      	mov	r4, r0
 8003184:	460d      	mov	r5, r1
 8003186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800318a:	e9cd 2300 	strd	r2, r3, [sp]
 800318e:	4632      	mov	r2, r6
 8003190:	463b      	mov	r3, r7
 8003192:	f7fc ffe1 	bl	8000158 <__aeabi_dsub>
 8003196:	4652      	mov	r2, sl
 8003198:	465b      	mov	r3, fp
 800319a:	f7fd f995 	bl	80004c8 <__aeabi_dmul>
 800319e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031a2:	4680      	mov	r8, r0
 80031a4:	4689      	mov	r9, r1
 80031a6:	4620      	mov	r0, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	f7fd f98d 	bl	80004c8 <__aeabi_dmul>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4640      	mov	r0, r8
 80031b4:	4649      	mov	r1, r9
 80031b6:	f7fc ffd1 	bl	800015c <__adddf3>
 80031ba:	4632      	mov	r2, r6
 80031bc:	463b      	mov	r3, r7
 80031be:	4680      	mov	r8, r0
 80031c0:	4689      	mov	r9, r1
 80031c2:	4650      	mov	r0, sl
 80031c4:	4659      	mov	r1, fp
 80031c6:	f7fd f97f 	bl	80004c8 <__aeabi_dmul>
 80031ca:	4604      	mov	r4, r0
 80031cc:	460d      	mov	r5, r1
 80031ce:	460b      	mov	r3, r1
 80031d0:	4602      	mov	r2, r0
 80031d2:	4649      	mov	r1, r9
 80031d4:	4640      	mov	r0, r8
 80031d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80031da:	f7fc ffbf 	bl	800015c <__adddf3>
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <__ieee754_pow+0x3e0>)
 80031e0:	4682      	mov	sl, r0
 80031e2:	4299      	cmp	r1, r3
 80031e4:	460f      	mov	r7, r1
 80031e6:	460e      	mov	r6, r1
 80031e8:	f340 82e5 	ble.w	80037b6 <__ieee754_pow+0x956>
 80031ec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80031f0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80031f4:	4303      	orrs	r3, r0
 80031f6:	f000 81df 	beq.w	80035b8 <__ieee754_pow+0x758>
 80031fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031fe:	2200      	movs	r2, #0
 8003200:	2300      	movs	r3, #0
 8003202:	f7fd fbd3 	bl	80009ac <__aeabi_dcmplt>
 8003206:	3800      	subs	r0, #0
 8003208:	bf18      	it	ne
 800320a:	2001      	movne	r0, #1
 800320c:	e72e      	b.n	800306c <__ieee754_pow+0x20c>
 800320e:	bf00      	nop
 8003210:	60000000 	.word	0x60000000
 8003214:	3ff71547 	.word	0x3ff71547
 8003218:	f85ddf44 	.word	0xf85ddf44
 800321c:	3e54ae0b 	.word	0x3e54ae0b
 8003220:	55555555 	.word	0x55555555
 8003224:	3fd55555 	.word	0x3fd55555
 8003228:	652b82fe 	.word	0x652b82fe
 800322c:	3ff71547 	.word	0x3ff71547
 8003230:	3ff00000 	.word	0x3ff00000
 8003234:	3fd00000 	.word	0x3fd00000
 8003238:	3fe00000 	.word	0x3fe00000
 800323c:	bff00000 	.word	0xbff00000
 8003240:	408fffff 	.word	0x408fffff
 8003244:	4bd2      	ldr	r3, [pc, #840]	; (8003590 <__ieee754_pow+0x730>)
 8003246:	2200      	movs	r2, #0
 8003248:	402b      	ands	r3, r5
 800324a:	b943      	cbnz	r3, 800325e <__ieee754_pow+0x3fe>
 800324c:	4658      	mov	r0, fp
 800324e:	4661      	mov	r1, ip
 8003250:	4bd0      	ldr	r3, [pc, #832]	; (8003594 <__ieee754_pow+0x734>)
 8003252:	f7fd f939 	bl	80004c8 <__aeabi_dmul>
 8003256:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800325a:	4683      	mov	fp, r0
 800325c:	460c      	mov	r4, r1
 800325e:	1523      	asrs	r3, r4, #20
 8003260:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003264:	4413      	add	r3, r2
 8003266:	930b      	str	r3, [sp, #44]	; 0x2c
 8003268:	4bcb      	ldr	r3, [pc, #812]	; (8003598 <__ieee754_pow+0x738>)
 800326a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800326e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003272:	429c      	cmp	r4, r3
 8003274:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003278:	dd08      	ble.n	800328c <__ieee754_pow+0x42c>
 800327a:	4bc8      	ldr	r3, [pc, #800]	; (800359c <__ieee754_pow+0x73c>)
 800327c:	429c      	cmp	r4, r3
 800327e:	f340 8199 	ble.w	80035b4 <__ieee754_pow+0x754>
 8003282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003284:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003288:	3301      	adds	r3, #1
 800328a:	930b      	str	r3, [sp, #44]	; 0x2c
 800328c:	2600      	movs	r6, #0
 800328e:	00f3      	lsls	r3, r6, #3
 8003290:	930d      	str	r3, [sp, #52]	; 0x34
 8003292:	4bc3      	ldr	r3, [pc, #780]	; (80035a0 <__ieee754_pow+0x740>)
 8003294:	4658      	mov	r0, fp
 8003296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800329a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800329e:	4629      	mov	r1, r5
 80032a0:	461a      	mov	r2, r3
 80032a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80032a6:	4623      	mov	r3, r4
 80032a8:	f7fc ff56 	bl	8000158 <__aeabi_dsub>
 80032ac:	46da      	mov	sl, fp
 80032ae:	462b      	mov	r3, r5
 80032b0:	4652      	mov	r2, sl
 80032b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80032b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80032ba:	f7fc ff4f 	bl	800015c <__adddf3>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	2000      	movs	r0, #0
 80032c4:	49b7      	ldr	r1, [pc, #732]	; (80035a4 <__ieee754_pow+0x744>)
 80032c6:	f7fd fa29 	bl	800071c <__aeabi_ddiv>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80032d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80032d6:	f7fd f8f7 	bl	80004c8 <__aeabi_dmul>
 80032da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80032e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80032e6:	2300      	movs	r3, #0
 80032e8:	2200      	movs	r2, #0
 80032ea:	46ab      	mov	fp, r5
 80032ec:	106d      	asrs	r5, r5, #1
 80032ee:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80032f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80032fc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003300:	4640      	mov	r0, r8
 8003302:	4649      	mov	r1, r9
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	f7fd f8de 	bl	80004c8 <__aeabi_dmul>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003314:	f7fc ff20 	bl	8000158 <__aeabi_dsub>
 8003318:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800331c:	4606      	mov	r6, r0
 800331e:	460f      	mov	r7, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fc ff18 	bl	8000158 <__aeabi_dsub>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4650      	mov	r0, sl
 800332e:	4659      	mov	r1, fp
 8003330:	f7fc ff12 	bl	8000158 <__aeabi_dsub>
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	f7fd f8c6 	bl	80004c8 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4630      	mov	r0, r6
 8003342:	4639      	mov	r1, r7
 8003344:	f7fc ff08 	bl	8000158 <__aeabi_dsub>
 8003348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800334c:	f7fd f8bc 	bl	80004c8 <__aeabi_dmul>
 8003350:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003354:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd f8b4 	bl	80004c8 <__aeabi_dmul>
 8003360:	a379      	add	r3, pc, #484	; (adr r3, 8003548 <__ieee754_pow+0x6e8>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	4604      	mov	r4, r0
 8003368:	460d      	mov	r5, r1
 800336a:	f7fd f8ad 	bl	80004c8 <__aeabi_dmul>
 800336e:	a378      	add	r3, pc, #480	; (adr r3, 8003550 <__ieee754_pow+0x6f0>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fc fef2 	bl	800015c <__adddf3>
 8003378:	4622      	mov	r2, r4
 800337a:	462b      	mov	r3, r5
 800337c:	f7fd f8a4 	bl	80004c8 <__aeabi_dmul>
 8003380:	a375      	add	r3, pc, #468	; (adr r3, 8003558 <__ieee754_pow+0x6f8>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fc fee9 	bl	800015c <__adddf3>
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f7fd f89b 	bl	80004c8 <__aeabi_dmul>
 8003392:	a373      	add	r3, pc, #460	; (adr r3, 8003560 <__ieee754_pow+0x700>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fc fee0 	bl	800015c <__adddf3>
 800339c:	4622      	mov	r2, r4
 800339e:	462b      	mov	r3, r5
 80033a0:	f7fd f892 	bl	80004c8 <__aeabi_dmul>
 80033a4:	a370      	add	r3, pc, #448	; (adr r3, 8003568 <__ieee754_pow+0x708>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc fed7 	bl	800015c <__adddf3>
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	f7fd f889 	bl	80004c8 <__aeabi_dmul>
 80033b6:	a36e      	add	r3, pc, #440	; (adr r3, 8003570 <__ieee754_pow+0x710>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fc fece 	bl	800015c <__adddf3>
 80033c0:	4622      	mov	r2, r4
 80033c2:	4606      	mov	r6, r0
 80033c4:	460f      	mov	r7, r1
 80033c6:	462b      	mov	r3, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	f7fd f87c 	bl	80004c8 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4630      	mov	r0, r6
 80033d6:	4639      	mov	r1, r7
 80033d8:	f7fd f876 	bl	80004c8 <__aeabi_dmul>
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
 80033e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	f7fc feb8 	bl	800015c <__adddf3>
 80033ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033f0:	f7fd f86a 	bl	80004c8 <__aeabi_dmul>
 80033f4:	4622      	mov	r2, r4
 80033f6:	462b      	mov	r3, r5
 80033f8:	f7fc feb0 	bl	800015c <__adddf3>
 80033fc:	4642      	mov	r2, r8
 80033fe:	4606      	mov	r6, r0
 8003400:	460f      	mov	r7, r1
 8003402:	464b      	mov	r3, r9
 8003404:	4640      	mov	r0, r8
 8003406:	4649      	mov	r1, r9
 8003408:	f7fd f85e 	bl	80004c8 <__aeabi_dmul>
 800340c:	2200      	movs	r2, #0
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <__ieee754_pow+0x748>)
 8003410:	4682      	mov	sl, r0
 8003412:	468b      	mov	fp, r1
 8003414:	f7fc fea2 	bl	800015c <__adddf3>
 8003418:	4632      	mov	r2, r6
 800341a:	463b      	mov	r3, r7
 800341c:	f7fc fe9e 	bl	800015c <__adddf3>
 8003420:	2400      	movs	r4, #0
 8003422:	460d      	mov	r5, r1
 8003424:	4622      	mov	r2, r4
 8003426:	460b      	mov	r3, r1
 8003428:	4640      	mov	r0, r8
 800342a:	4649      	mov	r1, r9
 800342c:	f7fd f84c 	bl	80004c8 <__aeabi_dmul>
 8003430:	2200      	movs	r2, #0
 8003432:	4680      	mov	r8, r0
 8003434:	4689      	mov	r9, r1
 8003436:	4620      	mov	r0, r4
 8003438:	4629      	mov	r1, r5
 800343a:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <__ieee754_pow+0x748>)
 800343c:	f7fc fe8c 	bl	8000158 <__aeabi_dsub>
 8003440:	4652      	mov	r2, sl
 8003442:	465b      	mov	r3, fp
 8003444:	f7fc fe88 	bl	8000158 <__aeabi_dsub>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4630      	mov	r0, r6
 800344e:	4639      	mov	r1, r7
 8003450:	f7fc fe82 	bl	8000158 <__aeabi_dsub>
 8003454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003458:	f7fd f836 	bl	80004c8 <__aeabi_dmul>
 800345c:	4622      	mov	r2, r4
 800345e:	4606      	mov	r6, r0
 8003460:	460f      	mov	r7, r1
 8003462:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003466:	462b      	mov	r3, r5
 8003468:	f7fd f82e 	bl	80004c8 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4630      	mov	r0, r6
 8003472:	4639      	mov	r1, r7
 8003474:	f7fc fe72 	bl	800015c <__adddf3>
 8003478:	2400      	movs	r4, #0
 800347a:	4606      	mov	r6, r0
 800347c:	460f      	mov	r7, r1
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4640      	mov	r0, r8
 8003484:	4649      	mov	r1, r9
 8003486:	f7fc fe69 	bl	800015c <__adddf3>
 800348a:	a33b      	add	r3, pc, #236	; (adr r3, 8003578 <__ieee754_pow+0x718>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	4620      	mov	r0, r4
 8003492:	460d      	mov	r5, r1
 8003494:	f7fd f818 	bl	80004c8 <__aeabi_dmul>
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fc fe58 	bl	8000158 <__aeabi_dsub>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4630      	mov	r0, r6
 80034ae:	4639      	mov	r1, r7
 80034b0:	f7fc fe52 	bl	8000158 <__aeabi_dsub>
 80034b4:	a332      	add	r3, pc, #200	; (adr r3, 8003580 <__ieee754_pow+0x720>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fd f805 	bl	80004c8 <__aeabi_dmul>
 80034be:	a332      	add	r3, pc, #200	; (adr r3, 8003588 <__ieee754_pow+0x728>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	4606      	mov	r6, r0
 80034c6:	460f      	mov	r7, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc fffc 	bl	80004c8 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4630      	mov	r0, r6
 80034d6:	4639      	mov	r1, r7
 80034d8:	f7fc fe40 	bl	800015c <__adddf3>
 80034dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <__ieee754_pow+0x74c>)
 80034e0:	f04f 0a00 	mov.w	sl, #0
 80034e4:	4413      	add	r3, r2
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fc fe37 	bl	800015c <__adddf3>
 80034ee:	4680      	mov	r8, r0
 80034f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80034f2:	4689      	mov	r9, r1
 80034f4:	f7fc ff7e 	bl	80003f4 <__aeabi_i2d>
 80034f8:	4604      	mov	r4, r0
 80034fa:	460d      	mov	r5, r1
 80034fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80034fe:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <__ieee754_pow+0x750>)
 8003500:	4413      	add	r3, r2
 8003502:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003506:	4642      	mov	r2, r8
 8003508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800350c:	464b      	mov	r3, r9
 800350e:	f7fc fe25 	bl	800015c <__adddf3>
 8003512:	4632      	mov	r2, r6
 8003514:	463b      	mov	r3, r7
 8003516:	f7fc fe21 	bl	800015c <__adddf3>
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	f7fc fe1d 	bl	800015c <__adddf3>
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	4650      	mov	r0, sl
 8003528:	468b      	mov	fp, r1
 800352a:	f7fc fe15 	bl	8000158 <__aeabi_dsub>
 800352e:	4632      	mov	r2, r6
 8003530:	463b      	mov	r3, r7
 8003532:	f7fc fe11 	bl	8000158 <__aeabi_dsub>
 8003536:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800353a:	f7fc fe0d 	bl	8000158 <__aeabi_dsub>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4640      	mov	r0, r8
 8003544:	4649      	mov	r1, r9
 8003546:	e60d      	b.n	8003164 <__ieee754_pow+0x304>
 8003548:	4a454eef 	.word	0x4a454eef
 800354c:	3fca7e28 	.word	0x3fca7e28
 8003550:	93c9db65 	.word	0x93c9db65
 8003554:	3fcd864a 	.word	0x3fcd864a
 8003558:	a91d4101 	.word	0xa91d4101
 800355c:	3fd17460 	.word	0x3fd17460
 8003560:	518f264d 	.word	0x518f264d
 8003564:	3fd55555 	.word	0x3fd55555
 8003568:	db6fabff 	.word	0xdb6fabff
 800356c:	3fdb6db6 	.word	0x3fdb6db6
 8003570:	33333303 	.word	0x33333303
 8003574:	3fe33333 	.word	0x3fe33333
 8003578:	e0000000 	.word	0xe0000000
 800357c:	3feec709 	.word	0x3feec709
 8003580:	dc3a03fd 	.word	0xdc3a03fd
 8003584:	3feec709 	.word	0x3feec709
 8003588:	145b01f5 	.word	0x145b01f5
 800358c:	be3e2fe0 	.word	0xbe3e2fe0
 8003590:	7ff00000 	.word	0x7ff00000
 8003594:	43400000 	.word	0x43400000
 8003598:	0003988e 	.word	0x0003988e
 800359c:	000bb679 	.word	0x000bb679
 80035a0:	08003ba8 	.word	0x08003ba8
 80035a4:	3ff00000 	.word	0x3ff00000
 80035a8:	40080000 	.word	0x40080000
 80035ac:	08003bc8 	.word	0x08003bc8
 80035b0:	08003bb8 	.word	0x08003bb8
 80035b4:	2601      	movs	r6, #1
 80035b6:	e66a      	b.n	800328e <__ieee754_pow+0x42e>
 80035b8:	a39d      	add	r3, pc, #628	; (adr r3, 8003830 <__ieee754_pow+0x9d0>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	4640      	mov	r0, r8
 80035c0:	4649      	mov	r1, r9
 80035c2:	f7fc fdcb 	bl	800015c <__adddf3>
 80035c6:	4622      	mov	r2, r4
 80035c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035cc:	462b      	mov	r3, r5
 80035ce:	4650      	mov	r0, sl
 80035d0:	4639      	mov	r1, r7
 80035d2:	f7fc fdc1 	bl	8000158 <__aeabi_dsub>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035de:	f7fd fa03 	bl	80009e8 <__aeabi_dcmpgt>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	f47f ae09 	bne.w	80031fa <__ieee754_pow+0x39a>
 80035e8:	4aa3      	ldr	r2, [pc, #652]	; (8003878 <__ieee754_pow+0xa18>)
 80035ea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f340 8101 	ble.w	80037f6 <__ieee754_pow+0x996>
 80035f4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80035f8:	2000      	movs	r0, #0
 80035fa:	151b      	asrs	r3, r3, #20
 80035fc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003600:	fa4a f303 	asr.w	r3, sl, r3
 8003604:	4433      	add	r3, r6
 8003606:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800360a:	4f9c      	ldr	r7, [pc, #624]	; (800387c <__ieee754_pow+0xa1c>)
 800360c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003610:	4117      	asrs	r7, r2
 8003612:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003616:	ea23 0107 	bic.w	r1, r3, r7
 800361a:	f1c2 0214 	rsb	r2, r2, #20
 800361e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003622:	460b      	mov	r3, r1
 8003624:	fa4a fa02 	asr.w	sl, sl, r2
 8003628:	2e00      	cmp	r6, #0
 800362a:	4602      	mov	r2, r0
 800362c:	4629      	mov	r1, r5
 800362e:	4620      	mov	r0, r4
 8003630:	bfb8      	it	lt
 8003632:	f1ca 0a00 	rsblt	sl, sl, #0
 8003636:	f7fc fd8f 	bl	8000158 <__aeabi_dsub>
 800363a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800363e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003642:	2400      	movs	r4, #0
 8003644:	4642      	mov	r2, r8
 8003646:	464b      	mov	r3, r9
 8003648:	f7fc fd88 	bl	800015c <__adddf3>
 800364c:	a37a      	add	r3, pc, #488	; (adr r3, 8003838 <__ieee754_pow+0x9d8>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	4620      	mov	r0, r4
 8003654:	460d      	mov	r5, r1
 8003656:	f7fc ff37 	bl	80004c8 <__aeabi_dmul>
 800365a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800365e:	4606      	mov	r6, r0
 8003660:	460f      	mov	r7, r1
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fc fd77 	bl	8000158 <__aeabi_dsub>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4640      	mov	r0, r8
 8003670:	4649      	mov	r1, r9
 8003672:	f7fc fd71 	bl	8000158 <__aeabi_dsub>
 8003676:	a372      	add	r3, pc, #456	; (adr r3, 8003840 <__ieee754_pow+0x9e0>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f7fc ff24 	bl	80004c8 <__aeabi_dmul>
 8003680:	a371      	add	r3, pc, #452	; (adr r3, 8003848 <__ieee754_pow+0x9e8>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	4680      	mov	r8, r0
 8003688:	4689      	mov	r9, r1
 800368a:	4620      	mov	r0, r4
 800368c:	4629      	mov	r1, r5
 800368e:	f7fc ff1b 	bl	80004c8 <__aeabi_dmul>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	f7fc fd5f 	bl	800015c <__adddf3>
 800369e:	4604      	mov	r4, r0
 80036a0:	460d      	mov	r5, r1
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4630      	mov	r0, r6
 80036a8:	4639      	mov	r1, r7
 80036aa:	f7fc fd57 	bl	800015c <__adddf3>
 80036ae:	4632      	mov	r2, r6
 80036b0:	463b      	mov	r3, r7
 80036b2:	4680      	mov	r8, r0
 80036b4:	4689      	mov	r9, r1
 80036b6:	f7fc fd4f 	bl	8000158 <__aeabi_dsub>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4620      	mov	r0, r4
 80036c0:	4629      	mov	r1, r5
 80036c2:	f7fc fd49 	bl	8000158 <__aeabi_dsub>
 80036c6:	4642      	mov	r2, r8
 80036c8:	4606      	mov	r6, r0
 80036ca:	460f      	mov	r7, r1
 80036cc:	464b      	mov	r3, r9
 80036ce:	4640      	mov	r0, r8
 80036d0:	4649      	mov	r1, r9
 80036d2:	f7fc fef9 	bl	80004c8 <__aeabi_dmul>
 80036d6:	a35e      	add	r3, pc, #376	; (adr r3, 8003850 <__ieee754_pow+0x9f0>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	4604      	mov	r4, r0
 80036de:	460d      	mov	r5, r1
 80036e0:	f7fc fef2 	bl	80004c8 <__aeabi_dmul>
 80036e4:	a35c      	add	r3, pc, #368	; (adr r3, 8003858 <__ieee754_pow+0x9f8>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc fd35 	bl	8000158 <__aeabi_dsub>
 80036ee:	4622      	mov	r2, r4
 80036f0:	462b      	mov	r3, r5
 80036f2:	f7fc fee9 	bl	80004c8 <__aeabi_dmul>
 80036f6:	a35a      	add	r3, pc, #360	; (adr r3, 8003860 <__ieee754_pow+0xa00>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f7fc fd2e 	bl	800015c <__adddf3>
 8003700:	4622      	mov	r2, r4
 8003702:	462b      	mov	r3, r5
 8003704:	f7fc fee0 	bl	80004c8 <__aeabi_dmul>
 8003708:	a357      	add	r3, pc, #348	; (adr r3, 8003868 <__ieee754_pow+0xa08>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f7fc fd23 	bl	8000158 <__aeabi_dsub>
 8003712:	4622      	mov	r2, r4
 8003714:	462b      	mov	r3, r5
 8003716:	f7fc fed7 	bl	80004c8 <__aeabi_dmul>
 800371a:	a355      	add	r3, pc, #340	; (adr r3, 8003870 <__ieee754_pow+0xa10>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f7fc fd1c 	bl	800015c <__adddf3>
 8003724:	4622      	mov	r2, r4
 8003726:	462b      	mov	r3, r5
 8003728:	f7fc fece 	bl	80004c8 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4640      	mov	r0, r8
 8003732:	4649      	mov	r1, r9
 8003734:	f7fc fd10 	bl	8000158 <__aeabi_dsub>
 8003738:	4604      	mov	r4, r0
 800373a:	460d      	mov	r5, r1
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4640      	mov	r0, r8
 8003742:	4649      	mov	r1, r9
 8003744:	f7fc fec0 	bl	80004c8 <__aeabi_dmul>
 8003748:	2200      	movs	r2, #0
 800374a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800374e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003752:	4620      	mov	r0, r4
 8003754:	4629      	mov	r1, r5
 8003756:	f7fc fcff 	bl	8000158 <__aeabi_dsub>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003762:	f7fc ffdb 	bl	800071c <__aeabi_ddiv>
 8003766:	4632      	mov	r2, r6
 8003768:	4604      	mov	r4, r0
 800376a:	460d      	mov	r5, r1
 800376c:	463b      	mov	r3, r7
 800376e:	4640      	mov	r0, r8
 8003770:	4649      	mov	r1, r9
 8003772:	f7fc fea9 	bl	80004c8 <__aeabi_dmul>
 8003776:	4632      	mov	r2, r6
 8003778:	463b      	mov	r3, r7
 800377a:	f7fc fcef 	bl	800015c <__adddf3>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4620      	mov	r0, r4
 8003784:	4629      	mov	r1, r5
 8003786:	f7fc fce7 	bl	8000158 <__aeabi_dsub>
 800378a:	4642      	mov	r2, r8
 800378c:	464b      	mov	r3, r9
 800378e:	f7fc fce3 	bl	8000158 <__aeabi_dsub>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	2000      	movs	r0, #0
 8003798:	4939      	ldr	r1, [pc, #228]	; (8003880 <__ieee754_pow+0xa20>)
 800379a:	f7fc fcdd 	bl	8000158 <__aeabi_dsub>
 800379e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80037a2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80037a6:	da29      	bge.n	80037fc <__ieee754_pow+0x99c>
 80037a8:	4652      	mov	r2, sl
 80037aa:	f000 f955 	bl	8003a58 <scalbn>
 80037ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037b2:	f7ff bbfe 	b.w	8002fb2 <__ieee754_pow+0x152>
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <__ieee754_pow+0xa24>)
 80037b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80037bc:	429f      	cmp	r7, r3
 80037be:	f77f af13 	ble.w	80035e8 <__ieee754_pow+0x788>
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <__ieee754_pow+0xa28>)
 80037c4:	440b      	add	r3, r1
 80037c6:	4303      	orrs	r3, r0
 80037c8:	d009      	beq.n	80037de <__ieee754_pow+0x97e>
 80037ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037ce:	2200      	movs	r2, #0
 80037d0:	2300      	movs	r3, #0
 80037d2:	f7fd f8eb 	bl	80009ac <__aeabi_dcmplt>
 80037d6:	3800      	subs	r0, #0
 80037d8:	bf18      	it	ne
 80037da:	2001      	movne	r0, #1
 80037dc:	e453      	b.n	8003086 <__ieee754_pow+0x226>
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	f7fc fcb9 	bl	8000158 <__aeabi_dsub>
 80037e6:	4642      	mov	r2, r8
 80037e8:	464b      	mov	r3, r9
 80037ea:	f7fd f8f3 	bl	80009d4 <__aeabi_dcmpge>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	f43f aefa 	beq.w	80035e8 <__ieee754_pow+0x788>
 80037f4:	e7e9      	b.n	80037ca <__ieee754_pow+0x96a>
 80037f6:	f04f 0a00 	mov.w	sl, #0
 80037fa:	e720      	b.n	800363e <__ieee754_pow+0x7de>
 80037fc:	4621      	mov	r1, r4
 80037fe:	e7d6      	b.n	80037ae <__ieee754_pow+0x94e>
 8003800:	f04f 0b00 	mov.w	fp, #0
 8003804:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003880 <__ieee754_pow+0xa20>
 8003808:	f7ff bbba 	b.w	8002f80 <__ieee754_pow+0x120>
 800380c:	f04f 0b00 	mov.w	fp, #0
 8003810:	f04f 0c00 	mov.w	ip, #0
 8003814:	f7ff bbb4 	b.w	8002f80 <__ieee754_pow+0x120>
 8003818:	4640      	mov	r0, r8
 800381a:	4649      	mov	r1, r9
 800381c:	f7ff bb3d 	b.w	8002e9a <__ieee754_pow+0x3a>
 8003820:	9200      	str	r2, [sp, #0]
 8003822:	f7ff bb89 	b.w	8002f38 <__ieee754_pow+0xd8>
 8003826:	2300      	movs	r3, #0
 8003828:	f7ff bb73 	b.w	8002f12 <__ieee754_pow+0xb2>
 800382c:	f3af 8000 	nop.w
 8003830:	652b82fe 	.word	0x652b82fe
 8003834:	3c971547 	.word	0x3c971547
 8003838:	00000000 	.word	0x00000000
 800383c:	3fe62e43 	.word	0x3fe62e43
 8003840:	fefa39ef 	.word	0xfefa39ef
 8003844:	3fe62e42 	.word	0x3fe62e42
 8003848:	0ca86c39 	.word	0x0ca86c39
 800384c:	be205c61 	.word	0xbe205c61
 8003850:	72bea4d0 	.word	0x72bea4d0
 8003854:	3e663769 	.word	0x3e663769
 8003858:	c5d26bf1 	.word	0xc5d26bf1
 800385c:	3ebbbd41 	.word	0x3ebbbd41
 8003860:	af25de2c 	.word	0xaf25de2c
 8003864:	3f11566a 	.word	0x3f11566a
 8003868:	16bebd93 	.word	0x16bebd93
 800386c:	3f66c16c 	.word	0x3f66c16c
 8003870:	5555553e 	.word	0x5555553e
 8003874:	3fc55555 	.word	0x3fc55555
 8003878:	3fe00000 	.word	0x3fe00000
 800387c:	000fffff 	.word	0x000fffff
 8003880:	3ff00000 	.word	0x3ff00000
 8003884:	4090cbff 	.word	0x4090cbff
 8003888:	3f6f3400 	.word	0x3f6f3400

0800388c <__ieee754_sqrt>:
 800388c:	f8df c158 	ldr.w	ip, [pc, #344]	; 80039e8 <__ieee754_sqrt+0x15c>
 8003890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003894:	ea3c 0c01 	bics.w	ip, ip, r1
 8003898:	4606      	mov	r6, r0
 800389a:	460d      	mov	r5, r1
 800389c:	460c      	mov	r4, r1
 800389e:	460a      	mov	r2, r1
 80038a0:	4607      	mov	r7, r0
 80038a2:	4603      	mov	r3, r0
 80038a4:	d10f      	bne.n	80038c6 <__ieee754_sqrt+0x3a>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	f7fc fe0d 	bl	80004c8 <__aeabi_dmul>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4630      	mov	r0, r6
 80038b4:	4629      	mov	r1, r5
 80038b6:	f7fc fc51 	bl	800015c <__adddf3>
 80038ba:	4606      	mov	r6, r0
 80038bc:	460d      	mov	r5, r1
 80038be:	4630      	mov	r0, r6
 80038c0:	4629      	mov	r1, r5
 80038c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c6:	2900      	cmp	r1, #0
 80038c8:	dc0e      	bgt.n	80038e8 <__ieee754_sqrt+0x5c>
 80038ca:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80038ce:	ea5c 0707 	orrs.w	r7, ip, r7
 80038d2:	d0f4      	beq.n	80038be <__ieee754_sqrt+0x32>
 80038d4:	b141      	cbz	r1, 80038e8 <__ieee754_sqrt+0x5c>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	f7fc fc3d 	bl	8000158 <__aeabi_dsub>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	f7fc ff1b 	bl	800071c <__aeabi_ddiv>
 80038e6:	e7e8      	b.n	80038ba <__ieee754_sqrt+0x2e>
 80038e8:	1521      	asrs	r1, r4, #20
 80038ea:	d075      	beq.n	80039d8 <__ieee754_sqrt+0x14c>
 80038ec:	07cc      	lsls	r4, r1, #31
 80038ee:	f04f 0400 	mov.w	r4, #0
 80038f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80038f6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80038fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038fe:	bf5e      	ittt	pl
 8003900:	0fd9      	lsrpl	r1, r3, #31
 8003902:	005b      	lslpl	r3, r3, #1
 8003904:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8003908:	0fd9      	lsrs	r1, r3, #31
 800390a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800390e:	2516      	movs	r5, #22
 8003910:	4620      	mov	r0, r4
 8003912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003916:	107f      	asrs	r7, r7, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	1846      	adds	r6, r0, r1
 800391c:	4296      	cmp	r6, r2
 800391e:	bfde      	ittt	le
 8003920:	1b92      	suble	r2, r2, r6
 8003922:	1870      	addle	r0, r6, r1
 8003924:	1864      	addle	r4, r4, r1
 8003926:	0052      	lsls	r2, r2, #1
 8003928:	3d01      	subs	r5, #1
 800392a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800392e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003932:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003936:	d1f0      	bne.n	800391a <__ieee754_sqrt+0x8e>
 8003938:	4629      	mov	r1, r5
 800393a:	f04f 0e20 	mov.w	lr, #32
 800393e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003942:	4282      	cmp	r2, r0
 8003944:	eb06 0c05 	add.w	ip, r6, r5
 8003948:	dc02      	bgt.n	8003950 <__ieee754_sqrt+0xc4>
 800394a:	d113      	bne.n	8003974 <__ieee754_sqrt+0xe8>
 800394c:	459c      	cmp	ip, r3
 800394e:	d811      	bhi.n	8003974 <__ieee754_sqrt+0xe8>
 8003950:	f1bc 0f00 	cmp.w	ip, #0
 8003954:	eb0c 0506 	add.w	r5, ip, r6
 8003958:	da43      	bge.n	80039e2 <__ieee754_sqrt+0x156>
 800395a:	2d00      	cmp	r5, #0
 800395c:	db41      	blt.n	80039e2 <__ieee754_sqrt+0x156>
 800395e:	f100 0801 	add.w	r8, r0, #1
 8003962:	1a12      	subs	r2, r2, r0
 8003964:	4640      	mov	r0, r8
 8003966:	459c      	cmp	ip, r3
 8003968:	bf88      	it	hi
 800396a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800396e:	eba3 030c 	sub.w	r3, r3, ip
 8003972:	4431      	add	r1, r6
 8003974:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003978:	f1be 0e01 	subs.w	lr, lr, #1
 800397c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003984:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003988:	d1db      	bne.n	8003942 <__ieee754_sqrt+0xb6>
 800398a:	4313      	orrs	r3, r2
 800398c:	d006      	beq.n	800399c <__ieee754_sqrt+0x110>
 800398e:	1c48      	adds	r0, r1, #1
 8003990:	bf0b      	itete	eq
 8003992:	4671      	moveq	r1, lr
 8003994:	3101      	addne	r1, #1
 8003996:	3401      	addeq	r4, #1
 8003998:	f021 0101 	bicne.w	r1, r1, #1
 800399c:	1063      	asrs	r3, r4, #1
 800399e:	0849      	lsrs	r1, r1, #1
 80039a0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80039a4:	07e2      	lsls	r2, r4, #31
 80039a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80039aa:	bf48      	it	mi
 80039ac:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80039b0:	460e      	mov	r6, r1
 80039b2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80039b6:	e782      	b.n	80038be <__ieee754_sqrt+0x32>
 80039b8:	0ada      	lsrs	r2, r3, #11
 80039ba:	3815      	subs	r0, #21
 80039bc:	055b      	lsls	r3, r3, #21
 80039be:	2a00      	cmp	r2, #0
 80039c0:	d0fa      	beq.n	80039b8 <__ieee754_sqrt+0x12c>
 80039c2:	02d5      	lsls	r5, r2, #11
 80039c4:	d50a      	bpl.n	80039dc <__ieee754_sqrt+0x150>
 80039c6:	f1c1 0420 	rsb	r4, r1, #32
 80039ca:	fa23 f404 	lsr.w	r4, r3, r4
 80039ce:	1e4d      	subs	r5, r1, #1
 80039d0:	408b      	lsls	r3, r1
 80039d2:	4322      	orrs	r2, r4
 80039d4:	1b41      	subs	r1, r0, r5
 80039d6:	e789      	b.n	80038ec <__ieee754_sqrt+0x60>
 80039d8:	4608      	mov	r0, r1
 80039da:	e7f0      	b.n	80039be <__ieee754_sqrt+0x132>
 80039dc:	0052      	lsls	r2, r2, #1
 80039de:	3101      	adds	r1, #1
 80039e0:	e7ef      	b.n	80039c2 <__ieee754_sqrt+0x136>
 80039e2:	4680      	mov	r8, r0
 80039e4:	e7bd      	b.n	8003962 <__ieee754_sqrt+0xd6>
 80039e6:	bf00      	nop
 80039e8:	7ff00000 	.word	0x7ff00000

080039ec <with_errno>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	4604      	mov	r4, r0
 80039f0:	460d      	mov	r5, r1
 80039f2:	4616      	mov	r6, r2
 80039f4:	f7ff f99a 	bl	8002d2c <__errno>
 80039f8:	4629      	mov	r1, r5
 80039fa:	6006      	str	r6, [r0, #0]
 80039fc:	4620      	mov	r0, r4
 80039fe:	bd70      	pop	{r4, r5, r6, pc}

08003a00 <xflow>:
 8003a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a02:	4615      	mov	r5, r2
 8003a04:	461c      	mov	r4, r3
 8003a06:	b180      	cbz	r0, 8003a2a <xflow+0x2a>
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a16:	4628      	mov	r0, r5
 8003a18:	4621      	mov	r1, r4
 8003a1a:	f7fc fd55 	bl	80004c8 <__aeabi_dmul>
 8003a1e:	2222      	movs	r2, #34	; 0x22
 8003a20:	b003      	add	sp, #12
 8003a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a26:	f7ff bfe1 	b.w	80039ec <with_errno>
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	e7ee      	b.n	8003a0e <xflow+0xe>

08003a30 <__math_uflow>:
 8003a30:	2200      	movs	r2, #0
 8003a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a36:	f7ff bfe3 	b.w	8003a00 <xflow>

08003a3a <__math_oflow>:
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003a40:	f7ff bfde 	b.w	8003a00 <xflow>

08003a44 <fabs>:
 8003a44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003a48:	4770      	bx	lr

08003a4a <finite>:
 8003a4a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003a4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003a52:	0fc0      	lsrs	r0, r0, #31
 8003a54:	4770      	bx	lr
	...

08003a58 <scalbn>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003a5e:	4604      	mov	r4, r0
 8003a60:	460d      	mov	r5, r1
 8003a62:	4617      	mov	r7, r2
 8003a64:	460b      	mov	r3, r1
 8003a66:	b996      	cbnz	r6, 8003a8e <scalbn+0x36>
 8003a68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a6c:	4303      	orrs	r3, r0
 8003a6e:	d039      	beq.n	8003ae4 <scalbn+0x8c>
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <scalbn+0xe8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	f7fc fd28 	bl	80004c8 <__aeabi_dmul>
 8003a78:	4b32      	ldr	r3, [pc, #200]	; (8003b44 <scalbn+0xec>)
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	429f      	cmp	r7, r3
 8003a7e:	460d      	mov	r5, r1
 8003a80:	da0f      	bge.n	8003aa2 <scalbn+0x4a>
 8003a82:	a32b      	add	r3, pc, #172	; (adr r3, 8003b30 <scalbn+0xd8>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc fd1e 	bl	80004c8 <__aeabi_dmul>
 8003a8c:	e006      	b.n	8003a9c <scalbn+0x44>
 8003a8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003a92:	4296      	cmp	r6, r2
 8003a94:	d10a      	bne.n	8003aac <scalbn+0x54>
 8003a96:	4602      	mov	r2, r0
 8003a98:	f7fc fb60 	bl	800015c <__adddf3>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	e020      	b.n	8003ae4 <scalbn+0x8c>
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003aa8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003aac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003ab0:	19b9      	adds	r1, r7, r6
 8003ab2:	4291      	cmp	r1, r2
 8003ab4:	dd0e      	ble.n	8003ad4 <scalbn+0x7c>
 8003ab6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003aba:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003abe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003ac2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003ac6:	4820      	ldr	r0, [pc, #128]	; (8003b48 <scalbn+0xf0>)
 8003ac8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003acc:	a31a      	add	r3, pc, #104	; (adr r3, 8003b38 <scalbn+0xe0>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	e7d9      	b.n	8003a88 <scalbn+0x30>
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	dd08      	ble.n	8003aea <scalbn+0x92>
 8003ad8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003adc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ae0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003aee:	da12      	bge.n	8003b16 <scalbn+0xbe>
 8003af0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003af4:	429f      	cmp	r7, r3
 8003af6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003afa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8003afe:	dcdc      	bgt.n	8003aba <scalbn+0x62>
 8003b00:	a30b      	add	r3, pc, #44	; (adr r3, 8003b30 <scalbn+0xd8>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8003b0a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8003b0e:	480f      	ldr	r0, [pc, #60]	; (8003b4c <scalbn+0xf4>)
 8003b10:	f041 011f 	orr.w	r1, r1, #31
 8003b14:	e7b8      	b.n	8003a88 <scalbn+0x30>
 8003b16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b1a:	3136      	adds	r1, #54	; 0x36
 8003b1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b20:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003b24:	4620      	mov	r0, r4
 8003b26:	4629      	mov	r1, r5
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <scalbn+0xf8>)
 8003b2c:	e7ac      	b.n	8003a88 <scalbn+0x30>
 8003b2e:	bf00      	nop
 8003b30:	c2f8f359 	.word	0xc2f8f359
 8003b34:	01a56e1f 	.word	0x01a56e1f
 8003b38:	8800759c 	.word	0x8800759c
 8003b3c:	7e37e43c 	.word	0x7e37e43c
 8003b40:	43500000 	.word	0x43500000
 8003b44:	ffff3cb0 	.word	0xffff3cb0
 8003b48:	8800759c 	.word	0x8800759c
 8003b4c:	c2f8f359 	.word	0xc2f8f359
 8003b50:	3c900000 	.word	0x3c900000

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
