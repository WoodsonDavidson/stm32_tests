
tft_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b50  08002b50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b58  08002b58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e84  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001589  00000000  00000000  00026ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  00028450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000600  00000000  00000000  00028af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f375  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000077b0  00000000  00000000  0004846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be161  00000000  00000000  0004fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010dd7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a28  00000000  00000000  0010ddd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b20 	.word	0x08002b20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b20 	.word	0x08002b20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	f5ad 4d9c 	sub.w	sp, sp, #19968	; 0x4e00
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fd5b 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f8bd 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f97b 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f959 	bl	8000798 <MX_DMA_Init>
  MX_SPI1_Init();
 80004e6:	f000 f921 	bl	800072c <MX_SPI1_Init>
//  uint16_t i;
//
//  for(i = 0; i < 25600; i = i+1){
//	image_data[i] = i;
//  }
HAL_Delay(10);
 80004ea:	200a      	movs	r0, #10
 80004ec:	f000 fdc2 	bl	8001074 <HAL_Delay>
  init_tft();
 80004f0:	f000 f9b4 	bl	800085c <init_tft>

  //HAL_Delay(100);

  send_coordinates(0, 320, 0, 100);
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fa53 	bl	80009a8 <send_coordinates>
  fill_by_color(0xf800, 320*100);	//102 ok but 103 too much for second value
 8000502:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000506:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800050a:	f000 fb5f 	bl	8000bcc <fill_by_color>



  send_coordinates(0, 320, 100, 200);
 800050e:	23c8      	movs	r3, #200	; 0xc8
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000516:	2000      	movs	r0, #0
 8000518:	f000 fa46 	bl	80009a8 <send_coordinates>
  fill_by_color(0xef01, 320*100);	//102 ok but 103 too much for second value
 800051c:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000520:	f64e 7001 	movw	r0, #61185	; 0xef01
 8000524:	f000 fb52 	bl	8000bcc <fill_by_color>



  send_coordinates(0, 320, 200, 300);
 8000528:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800052c:	22c8      	movs	r2, #200	; 0xc8
 800052e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fa38 	bl	80009a8 <send_coordinates>
  fill_by_color(0xff80, 320*100);	//102 ok but 103 too much for second value
 8000538:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 800053c:	f64f 7080 	movw	r0, #65408	; 0xff80
 8000540:	f000 fb44 	bl	8000bcc <fill_by_color>



  send_coordinates(0, 320, 300, 400);
 8000544:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000548:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800054c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fa29 	bl	80009a8 <send_coordinates>
  fill_by_color(0x6789, 320*100);	//102 ok but 103 too much for second value
 8000556:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 800055a:	f246 7089 	movw	r0, #26505	; 0x6789
 800055e:	f000 fb35 	bl	8000bcc <fill_by_color>


  send_coordinates(0, 320, 400, 480);
 8000562:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000566:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800056a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fa1a 	bl	80009a8 <send_coordinates>
  fill_by_color(0x001f, 320*80);	//102 ok but 103 too much for second value
 8000574:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8000578:	201f      	movs	r0, #31
 800057a:	f000 fb27 	bl	8000bcc <fill_by_color>




  send_coordinates(120, 220, 190, 290);
 800057e:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000582:	22be      	movs	r2, #190	; 0xbe
 8000584:	21dc      	movs	r1, #220	; 0xdc
 8000586:	2078      	movs	r0, #120	; 0x78
 8000588:	f000 fa0e 	bl	80009a8 <send_coordinates>
  uint8_t test_data[20000];
  uint16_t i;
  for(i = 0; i < 10000; i = i+1){
 800058c:	2300      	movs	r3, #0
 800058e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000592:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8000596:	8013      	strh	r3, [r2, #0]
 8000598:	e01a      	b.n	80005d0 <main+0x104>
	  test_data[i] = i;
 800059a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 800059e:	f103 0326 	add.w	r3, r3, #38	; 0x26
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80005a8:	f102 0226 	add.w	r2, r2, #38	; 0x26
 80005ac:	8812      	ldrh	r2, [r2, #0]
 80005ae:	b2d1      	uxtb	r1, r2
 80005b0:	f607 6228 	addw	r2, r7, #3624	; 0xe28
 80005b4:	f6a2 6224 	subw	r2, r2, #3620	; 0xe24
 80005b8:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 10000; i = i+1){
 80005ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80005be:	f103 0326 	add.w	r3, r3, #38	; 0x26
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80005ca:	f102 0226 	add.w	r2, r2, #38	; 0x26
 80005ce:	8013      	strh	r3, [r2, #0]
 80005d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80005d4:	f103 0326 	add.w	r3, r3, #38	; 0x26
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	f242 720f 	movw	r2, #9999	; 0x270f
 80005de:	4293      	cmp	r3, r2
 80005e0:	d9db      	bls.n	800059a <main+0xce>
  }
  for(i = 10000; i < 20000; i = i+1){
 80005e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80005e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80005ea:	f102 0226 	add.w	r2, r2, #38	; 0x26
 80005ee:	8013      	strh	r3, [r2, #0]
 80005f0:	e01f      	b.n	8000632 <main+0x166>
	  test_data[i] = i*20;
 80005f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80005f6:	f103 0326 	add.w	r3, r3, #38	; 0x26
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000602:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	4611      	mov	r1, r2
 800060a:	0089      	lsls	r1, r1, #2
 800060c:	440a      	add	r2, r1
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	f607 6228 	addw	r2, r7, #3624	; 0xe28
 8000616:	f6a2 6224 	subw	r2, r2, #3620	; 0xe24
 800061a:	54d1      	strb	r1, [r2, r3]
  for(i = 10000; i < 20000; i = i+1){
 800061c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000620:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 800062c:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8000630:	8013      	strh	r3, [r2, #0]
 8000632:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000636:	f103 0326 	add.w	r3, r3, #38	; 0x26
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000640:	4293      	cmp	r3, r2
 8000642:	d9d6      	bls.n	80005f2 <main+0x126>
  }
  fill_by_data(&test_data[0], 20000);
 8000644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000648:	3b24      	subs	r3, #36	; 0x24
 800064a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fb48 	bl	8000ce4 <fill_by_data>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x188>
	...

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fa52 	bl	8002b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006cc:	23c0      	movs	r3, #192	; 0xc0
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fb25 	bl	8001d2c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fb3a 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fd86 	bl	800221c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 fb23 	bl	8000d60 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f001 fef9 	bl	8002574 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 faea 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000028 	.word	0x20000028
 8000794:	40013000 	.word	0x40013000

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	203b      	movs	r0, #59	; 0x3b
 80007c0:	f000 fd57 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007c4:	203b      	movs	r0, #59	; 0x3b
 80007c6:	f000 fd70 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_GPIO_Init+0x7c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_GPIO_Init+0x7c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_GPIO_Init+0x7c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_GPIO_Init+0x7c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <MX_GPIO_Init+0x7c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_GPIO_Init+0x7c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin|RESET_Pin|CS_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	211c      	movs	r1, #28
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0x80>)
 800082c:	f001 fa64 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DC_RS_Pin RESET_Pin CS_Pin */
  GPIO_InitStruct.Pin = DC_RS_Pin|RESET_Pin|CS_Pin;
 8000830:	231c      	movs	r3, #28
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0x80>)
 8000848:	f001 f8ba 	bl	80019c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000

0800085c <init_tft>:

/* USER CODE BEGIN 4 */
//функция делает первую настройку
void init_tft(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	  uint8_t slpout_cmd = 0x11;
 8000862:	2311      	movs	r3, #17
 8000864:	71fb      	strb	r3, [r7, #7]
	  uint8_t noron_cmd = 0x13;
 8000866:	2313      	movs	r3, #19
 8000868:	71bb      	strb	r3, [r7, #6]
	  uint8_t dispon_cmd = 0x29;
 800086a:	2329      	movs	r3, #41	; 0x29
 800086c:	717b      	strb	r3, [r7, #5]
	  uint8_t interf_pix_format_cmd = 0x3a;
 800086e:	233a      	movs	r3, #58	; 0x3a
 8000870:	713b      	strb	r3, [r7, #4]
	  uint8_t interf_pix_format_prm = 0b01010101;
 8000872:	2355      	movs	r3, #85	; 0x55
 8000874:	70fb      	strb	r3, [r7, #3]


	  HAL_GPIO_WritePin(GPIOA, RESET_Pin, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	4838      	ldr	r0, [pc, #224]	; (800095c <init_tft+0x100>)
 800087c:	f001 fa3c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, RESET_Pin, 1);
 8000880:	2201      	movs	r2, #1
 8000882:	2108      	movs	r1, #8
 8000884:	4835      	ldr	r0, [pc, #212]	; (800095c <init_tft+0x100>)
 8000886:	f001 fa37 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	4833      	ldr	r0, [pc, #204]	; (800095c <init_tft+0x100>)
 8000890:	f001 fa32 	bl	8001cf8 <HAL_GPIO_WritePin>

	  //вышел из сна
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2110      	movs	r1, #16
 8000898:	4830      	ldr	r0, [pc, #192]	; (800095c <init_tft+0x100>)
 800089a:	f001 fa2d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &slpout_cmd, 1);
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	482e      	ldr	r0, [pc, #184]	; (8000960 <init_tft+0x104>)
 80008a6:	f001 feef 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2110      	movs	r1, #16
 80008ae:	482b      	ldr	r0, [pc, #172]	; (800095c <init_tft+0x100>)
 80008b0:	f001 fa22 	bl	8001cf8 <HAL_GPIO_WritePin>
	  //

	  //вкл нормальный режим
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2110      	movs	r1, #16
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <init_tft+0x100>)
 80008ba:	f001 fa1d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &noron_cmd, 1);
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	2201      	movs	r2, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	4826      	ldr	r0, [pc, #152]	; (8000960 <init_tft+0x104>)
 80008c6:	f001 fedf 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2110      	movs	r1, #16
 80008ce:	4823      	ldr	r0, [pc, #140]	; (800095c <init_tft+0x100>)
 80008d0:	f001 fa12 	bl	8001cf8 <HAL_GPIO_WritePin>




	  //установить параметр пикселя
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2104      	movs	r1, #4
 80008d8:	4820      	ldr	r0, [pc, #128]	; (800095c <init_tft+0x100>)
 80008da:	f001 fa0d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2110      	movs	r1, #16
 80008e2:	481e      	ldr	r0, [pc, #120]	; (800095c <init_tft+0x100>)
 80008e4:	f001 fa08 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &interf_pix_format_cmd, 1);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <init_tft+0x104>)
 80008f0:	f001 feca 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <init_tft+0x100>)
 80008fa:	f001 f9fd 	bl	8001cf8 <HAL_GPIO_WritePin>
	  //
	  //параметры (16 бит 565)
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	2104      	movs	r1, #4
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <init_tft+0x100>)
 8000904:	f001 f9f8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2110      	movs	r1, #16
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <init_tft+0x100>)
 800090e:	f001 f9f3 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &interf_pix_format_prm, 1);
 8000912:	1cfb      	adds	r3, r7, #3
 8000914:	2201      	movs	r2, #1
 8000916:	4619      	mov	r1, r3
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <init_tft+0x104>)
 800091a:	f001 feb5 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	2110      	movs	r1, #16
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <init_tft+0x100>)
 8000924:	f001 f9e8 	bl	8001cf8 <HAL_GPIO_WritePin>




	  //вкл дисплей
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2104      	movs	r1, #4
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <init_tft+0x100>)
 800092e:	f001 f9e3 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <init_tft+0x100>)
 8000938:	f001 f9de 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &dispon_cmd, 1);
 800093c:	1d7b      	adds	r3, r7, #5
 800093e:	2201      	movs	r2, #1
 8000940:	4619      	mov	r1, r3
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <init_tft+0x104>)
 8000944:	f001 fea0 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2110      	movs	r1, #16
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <init_tft+0x100>)
 800094e:	f001 f9d3 	bl	8001cf8 <HAL_GPIO_WritePin>
	  //
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020000 	.word	0x40020000
 8000960:	20000028 	.word	0x20000028

08000964 <coord_to_MSByte_LSByte>:
//каждый из этих параметров передается двумя 8битными числами
//и если координата больше 255, то появляется старший разряд
//этот разряд помещается в MSB, а в LSB помещается остаток
//****************************************************************************
//данная функция преобразует 16 битное число в 2 восьмибитных
void coord_to_MSByte_LSByte(uint16_t *dec, uint8_t *MSB, uint8_t *LSB){
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	if(*dec < 256){
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	2bff      	cmp	r3, #255	; 0xff
 8000976:	d808      	bhi.n	800098a <coord_to_MSByte_LSByte+0x26>
		*MSB = 0;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
		*LSB = *dec;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	701a      	strb	r2, [r3, #0]
	}else{
		*MSB = 1;
		*LSB = *dec - 256;
	}
}
 8000988:	e007      	b.n	800099a <coord_to_MSByte_LSByte+0x36>
		*MSB = 1;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
		*LSB = *dec - 256;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <send_coordinates>:





void send_coordinates(uint16_t XS_dec, uint16_t XE_dec, uint16_t YS_dec, uint16_t YE_dec){
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	80fb      	strh	r3, [r7, #6]
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	803b      	strh	r3, [r7, #0]
	  uint8_t column_set_cmd = 0x2a;
 80009c6:	232a      	movs	r3, #42	; 0x2a
 80009c8:	75fb      	strb	r3, [r7, #23]
	  uint8_t raw_set_cmd = 0x2b;
 80009ca:	232b      	movs	r3, #43	; 0x2b
 80009cc:	75bb      	strb	r3, [r7, #22]
	  uint8_t XS_MSB, XS_LSB,
	  	  	  XE_MSB, XE_LSB,
			  YS_MSB, YS_LSB,
			  YE_MSB, YE_LSB;

	  coord_to_MSByte_LSByte(&XS_dec, &XS_MSB, &XS_LSB);
 80009ce:	f107 0214 	add.w	r2, r7, #20
 80009d2:	f107 0115 	add.w	r1, r7, #21
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffc3 	bl	8000964 <coord_to_MSByte_LSByte>
	  coord_to_MSByte_LSByte(&XE_dec, &XE_MSB, &XE_LSB);
 80009de:	f107 0212 	add.w	r2, r7, #18
 80009e2:	f107 0113 	add.w	r1, r7, #19
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffbb 	bl	8000964 <coord_to_MSByte_LSByte>
	  coord_to_MSByte_LSByte(&YS_dec, &YS_MSB, &YS_LSB);
 80009ee:	f107 0210 	add.w	r2, r7, #16
 80009f2:	f107 0111 	add.w	r1, r7, #17
 80009f6:	1cbb      	adds	r3, r7, #2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ffb3 	bl	8000964 <coord_to_MSByte_LSByte>
	  coord_to_MSByte_LSByte(&YE_dec, &YE_MSB, &YE_LSB);
 80009fe:	f107 020e 	add.w	r2, r7, #14
 8000a02:	f107 010f 	add.w	r1, r7, #15
 8000a06:	463b      	mov	r3, r7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ffab 	bl	8000964 <coord_to_MSByte_LSByte>



	  //установить столбец
	  	HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2104      	movs	r1, #4
 8000a12:	4860      	ldr	r0, [pc, #384]	; (8000b94 <send_coordinates+0x1ec>)
 8000a14:	f001 f970 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	485d      	ldr	r0, [pc, #372]	; (8000b94 <send_coordinates+0x1ec>)
 8000a1e:	f001 f96b 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &column_set_cmd, 1);
 8000a22:	f107 0317 	add.w	r3, r7, #23
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	485b      	ldr	r0, [pc, #364]	; (8000b98 <send_coordinates+0x1f0>)
 8000a2c:	f001 fe2c 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2110      	movs	r1, #16
 8000a34:	4857      	ldr	r0, [pc, #348]	; (8000b94 <send_coordinates+0x1ec>)
 8000a36:	f001 f95f 	bl	8001cf8 <HAL_GPIO_WritePin>
	    //
	    //parameters
	    HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4855      	ldr	r0, [pc, #340]	; (8000b94 <send_coordinates+0x1ec>)
 8000a40:	f001 f95a 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2110      	movs	r1, #16
 8000a48:	4852      	ldr	r0, [pc, #328]	; (8000b94 <send_coordinates+0x1ec>)
 8000a4a:	f001 f955 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &XS_MSB, 1);
 8000a4e:	f107 0315 	add.w	r3, r7, #21
 8000a52:	2201      	movs	r2, #1
 8000a54:	4619      	mov	r1, r3
 8000a56:	4850      	ldr	r0, [pc, #320]	; (8000b98 <send_coordinates+0x1f0>)
 8000a58:	f001 fe16 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	484c      	ldr	r0, [pc, #304]	; (8000b94 <send_coordinates+0x1ec>)
 8000a62:	f001 f949 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	484a      	ldr	r0, [pc, #296]	; (8000b94 <send_coordinates+0x1ec>)
 8000a6c:	f001 f944 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &XS_LSB, 1);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2201      	movs	r2, #1
 8000a76:	4619      	mov	r1, r3
 8000a78:	4847      	ldr	r0, [pc, #284]	; (8000b98 <send_coordinates+0x1f0>)
 8000a7a:	f001 fe05 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2110      	movs	r1, #16
 8000a82:	4844      	ldr	r0, [pc, #272]	; (8000b94 <send_coordinates+0x1ec>)
 8000a84:	f001 f938 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4841      	ldr	r0, [pc, #260]	; (8000b94 <send_coordinates+0x1ec>)
 8000a8e:	f001 f933 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &XE_MSB, 1);
 8000a92:	f107 0313 	add.w	r3, r7, #19
 8000a96:	2201      	movs	r2, #1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	483f      	ldr	r0, [pc, #252]	; (8000b98 <send_coordinates+0x1f0>)
 8000a9c:	f001 fdf4 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	483b      	ldr	r0, [pc, #236]	; (8000b94 <send_coordinates+0x1ec>)
 8000aa6:	f001 f927 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2110      	movs	r1, #16
 8000aae:	4839      	ldr	r0, [pc, #228]	; (8000b94 <send_coordinates+0x1ec>)
 8000ab0:	f001 f922 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &XE_LSB, 1);
 8000ab4:	f107 0312 	add.w	r3, r7, #18
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	4836      	ldr	r0, [pc, #216]	; (8000b98 <send_coordinates+0x1f0>)
 8000abe:	f001 fde3 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	4833      	ldr	r0, [pc, #204]	; (8000b94 <send_coordinates+0x1ec>)
 8000ac8:	f001 f916 	bl	8001cf8 <HAL_GPIO_WritePin>
	    //

	    //установить строку
	    HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4830      	ldr	r0, [pc, #192]	; (8000b94 <send_coordinates+0x1ec>)
 8000ad2:	f001 f911 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	482e      	ldr	r0, [pc, #184]	; (8000b94 <send_coordinates+0x1ec>)
 8000adc:	f001 f90c 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &raw_set_cmd, 1);
 8000ae0:	f107 0316 	add.w	r3, r7, #22
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	482b      	ldr	r0, [pc, #172]	; (8000b98 <send_coordinates+0x1f0>)
 8000aea:	f001 fdcd 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	4828      	ldr	r0, [pc, #160]	; (8000b94 <send_coordinates+0x1ec>)
 8000af4:	f001 f900 	bl	8001cf8 <HAL_GPIO_WritePin>
	    //
	    //параметры
	    HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2104      	movs	r1, #4
 8000afc:	4825      	ldr	r0, [pc, #148]	; (8000b94 <send_coordinates+0x1ec>)
 8000afe:	f001 f8fb 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2110      	movs	r1, #16
 8000b06:	4823      	ldr	r0, [pc, #140]	; (8000b94 <send_coordinates+0x1ec>)
 8000b08:	f001 f8f6 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &YS_MSB, 1);
 8000b0c:	f107 0311 	add.w	r3, r7, #17
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	4820      	ldr	r0, [pc, #128]	; (8000b98 <send_coordinates+0x1f0>)
 8000b16:	f001 fdb7 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	481d      	ldr	r0, [pc, #116]	; (8000b94 <send_coordinates+0x1ec>)
 8000b20:	f001 f8ea 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	481a      	ldr	r0, [pc, #104]	; (8000b94 <send_coordinates+0x1ec>)
 8000b2a:	f001 f8e5 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &YS_LSB, 1);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2201      	movs	r2, #1
 8000b34:	4619      	mov	r1, r3
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <send_coordinates+0x1f0>)
 8000b38:	f001 fda6 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <send_coordinates+0x1ec>)
 8000b42:	f001 f8d9 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2110      	movs	r1, #16
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <send_coordinates+0x1ec>)
 8000b4c:	f001 f8d4 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &YE_MSB, 1);
 8000b50:	f107 030f 	add.w	r3, r7, #15
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <send_coordinates+0x1f0>)
 8000b5a:	f001 fd95 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2110      	movs	r1, #16
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <send_coordinates+0x1ec>)
 8000b64:	f001 f8c8 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <send_coordinates+0x1ec>)
 8000b6e:	f001 f8c3 	bl	8001cf8 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit_DMA(&hspi1, &YE_LSB, 1);
 8000b72:	f107 030e 	add.w	r3, r7, #14
 8000b76:	2201      	movs	r2, #1
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <send_coordinates+0x1f0>)
 8000b7c:	f001 fd84 	bl	8002688 <HAL_SPI_Transmit_DMA>
	    HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2110      	movs	r1, #16
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <send_coordinates+0x1ec>)
 8000b86:	f001 f8b7 	bl	8001cf8 <HAL_GPIO_WritePin>
	    //
}
 8000b8a:	bf00      	nop
 8000b8c:	371c      	adds	r7, #28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40020000 	.word	0x40020000
 8000b98:	20000028 	.word	0x20000028

08000b9c <color_to_MSByte_LSByte>:

//here is problem
void color_to_MSByte_LSByte(uint16_t two_bytes, uint8_t *MSByte, uint8_t *LSByte){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	81fb      	strh	r3, [r7, #14]
	*MSByte = two_bytes >> 8;
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	701a      	strb	r2, [r3, #0]
	*LSByte = two_bytes - 0xFF00;
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <fill_by_color>:




void fill_by_color(uint16_t color, uint16_t length){
 8000bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	466b      	mov	r3, sp
 8000be0:	461e      	mov	r6, r3
	uint8_t MSByte, LSByte;
	color_to_MSByte_LSByte(color, &MSByte, &LSByte);
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	f107 010b 	add.w	r1, r7, #11
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffd5 	bl	8000b9c <color_to_MSByte_LSByte>
	uint8_t memwr_cmd = 0x2c;
 8000bf2:	232c      	movs	r3, #44	; 0x2c
 8000bf4:	727b      	strb	r3, [r7, #9]
	//MSByte = 0x00;
	//LSByte = 0xf8;
	uint16_t i = 0;	//16
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	82fb      	strh	r3, [r7, #22]
	uint8_t data[length*2];	//multiple two because 1 pix has two bytes, thus cycle must be 2 times long
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	0059      	lsls	r1, r3, #1
 8000bfe:	1e4b      	subs	r3, r1, #1
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	460a      	mov	r2, r1
 8000c04:	2300      	movs	r3, #0
 8000c06:	4690      	mov	r8, r2
 8000c08:	4699      	mov	r9, r3
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c1e:	460a      	mov	r2, r1
 8000c20:	2300      	movs	r3, #0
 8000c22:	4614      	mov	r4, r2
 8000c24:	461d      	mov	r5, r3
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	00eb      	lsls	r3, r5, #3
 8000c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c34:	00e2      	lsls	r2, r4, #3
 8000c36:	460b      	mov	r3, r1
 8000c38:	3307      	adds	r3, #7
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c42:	466b      	mov	r3, sp
 8000c44:	3300      	adds	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < length*2; i = i+2){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	82fb      	strh	r3, [r7, #22]
 8000c4c:	e00b      	b.n	8000c66 <fill_by_color+0x9a>
		data[i] = LSByte;
 8000c4e:	8afb      	ldrh	r3, [r7, #22]
 8000c50:	7ab9      	ldrb	r1, [r7, #10]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	54d1      	strb	r1, [r2, r3]
		data[i+1] = MSByte;
 8000c56:	8afb      	ldrh	r3, [r7, #22]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	7af9      	ldrb	r1, [r7, #11]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < length*2; i = i+2){
 8000c60:	8afb      	ldrh	r3, [r7, #22]
 8000c62:	3302      	adds	r3, #2
 8000c64:	82fb      	strh	r3, [r7, #22]
 8000c66:	8afa      	ldrh	r2, [r7, #22]
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbee      	blt.n	8000c4e <fill_by_color+0x82>
	}


	 //записать в память
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2104      	movs	r1, #4
 8000c74:	4819      	ldr	r0, [pc, #100]	; (8000cdc <fill_by_color+0x110>)
 8000c76:	f001 f83f 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4817      	ldr	r0, [pc, #92]	; (8000cdc <fill_by_color+0x110>)
 8000c80:	f001 f83a 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &memwr_cmd, 1);
 8000c84:	f107 0309 	add.w	r3, r7, #9
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <fill_by_color+0x114>)
 8000c8e:	f001 fcfb 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2110      	movs	r1, #16
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <fill_by_color+0x110>)
 8000c98:	f001 f82e 	bl	8001cf8 <HAL_GPIO_WritePin>
	  //передача цвета в память дисплея
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	480e      	ldr	r0, [pc, #56]	; (8000cdc <fill_by_color+0x110>)
 8000ca2:	f001 f829 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2110      	movs	r1, #16
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <fill_by_color+0x110>)
 8000cac:	f001 f824 	bl	8001cf8 <HAL_GPIO_WritePin>

	  //HAL_SPI_Transmit(&hspi1, &data[0], length*2, 10);
	  HAL_SPI_Transmit_DMA(&hspi1, &data[0], length*2);
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <fill_by_color+0x114>)
 8000cbc:	f001 fce4 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_Delay(15);
 8000cc0:	200f      	movs	r0, #15
 8000cc2:	f000 f9d7 	bl	8001074 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <fill_by_color+0x110>)
 8000ccc:	f001 f814 	bl	8001cf8 <HAL_GPIO_WritePin>
 8000cd0:	46b5      	mov	sp, r6
}
 8000cd2:	bf00      	nop
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	20000028 	.word	0x20000028

08000ce4 <fill_by_data>:

void fill_by_data(uint8_t image_data[], uint16_t length/*max65535*/){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
	  uint8_t memwr_cmd = 0x2c;
 8000cf0:	232c      	movs	r3, #44	; 0x2c
 8000cf2:	73fb      	strb	r3, [r7, #15]

	  //записать в память
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4817      	ldr	r0, [pc, #92]	; (8000d58 <fill_by_data+0x74>)
 8000cfa:	f000 fffd 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2110      	movs	r1, #16
 8000d02:	4815      	ldr	r0, [pc, #84]	; (8000d58 <fill_by_data+0x74>)
 8000d04:	f000 fff8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &memwr_cmd, 1);
 8000d08:	f107 030f 	add.w	r3, r7, #15
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <fill_by_data+0x78>)
 8000d12:	f001 fcb9 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2110      	movs	r1, #16
 8000d1a:	480f      	ldr	r0, [pc, #60]	; (8000d58 <fill_by_data+0x74>)
 8000d1c:	f000 ffec 	bl	8001cf8 <HAL_GPIO_WritePin>

	  //передача цвета в память дисплея
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2104      	movs	r1, #4
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <fill_by_data+0x74>)
 8000d26:	f000 ffe7 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <fill_by_data+0x74>)
 8000d30:	f000 ffe2 	bl	8001cf8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(&hspi1, &image_data[0], length);
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	461a      	mov	r2, r3
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <fill_by_data+0x78>)
 8000d3c:	f001 fca4 	bl	8002688 <HAL_SPI_Transmit_DMA>
	  HAL_Delay(15);
 8000d40:	200f      	movs	r0, #15
 8000d42:	f000 f997 	bl	8001074 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2110      	movs	r1, #16
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <fill_by_data+0x74>)
 8000d4c:	f000 ffd4 	bl	8001cf8 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	20000028 	.word	0x20000028

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_SPI_MspInit+0xe0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d159      	bne.n	8000e92 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <HAL_SPI_MspInit+0xe4>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a2e      	ldr	r2, [pc, #184]	; (8000ea0 <HAL_SPI_MspInit+0xe4>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <HAL_SPI_MspInit+0xe4>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_SPI_MspInit+0xe4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_SPI_MspInit+0xe4>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <HAL_SPI_MspInit+0xe4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e16:	23e0      	movs	r3, #224	; 0xe0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <HAL_SPI_MspInit+0xe8>)
 8000e32:	f000 fdc5 	bl	80019c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e38:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <HAL_SPI_MspInit+0xf0>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e3e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e42:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e46:	2240      	movs	r2, #64	; 0x40
 8000e48:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e56:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e78:	f000 fa32 	bl	80012e0 <HAL_DMA_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000e82:	f7ff ff6d 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e8a:	649a      	str	r2, [r3, #72]	; 0x48
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_SPI_MspInit+0xec>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013000 	.word	0x40013000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	20000080 	.word	0x20000080
 8000eac:	40026458 	.word	0x40026458

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f89a 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA2_Stream3_IRQHandler+0x10>)
 8000f0a:	f000 faef 	bl	80014ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000080 	.word	0x20000080

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f001 fdad 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff faad 	bl	80004cc <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	08002b60 	.word	0x08002b60
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	200000e4 	.word	0x200000e4

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f94f 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fed2 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f967 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f92f 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	200000e0 	.word	0x200000e0

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200000e0 	.word	0x200000e0

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff feb6 	bl	800105c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e099      	b.n	8001430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	e00f      	b.n	800133e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131e:	f7ff fe9d 	bl	800105c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b05      	cmp	r3, #5
 800132a:	d908      	bls.n	800133e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e078      	b.n	8001430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e8      	bne.n	800131e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_DMA_Init+0x158>)
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4313      	orrs	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f023 0307 	bic.w	r3, r3, #7
 80013be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d117      	bne.n	8001402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00e      	beq.n	8001402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fa6f 	bl	80018c8 <DMA_CheckFifoParam>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013fe:	2301      	movs	r3, #1
 8001400:	e016      	b.n	8001430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa26 	bl	800185c <DMA_CalcBaseAndBitshift>
 8001410:	4603      	mov	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	f010803f 	.word	0xf010803f

0800143c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_DMA_Start_IT+0x26>
 800145e:	2302      	movs	r3, #2
 8001460:	e040      	b.n	80014e4 <HAL_DMA_Start_IT+0xa8>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d12f      	bne.n	80014d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f9b8 	bl	8001800 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	409a      	lsls	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0216 	orr.w	r2, r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0208 	orr.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e005      	b.n	80014e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014de:	2302      	movs	r3, #2
 80014e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f8:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <HAL_DMA_IRQHandler+0x248>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a8e      	ldr	r2, [pc, #568]	; (8001738 <HAL_DMA_IRQHandler+0x24c>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0a9b      	lsrs	r3, r3, #10
 8001504:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2208      	movs	r2, #8
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01a      	beq.n	8001558 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2208      	movs	r2, #8
 8001546:	409a      	lsls	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2201      	movs	r2, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d012      	beq.n	800158e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2201      	movs	r2, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f043 0202 	orr.w	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2204      	movs	r2, #4
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d012      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	2204      	movs	r2, #4
 80015b2:	409a      	lsls	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2210      	movs	r2, #16
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d043      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03c      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2210      	movs	r2, #16
 80015e8:	409a      	lsls	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d018      	beq.n	800162e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
 800161a:	e01f      	b.n	800165c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01b      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4798      	blx	r3
 800162c:	e016      	b.n	800165c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0208 	bic.w	r2, r2, #8
 800164a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2220      	movs	r2, #32
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 808f 	beq.w	800178c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8087 	beq.w	800178c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	2220      	movs	r2, #32
 8001684:	409a      	lsls	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b05      	cmp	r3, #5
 8001694:	d136      	bne.n	8001704 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0216 	bic.w	r2, r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x1da>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0208 	bic.w	r2, r2, #8
 80016d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	223f      	movs	r2, #63	; 0x3f
 80016dc:	409a      	lsls	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d07e      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
        }
        return;
 8001702:	e079      	b.n	80017f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01d      	beq.n	800174e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	2b00      	cmp	r3, #0
 8001726:	d031      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
 8001730:	e02c      	b.n	800178c <HAL_DMA_IRQHandler+0x2a0>
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000
 8001738:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e01e      	b.n	800178c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10f      	bne.n	800177c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0210 	bic.w	r2, r2, #16
 800176a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d032      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2205      	movs	r2, #5
 80017a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d307      	bcc.n	80017d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f2      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x2cc>
 80017d2:	e000      	b.n	80017d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
 80017f6:	e000      	b.n	80017fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80017f8:	bf00      	nop
    }
  }
}
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800181c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b40      	cmp	r3, #64	; 0x40
 800182c:	d108      	bne.n	8001840 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800183e:	e007      	b.n	8001850 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	60da      	str	r2, [r3, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	3b10      	subs	r3, #16
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <DMA_CalcBaseAndBitshift+0x64>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001876:	4a13      	ldr	r2, [pc, #76]	; (80018c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d909      	bls.n	800189e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	1d1a      	adds	r2, r3, #4
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	659a      	str	r2, [r3, #88]	; 0x58
 800189c:	e007      	b.n	80018ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	aaaaaaab 	.word	0xaaaaaaab
 80018c4:	08002b48 	.word	0x08002b48

080018c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11f      	bne.n	8001922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d856      	bhi.n	8001996 <DMA_CheckFifoParam+0xce>
 80018e8:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <DMA_CheckFifoParam+0x28>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001901 	.word	0x08001901
 80018f4:	08001913 	.word	0x08001913
 80018f8:	08001901 	.word	0x08001901
 80018fc:	08001997 	.word	0x08001997
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d046      	beq.n	800199a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001910:	e043      	b.n	800199a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800191a:	d140      	bne.n	800199e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001920:	e03d      	b.n	800199e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192a:	d121      	bne.n	8001970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d837      	bhi.n	80019a2 <DMA_CheckFifoParam+0xda>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <DMA_CheckFifoParam+0x70>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001949 	.word	0x08001949
 800193c:	0800194f 	.word	0x0800194f
 8001940:	08001949 	.word	0x08001949
 8001944:	08001961 	.word	0x08001961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
      break;
 800194c:	e030      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d025      	beq.n	80019a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195e:	e022      	b.n	80019a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001968:	d11f      	bne.n	80019aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800196e:	e01c      	b.n	80019aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d903      	bls.n	800197e <DMA_CheckFifoParam+0xb6>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d003      	beq.n	8001984 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800197c:	e018      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
      break;
 8001982:	e015      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00e      	beq.n	80019ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      break;
 8001994:	e00b      	b.n	80019ae <DMA_CheckFifoParam+0xe6>
      break;
 8001996:	bf00      	nop
 8001998:	e00a      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e008      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
 80019a0:	e006      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e004      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e002      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
    }
  } 
  
  return status; 
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e16b      	b.n	8001cb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 815a 	bne.w	8001cae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d005      	beq.n	8001a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d130      	bne.n	8001a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d017      	beq.n	8001ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80b4 	beq.w	8001cae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <HAL_GPIO_Init+0x30c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ccc <HAL_GPIO_Init+0x30c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_GPIO_Init+0x30c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a5b      	ldr	r2, [pc, #364]	; (8001cd0 <HAL_GPIO_Init+0x310>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_GPIO_Init+0x314>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d02b      	beq.n	8001be6 <HAL_GPIO_Init+0x226>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_GPIO_Init+0x318>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d025      	beq.n	8001be2 <HAL_GPIO_Init+0x222>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a50      	ldr	r2, [pc, #320]	; (8001cdc <HAL_GPIO_Init+0x31c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01f      	beq.n	8001bde <HAL_GPIO_Init+0x21e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_GPIO_Init+0x320>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x21a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x216>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_GPIO_Init+0x328>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x212>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x32c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x20a>
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	e00e      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e00c      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00a      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	e008      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x228>
 8001be6:	2300      	movs	r3, #0
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f002 0203 	and.w	r2, r2, #3
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf8:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <HAL_GPIO_Init+0x310>)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2a:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	f67f ae90 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40021c00 	.word	0x40021c00
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e267      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d075      	beq.n	8001e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d00c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b7e      	ldr	r3, [pc, #504]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x108>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d157      	bne.n	8001e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e242      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x74>
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6f      	ldr	r2, [pc, #444]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6c      	ldr	r2, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001dc4:	4b69      	ldr	r3, [pc, #420]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a68      	ldr	r2, [pc, #416]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f93a 	bl	800105c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f936 	bl	800105c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e207      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xc0>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f926 	bl	800105c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f922 	bl	800105c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1f3      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0xe8>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d063      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d11c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x152>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1c7      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4937      	ldr	r1, [pc, #220]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	e03a      	b.n	8001f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_OscConfig+0x244>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f8db 	bl	800105c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7ff f8d7 	bl	800105c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1a8      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4925      	ldr	r1, [pc, #148]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e015      	b.n	8001f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x244>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f8ba 	bl	800105c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff f8b6 	bl	800105c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e187      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d036      	beq.n	8001f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_RCC_OscConfig+0x248>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7ff f89a 	bl	800105c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f896 	bl	800105c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e167      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x200>
 8001f4a:	e01b      	b.n	8001f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x248>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f883 	bl	800105c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	e00e      	b.n	8001f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff f87f 	bl	800105c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d907      	bls.n	8001f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e150      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	42470000 	.word	0x42470000
 8001f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ea      	bne.n	8001f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8097 	beq.w	80020c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a7c      	ldr	r2, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b7a      	ldr	r3, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b77      	ldr	r3, [pc, #476]	; (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b74      	ldr	r3, [pc, #464]	; (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a73      	ldr	r2, [pc, #460]	; (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff f83f 	bl	800105c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff f83b 	bl	800105c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e10c      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x2ea>
 8002008:	4b64      	ldr	r3, [pc, #400]	; (800219c <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a63      	ldr	r2, [pc, #396]	; (800219c <HAL_RCC_OscConfig+0x470>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x324>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x30c>
 800201e:	4b5f      	ldr	r3, [pc, #380]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a5e      	ldr	r2, [pc, #376]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
 800202a:	4b5c      	ldr	r3, [pc, #368]	; (800219c <HAL_RCC_OscConfig+0x470>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	4a5b      	ldr	r2, [pc, #364]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6713      	str	r3, [r2, #112]	; 0x70
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0x324>
 8002038:	4b58      	ldr	r3, [pc, #352]	; (800219c <HAL_RCC_OscConfig+0x470>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a57      	ldr	r2, [pc, #348]	; (800219c <HAL_RCC_OscConfig+0x470>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b55      	ldr	r3, [pc, #340]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a54      	ldr	r2, [pc, #336]	; (800219c <HAL_RCC_OscConfig+0x470>)
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7ff f800 	bl	800105c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7fe fffc 	bl	800105c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0cb      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0ee      	beq.n	8002060 <HAL_RCC_OscConfig+0x334>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe ffea 	bl	800105c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7fe ffe6 	bl	800105c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0b5      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ee      	bne.n	800208c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a38      	ldr	r2, [pc, #224]	; (800219c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a1 	beq.w	800220c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ca:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_RCC_OscConfig+0x470>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d05c      	beq.n	8002190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d141      	bne.n	8002162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCC_OscConfig+0x478>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe ffba 	bl	800105c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe ffb6 	bl	800105c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e087      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	3b01      	subs	r3, #1
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	491b      	ldr	r1, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x478>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe ff8f 	bl	800105c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe ff8b 	bl	800105c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e05c      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x416>
 8002160:	e054      	b.n	800220c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x478>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe ff78 	bl	800105c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002170:	f7fe ff74 	bl	800105c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e045      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_OscConfig+0x470>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x444>
 800218e:	e03d      	b.n	800220c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e038      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
 800219c:	40023800 	.word	0x40023800
 80021a0:	40007000 	.word	0x40007000
 80021a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x4ec>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d028      	beq.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d121      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d11a      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	3b01      	subs	r3, #1
 80021f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cc      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d90c      	bls.n	8002258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800227a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d044      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d119      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e06f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e067      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4934      	ldr	r1, [pc, #208]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fea6 	bl	800105c <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fea2 	bl	800105c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e04f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d20c      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fe06 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08002b38 	.word	0x08002b38
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b090      	sub	sp, #64	; 0x40
 80023ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d00d      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 800240c:	2b08      	cmp	r3, #8
 800240e:	f200 80a1 	bhi.w	8002554 <HAL_RCC_GetSysClockFreq+0x16c>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002416:	2b04      	cmp	r3, #4
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800241a:	e09b      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_GetSysClockFreq+0x184>)
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002420:	e09b      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_GetSysClockFreq+0x188>)
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002426:	e098      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d028      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	2200      	movs	r2, #0
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	627a      	str	r2, [r7, #36]	; 0x24
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002450:	2100      	movs	r1, #0
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_GetSysClockFreq+0x188>)
 8002454:	fb03 f201 	mul.w	r2, r3, r1
 8002458:	2300      	movs	r3, #0
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	4413      	add	r3, r2
 8002460:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_RCC_GetSysClockFreq+0x188>)
 8002462:	fba0 1202 	umull	r1, r2, r0, r2
 8002466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002468:	460a      	mov	r2, r1
 800246a:	62ba      	str	r2, [r7, #40]	; 0x28
 800246c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246e:	4413      	add	r3, r2
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	2200      	movs	r2, #0
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	61fa      	str	r2, [r7, #28]
 800247a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002482:	f7fd fea1 	bl	80001c8 <__aeabi_uldivmod>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4613      	mov	r3, r2
 800248c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248e:	e053      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002490:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	2200      	movs	r2, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	617a      	str	r2, [r7, #20]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024a2:	f04f 0b00 	mov.w	fp, #0
 80024a6:	4652      	mov	r2, sl
 80024a8:	465b      	mov	r3, fp
 80024aa:	f04f 0000 	mov.w	r0, #0
 80024ae:	f04f 0100 	mov.w	r1, #0
 80024b2:	0159      	lsls	r1, r3, #5
 80024b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b8:	0150      	lsls	r0, r2, #5
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	ebb2 080a 	subs.w	r8, r2, sl
 80024c2:	eb63 090b 	sbc.w	r9, r3, fp
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024da:	ebb2 0408 	subs.w	r4, r2, r8
 80024de:	eb63 0509 	sbc.w	r5, r3, r9
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	00eb      	lsls	r3, r5, #3
 80024ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f0:	00e2      	lsls	r2, r4, #3
 80024f2:	4614      	mov	r4, r2
 80024f4:	461d      	mov	r5, r3
 80024f6:	eb14 030a 	adds.w	r3, r4, sl
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	eb45 030b 	adc.w	r3, r5, fp
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800250e:	4629      	mov	r1, r5
 8002510:	028b      	lsls	r3, r1, #10
 8002512:	4621      	mov	r1, r4
 8002514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002518:	4621      	mov	r1, r4
 800251a:	028a      	lsls	r2, r1, #10
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	2200      	movs	r2, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	60fa      	str	r2, [r7, #12]
 8002528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252c:	f7fd fe4c 	bl	80001c8 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4613      	mov	r3, r2
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	3301      	adds	r3, #1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetSysClockFreq+0x184>)
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800255c:	4618      	mov	r0, r3
 800255e:	3740      	adds	r7, #64	; 0x40
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	00f42400 	.word	0x00f42400
 8002570:	017d7840 	.word	0x017d7840

08002574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e07b      	b.n	800267e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002596:	d009      	beq.n	80025ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	61da      	str	r2, [r3, #28]
 800259e:	e005      	b.n	80025ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fbf8 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	ea42 0103 	orr.w	r1, r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0104 	and.w	r1, r3, #4
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f003 0210 	and.w	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_SPI_Transmit_DMA+0x20>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e09b      	b.n	80027e0 <HAL_SPI_Transmit_DMA+0x158>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d002      	beq.n	80026c2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026c0:	e089      	b.n	80027d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_SPI_Transmit_DMA+0x46>
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026d2:	e080      	b.n	80027d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2203      	movs	r2, #3
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271a:	d10f      	bne.n	800273c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <HAL_SPI_Transmit_DMA+0x160>)
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	4a28      	ldr	r2, [pc, #160]	; (80027ec <HAL_SPI_Transmit_DMA+0x164>)
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_SPI_Transmit_DMA+0x168>)
 8002752:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002758:	2200      	movs	r2, #0
 800275a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	4619      	mov	r1, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002772:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002774:	f7fe fe62 	bl	800143c <HAL_DMA_Start_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002796:	e01e      	b.n	80027d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d007      	beq.n	80027b6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0202 	orr.w	r2, r2, #2
 80027d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	080028d9 	.word	0x080028d9
 80027ec:	08002831 	.word	0x08002831
 80027f0:	080028f5 	.word	0x080028f5

080027f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800283e:	f7fe fc0d 	bl	800105c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d03b      	beq.n	80028cc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0220 	bic.w	r2, r2, #32
 8002862:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0202 	bic.w	r2, r2, #2
 8002872:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	2164      	movs	r1, #100	; 0x64
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f000 f8e3 	bl	8002a44 <SPI_EndRxTxTransaction>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7ff ffa9 	bl	800281c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80028ca:	e002      	b.n	80028d2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80028cc:	6978      	ldr	r0, [r7, #20]
 80028ce:	f7ff ff91 	bl	80027f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff ff8e 	bl	8002808 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0203 	bic.w	r2, r2, #3
 8002910:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff ff78 	bl	800281c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002944:	f7fe fb8a 	bl	800105c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002954:	f7fe fb82 	bl	800105c <HAL_GetTick>
 8002958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	0d1b      	lsrs	r3, r3, #20
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296a:	e054      	b.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d050      	beq.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002974:	f7fe fb72 	bl	800105c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	429a      	cmp	r2, r3
 8002982:	d902      	bls.n	800298a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d13d      	bne.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a2:	d111      	bne.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ac:	d004      	beq.n	80029b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d107      	bne.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d0:	d10f      	bne.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e017      	b.n	8002a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d19b      	bne.n	800296c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <SPI_EndRxTxTransaction+0x7c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <SPI_EndRxTxTransaction+0x80>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0d5b      	lsrs	r3, r3, #21
 8002a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a6e:	d112      	bne.n	8002a96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff ff5a 	bl	8002934 <SPI_WaitFlagStateUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f043 0220 	orr.w	r2, r3, #32
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e00f      	b.n	8002ab6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d0f2      	beq.n	8002a96 <SPI_EndRxTxTransaction+0x52>
 8002ab0:	e000      	b.n	8002ab4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ab2:	bf00      	nop
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	165e9f81 	.word	0x165e9f81

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4d0d      	ldr	r5, [pc, #52]	; (8002b00 <__libc_init_array+0x38>)
 8002acc:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	4d0b      	ldr	r5, [pc, #44]	; (8002b08 <__libc_init_array+0x40>)
 8002ada:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <__libc_init_array+0x44>)
 8002adc:	f000 f820 	bl	8002b20 <_init>
 8002ae0:	1b64      	subs	r4, r4, r5
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002b58 	.word	0x08002b58
 8002b04:	08002b58 	.word	0x08002b58
 8002b08:	08002b58 	.word	0x08002b58
 8002b0c:	08002b5c 	.word	0x08002b5c

08002b10 <memset>:
 8002b10:	4402      	add	r2, r0
 8002b12:	4603      	mov	r3, r0
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d100      	bne.n	8002b1a <memset+0xa>
 8002b18:	4770      	bx	lr
 8002b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1e:	e7f9      	b.n	8002b14 <memset+0x4>

08002b20 <_init>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr

08002b2c <_fini>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr
