/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "fonts.h"
#include "ssd1306.h"
#include <stdio.h>
//#include "HTU21D.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SD_HandleTypeDef hsd;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart4;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_SPI1_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SDIO_SD_Init();
  MX_FATFS_Init();
  MX_SPI1_Init();
  MX_UART4_Init();
  /* USER CODE BEGIN 2 */

  uint16_t address_TX = 0x81;
  uint16_t address_RX = 0x80;
  uint8_t reset_CMD = 0xFE;
  uint16_t read_temper_CMD = 0xE3;


  uint8_t data[3] = {0, 0, 0};
  HAL_StatusTypeDef status;

  //status = HAL_I2C_Master_Transmit(&hi2c1, address_TX, &read_temper_CMD, 1, HAL_MAX_DELAY);
  //status = HAL_I2C_Master_Receive(&hi2c1, address_RX, &data[0], 3, HAL_MAX_DELAY);



  status = HAL_I2C_Mem_Read(&hi2c1, address_RX, read_temper_CMD, I2C_MEMADD_SIZE_8BIT, &data[0], 2, 1000);


  ssd1306_Init(&hi2c1);
  ssd1306_Fill(White);
  ssd1306_UpdateScreen(&hi2c1);

  uint16_t raw_temper = (data[0]<<8)|(data[1]);
  float temper =0 - 46.85 + 175.72*((float)raw_temper/65536);

  char str[20];
  sprintf(str, "%.4f", temper);

  ssd1306_SetCursor(0,3);		//step 0,15
  ssd1306_WriteString(&str[0], Font_7x10, Black);
  ssd1306_UpdateScreen(&hi2c1);



  uint8_t tx_spi = 0x00|0b10000000;
  uint8_t rx1_spi = 0x00;
  uint8_t rx2_spi = 0x00;
  uint8_t init_spi = 0x7F|0b10000000;		//single send to BMI for using SPI, 0b10000000 meaning it's read access (i want to read from this address)
  HAL_StatusTypeDef status_SPI1, status_SPI2, status_SPI3, status_SPI4, status_SPI5, status_SPI6, status_SPI7, status_SPI8,
  status_SPI9, status_SPI10, status_SPI11, status_SPI12, status_SPI13, status_SPI14, status_SPI15, status_SPI16;


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI1 =  HAL_SPI_Transmit(&hspi1, &init_spi, 1, HAL_MAX_DELAY);
  status_SPI4 = HAL_SPI_Receive(&hspi1, &rx1_spi, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI2 =  HAL_SPI_Transmit(&hspi1, &tx_spi, 1, HAL_MAX_DELAY);
  status_SPI3 = HAL_SPI_Receive(&hspi1, &rx2_spi, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);


  //for use gyro need make it normal power mode:
  uint8_t command_and_set_PMU_gyr_normal[] = {0x7E, 0x15};


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  HAL_SPI_Transmit(&hspi1, &command_and_set_PMU_gyr_normal[0], 2, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);


  //getting GYR xyz data from BMI
  uint8_t x_GYR_addr_MSB = 0x0D|0b10000000;
  uint8_t x_GYR_addr_LSB = 0x0C|0b10000000;
  uint8_t y_GYR_addr_MSB = 0x0F|0b10000000;
  uint8_t y_GYR_addr_LSB = 0x0E|0b10000000;
  uint8_t z_GYR_addr_MSB = 0x11|0b10000000;
  uint8_t z_GYR_addr_LSB = 0x10|0b10000000;

  uint8_t x_GYR_data_MSB = 0;
  uint8_t x_GYR_data_LSB = 0;
  uint8_t y_GYR_data_MSB = 0;
  uint8_t y_GYR_data_LSB = 0;
  uint8_t z_GYR_data_MSB = 0;
  uint8_t z_GYR_data_LSB = 0;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI5 = HAL_SPI_Transmit(&hspi1, &x_GYR_addr_MSB, 1, HAL_MAX_DELAY);
  status_SPI6 = HAL_SPI_Receive(&hspi1, &x_GYR_data_MSB, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI7 = HAL_SPI_Transmit(&hspi1, &x_GYR_addr_LSB, 1, HAL_MAX_DELAY);
  status_SPI8 = HAL_SPI_Receive(&hspi1, &x_GYR_data_LSB, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI9 = HAL_SPI_Transmit(&hspi1, &y_GYR_addr_MSB, 1, HAL_MAX_DELAY);
  status_SPI10 = HAL_SPI_Receive(&hspi1, &y_GYR_data_MSB, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI11 = HAL_SPI_Transmit(&hspi1, &y_GYR_addr_LSB, 1, HAL_MAX_DELAY);
  status_SPI12 = HAL_SPI_Receive(&hspi1, &y_GYR_data_LSB, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI13 = HAL_SPI_Transmit(&hspi1, &z_GYR_addr_MSB, 1, HAL_MAX_DELAY);
  status_SPI14 = HAL_SPI_Receive(&hspi1, &z_GYR_data_MSB, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
  status_SPI15 = HAL_SPI_Transmit(&hspi1, &z_GYR_addr_LSB, 1, HAL_MAX_DELAY);
  status_SPI16 = HAL_SPI_Receive(&hspi1, &z_GYR_data_LSB, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

  uint16_t x_GYR_data = (x_GYR_data_MSB<<8)|x_GYR_data_LSB;
  uint16_t y_GYR_data = (y_GYR_data_MSB<<8)|y_GYR_data_LSB;
  uint16_t z_GYR_data = (z_GYR_data_MSB<<8)|z_GYR_data_LSB;


  char str_x_GYR[20];
  char str_y_GYR[20];
  char str_z_GYR[20];
  sprintf(str_x_GYR, "%d", x_GYR_data);
  sprintf(str_y_GYR, "%d", y_GYR_data);
  sprintf(str_z_GYR, "%d", z_GYR_data);


  ssd1306_SetCursor(0,15);
  ssd1306_WriteString(&str_x_GYR[0], Font_7x10, Black);
  ssd1306_SetCursor(0,30);
  ssd1306_WriteString(&str_y_GYR[0], Font_7x10, Black);
  ssd1306_SetCursor(0,45);
  ssd1306_WriteString(&str_z_GYR[0], Font_7x10, Black);
  ssd1306_UpdateScreen(&hi2c1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 10;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{

  /* USER CODE BEGIN SDIO_Init 0 */

  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd.Init.ClockDiv = 0;
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
