
i2cBMI160.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004120  08004120  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004120  08004120  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004120  08004120  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000084  080041ac  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080041ac  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000776a  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b0  00000000  00000000  00027817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00028ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00029678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174a6  00000000  00000000  00029d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b99  00000000  00000000  00041216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835de  00000000  00000000  0004adaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce38d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002270  00000000  00000000  000ce3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003348 	.word	0x08003348

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003348 	.word	0x08003348

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcf1 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f89d 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f903 	bl	8000364 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8d3 	bl	8000308 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8000162:	f000 fa01 	bl	8000568 <ssd1306_Init>
  ssd1306_Fill(White);
 8000166:	2001      	movs	r0, #1
 8000168:	f000 fa68 	bl	800063c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800016c:	f000 fa88 	bl	8000680 <ssd1306_UpdateScreen>


  char char_v[] = {72, 105};
 8000170:	f646 1348 	movw	r3, #26952	; 0x6948
 8000174:	823b      	strh	r3, [r7, #16]
  ssd1306_SetCursor(5, 5);
 8000176:	2105      	movs	r1, #5
 8000178:	2005      	movs	r0, #5
 800017a:	f000 fba9 	bl	80008d0 <ssd1306_SetCursor>
  ssd1306_WriteString(&char_v[0], Font_11x18, Black);
 800017e:	4a3d      	ldr	r2, [pc, #244]	; (8000274 <main+0x128>)
 8000180:	f107 0010 	add.w	r0, r7, #16
 8000184:	2300      	movs	r3, #0
 8000186:	ca06      	ldmia	r2, {r1, r2}
 8000188:	f000 fb7c 	bl	8000884 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800018c:	f000 fa78 	bl	8000680 <ssd1306_UpdateScreen>
  HAL_Delay(300);
 8000190:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000194:	f000 fd32 	bl	8000bfc <HAL_Delay>




  HAL_StatusTypeDef acc_init_result = DDS_ACC_init();
 8000198:	f000 f930 	bl	80003fc <DDS_ACC_init>
 800019c:	4603      	mov	r3, r0
 800019e:	75fb      	strb	r3, [r7, #23]





  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//TURN LED OFF
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a6:	4834      	ldr	r0, [pc, #208]	; (8000278 <main+0x12c>)
 80001a8:	f000 ffb4 	bl	8001114 <HAL_GPIO_WritePin>



  //uint16_t acc_z = 0b101;
  char acc_z_string[10];
  uint8_t temp = 0;
 80001ac:	2300      	movs	r3, #0
 80001ae:	75bb      	strb	r3, [r7, #22]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_StatusTypeDef result2 =  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, reg_status, 1, &status, 1, HAL_MAX_DELAY);
 80001b0:	4b32      	ldr	r3, [pc, #200]	; (800027c <main+0x130>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	b29a      	uxth	r2, r3
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	9302      	str	r3, [sp, #8]
 80001bc:	2301      	movs	r3, #1
 80001be:	9301      	str	r3, [sp, #4]
 80001c0:	4b2f      	ldr	r3, [pc, #188]	; (8000280 <main+0x134>)
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2301      	movs	r3, #1
 80001c6:	21d1      	movs	r1, #209	; 0xd1
 80001c8:	482e      	ldr	r0, [pc, #184]	; (8000284 <main+0x138>)
 80001ca:	f001 f9f9 	bl	80015c0 <HAL_I2C_Mem_Read>
 80001ce:	4603      	mov	r3, r0
 80001d0:	757b      	strb	r3, [r7, #21]
		if((status==144 )| (status==128)){
 80001d2:	4b2b      	ldr	r3, [pc, #172]	; (8000280 <main+0x134>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b90      	cmp	r3, #144	; 0x90
 80001d8:	bf0c      	ite	eq
 80001da:	2301      	moveq	r3, #1
 80001dc:	2300      	movne	r3, #0
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	4b27      	ldr	r3, [pc, #156]	; (8000280 <main+0x134>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b80      	cmp	r3, #128	; 0x80
 80001e6:	bf0c      	ite	eq
 80001e8:	2301      	moveq	r3, #1
 80001ea:	2300      	movne	r3, #0
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4313      	orrs	r3, r2
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0dc      	beq.n	80001b0 <main+0x64>
			//HAL_StatusTypeDef result3 =  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, reg_data_acc_z_LSB, 1, &acc_z_LSB, 1, HAL_MAX_DELAY);
			HAL_StatusTypeDef result4 =  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, reg_data_acc_z_MSB, 1, &acc_z_MSB, 1, HAL_MAX_DELAY);
 80001f6:	4b24      	ldr	r3, [pc, #144]	; (8000288 <main+0x13c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000200:	9302      	str	r3, [sp, #8]
 8000202:	2301      	movs	r3, #1
 8000204:	9301      	str	r3, [sp, #4]
 8000206:	4b21      	ldr	r3, [pc, #132]	; (800028c <main+0x140>)
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2301      	movs	r3, #1
 800020c:	21d1      	movs	r1, #209	; 0xd1
 800020e:	481d      	ldr	r0, [pc, #116]	; (8000284 <main+0x138>)
 8000210:	f001 f9d6 	bl	80015c0 <HAL_I2C_Mem_Read>
 8000214:	4603      	mov	r3, r0
 8000216:	753b      	strb	r3, [r7, #20]
			//acc_z = (acc_z_MSB << 8) | acc_z_LSB;
			//sprintf(acc_z_string, "%d", acc_z);
			if(acc_z_MSB < 192){
 8000218:	4b1c      	ldr	r3, [pc, #112]	; (800028c <main+0x140>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2bbf      	cmp	r3, #191	; 0xbf
 800021e:	d80a      	bhi.n	8000236 <main+0xea>
				acc_z_string[0] = '-';
 8000220:	232d      	movs	r3, #45	; 0x2d
 8000222:	713b      	strb	r3, [r7, #4]
				acc_z_MSB = 192 - acc_z_MSB;
 8000224:	4b19      	ldr	r3, [pc, #100]	; (800028c <main+0x140>)
 8000226:	781a      	ldrb	r2, [r3, #0]
 8000228:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800022c:	1a9b      	subs	r3, r3, r2
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b16      	ldr	r3, [pc, #88]	; (800028c <main+0x140>)
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	e007      	b.n	8000246 <main+0xfa>
			}
			else{
				acc_z_MSB = acc_z_MSB - 192;
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <main+0x140>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	3340      	adds	r3, #64	; 0x40
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <main+0x140>)
 8000240:	701a      	strb	r2, [r3, #0]
				acc_z_string[0] = '+';
 8000242:	232b      	movs	r3, #43	; 0x2b
 8000244:	713b      	strb	r3, [r7, #4]
			}
			sprintf(&acc_z_string[1], "%d", acc_z_MSB);
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <main+0x140>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	3301      	adds	r3, #1
 8000250:	490f      	ldr	r1, [pc, #60]	; (8000290 <main+0x144>)
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fc26 	bl	8002aa4 <siprintf>
			  ssd1306_SetCursor(5, 5);
 8000258:	2105      	movs	r1, #5
 800025a:	2005      	movs	r0, #5
 800025c:	f000 fb38 	bl	80008d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&acc_z_string[0], Font_11x18, Black);
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <main+0x128>)
 8000262:	1d38      	adds	r0, r7, #4
 8000264:	2300      	movs	r3, #0
 8000266:	ca06      	ldmia	r2, {r1, r2}
 8000268:	f000 fb0c 	bl	8000884 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 800026c:	f000 fa08 	bl	8000680 <ssd1306_UpdateScreen>
  {
 8000270:	e79e      	b.n	80001b0 <main+0x64>
 8000272:	bf00      	nop
 8000274:	2000000c 	.word	0x2000000c
 8000278:	40011000 	.word	0x40011000
 800027c:	20000003 	.word	0x20000003
 8000280:	20000007 	.word	0x20000007
 8000284:	200000a0 	.word	0x200000a0
 8000288:	20000004 	.word	0x20000004
 800028c:	20000008 	.word	0x20000008
 8000290:	08003360 	.word	0x08003360

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b090      	sub	sp, #64	; 0x40
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2228      	movs	r2, #40	; 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fbf6 	bl	8002a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 ff95 	bl	80021f8 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80002d4:	f000 f90a 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002dc:	2301      	movs	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f002 fa03 	bl	80026fc <HAL_RCC_ClockConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002fc:	f000 f8f6 	bl	80004ec <Error_Handler>
  }
}
 8000300:	bf00      	nop
 8000302:	3740      	adds	r7, #64	; 0x40
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	; (800035c <MX_I2C1_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x50>)
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_I2C1_Init+0x58>)
 8000316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_I2C1_Init+0x50>)
 8000326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800032a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_I2C1_Init+0x50>)
 8000346:	f000 fefd 	bl	8001144 <HAL_I2C_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f8cc 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200000a0 	.word	0x200000a0
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <MX_GPIO_Init+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <MX_GPIO_Init+0x90>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_GPIO_Init+0x90>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_GPIO_Init+0x90>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a17      	ldr	r2, [pc, #92]	; (80003f4 <MX_GPIO_Init+0x90>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_GPIO_Init+0x90>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	480c      	ldr	r0, [pc, #48]	; (80003f8 <MX_GPIO_Init+0x94>)
 80003c8:	f000 fea4 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_GPIO_Init+0x94>)
 80003e6:	f000 fd11 	bl	8000e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000

080003fc <DDS_ACC_init>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef DDS_ACC_init(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result0 =  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, reg_pmu_status, 1, &pmu_status0, 1, HAL_MAX_DELAY);
 8000402:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <DDS_ACC_init+0xd8>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b29a      	uxth	r2, r3
 8000408:	f04f 33ff 	mov.w	r3, #4294967295
 800040c:	9302      	str	r3, [sp, #8]
 800040e:	2301      	movs	r3, #1
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <DDS_ACC_init+0xdc>)
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	21d1      	movs	r1, #209	; 0xd1
 800041a:	4830      	ldr	r0, [pc, #192]	; (80004dc <DDS_ACC_init+0xe0>)
 800041c:	f001 f8d0 	bl	80015c0 <HAL_I2C_Mem_Read>
 8000420:	4603      	mov	r3, r0
 8000422:	71fb      	strb	r3, [r7, #7]
	if(pmu_status0==0){
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <DDS_ACC_init+0xdc>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d135      	bne.n	8000498 <DDS_ACC_init+0x9c>
			HAL_StatusTypeDef result1 =  HAL_I2C_Mem_Write(&hi2c1, 0b11010000, 0x7E, 1, &acc_set_pmu_normal, 1, HAL_MAX_DELAY);
 800042c:	f04f 33ff 	mov.w	r3, #4294967295
 8000430:	9302      	str	r3, [sp, #8]
 8000432:	2301      	movs	r3, #1
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <DDS_ACC_init+0xe4>)
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2301      	movs	r3, #1
 800043c:	227e      	movs	r2, #126	; 0x7e
 800043e:	21d0      	movs	r1, #208	; 0xd0
 8000440:	4826      	ldr	r0, [pc, #152]	; (80004dc <DDS_ACC_init+0xe0>)
 8000442:	f000 ffc3 	bl	80013cc <HAL_I2C_Mem_Write>
 8000446:	4603      	mov	r3, r0
 8000448:	71bb      	strb	r3, [r7, #6]
			HAL_StatusTypeDef result2 =  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, reg_pmu_status, 1, &pmu_status0, 1, HAL_MAX_DELAY);
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <DDS_ACC_init+0xd8>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b29a      	uxth	r2, r3
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	2301      	movs	r3, #1
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <DDS_ACC_init+0xdc>)
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2301      	movs	r3, #1
 8000460:	21d1      	movs	r1, #209	; 0xd1
 8000462:	481e      	ldr	r0, [pc, #120]	; (80004dc <DDS_ACC_init+0xe0>)
 8000464:	f001 f8ac 	bl	80015c0 <HAL_I2C_Mem_Read>
 8000468:	4603      	mov	r3, r0
 800046a:	717b      	strb	r3, [r7, #5]
	else if((pmu_status0==144) | (pmu_status0==16))
		return HAL_OK;
	else
		return HAL_ERROR;

	HAL_StatusTypeDef result3 =  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, reg_err, 1, &errors, 1, HAL_MAX_DELAY);
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <DDS_ACC_init+0xe8>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b29a      	uxth	r2, r3
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	9302      	str	r3, [sp, #8]
 8000478:	2301      	movs	r3, #1
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <DDS_ACC_init+0xec>)
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2301      	movs	r3, #1
 8000482:	21d1      	movs	r1, #209	; 0xd1
 8000484:	4815      	ldr	r0, [pc, #84]	; (80004dc <DDS_ACC_init+0xe0>)
 8000486:	f001 f89b 	bl	80015c0 <HAL_I2C_Mem_Read>
 800048a:	4603      	mov	r3, r0
 800048c:	713b      	strb	r3, [r7, #4]
	if(errors==0)
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <DDS_ACC_init+0xec>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d118      	bne.n	80004c8 <DDS_ACC_init+0xcc>
 8000496:	e015      	b.n	80004c4 <DDS_ACC_init+0xc8>
	else if((pmu_status0==144) | (pmu_status0==16))
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <DDS_ACC_init+0xdc>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b90      	cmp	r3, #144	; 0x90
 800049e:	bf0c      	ite	eq
 80004a0:	2301      	moveq	r3, #1
 80004a2:	2300      	movne	r3, #0
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <DDS_ACC_init+0xdc>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b10      	cmp	r3, #16
 80004ac:	bf0c      	ite	eq
 80004ae:	2301      	moveq	r3, #1
 80004b0:	2300      	movne	r3, #0
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <DDS_ACC_init+0xc4>
		return HAL_OK;
 80004bc:	2300      	movs	r3, #0
 80004be:	e004      	b.n	80004ca <DDS_ACC_init+0xce>
		return HAL_ERROR;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e002      	b.n	80004ca <DDS_ACC_init+0xce>
		return HAL_OK;
 80004c4:	2300      	movs	r3, #0
 80004c6:	e000      	b.n	80004ca <DDS_ACC_init+0xce>
	else
		return HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000001 	.word	0x20000001
 80004d8:	20000005 	.word	0x20000005
 80004dc:	200000a0 	.word	0x200000a0
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000002 	.word	0x20000002
 80004e8:	20000006 	.word	0x20000006

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>

080004f6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af04      	add	r7, sp, #16
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	2301      	movs	r3, #1
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2301      	movs	r3, #1
 800051e:	2200      	movs	r2, #0
 8000520:	2178      	movs	r1, #120	; 0x78
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <ssd1306_WriteCommand+0x2c>)
 8000524:	f000 ff52 	bl	80013cc <HAL_I2C_Mem_Write>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200000a0 	.word	0x200000a0

08000534 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af04      	add	r7, sp, #16
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b29b      	uxth	r3, r3
 8000542:	f04f 32ff 	mov.w	r2, #4294967295
 8000546:	9202      	str	r2, [sp, #8]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	2240      	movs	r2, #64	; 0x40
 8000552:	2178      	movs	r1, #120	; 0x78
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ssd1306_WriteData+0x30>)
 8000556:	f000 ff39 	bl	80013cc <HAL_I2C_Mem_Write>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000a0 	.word	0x200000a0

08000568 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800056c:	f7ff ffc3 	bl	80004f6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000570:	2064      	movs	r0, #100	; 0x64
 8000572:	f000 fb43 	bl	8000bfc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f9d6 	bl	8000928 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800057c:	2020      	movs	r0, #32
 800057e:	f7ff ffc1 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff ffbe 	bl	8000504 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000588:	20b0      	movs	r0, #176	; 0xb0
 800058a:	f7ff ffbb 	bl	8000504 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800058e:	20c8      	movs	r0, #200	; 0xc8
 8000590:	f7ff ffb8 	bl	8000504 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ffb5 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800059a:	2010      	movs	r0, #16
 800059c:	f7ff ffb2 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005a0:	2040      	movs	r0, #64	; 0x40
 80005a2:	f7ff ffaf 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005a6:	20ff      	movs	r0, #255	; 0xff
 80005a8:	f000 f9aa 	bl	8000900 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005ac:	20a1      	movs	r0, #161	; 0xa1
 80005ae:	f7ff ffa9 	bl	8000504 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005b2:	20a6      	movs	r0, #166	; 0xa6
 80005b4:	f7ff ffa6 	bl	8000504 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005b8:	20a8      	movs	r0, #168	; 0xa8
 80005ba:	f7ff ffa3 	bl	8000504 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80005be:	203f      	movs	r0, #63	; 0x3f
 80005c0:	f7ff ffa0 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005c4:	20a4      	movs	r0, #164	; 0xa4
 80005c6:	f7ff ff9d 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005ca:	20d3      	movs	r0, #211	; 0xd3
 80005cc:	f7ff ff9a 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80005d0:	2000      	movs	r0, #0
 80005d2:	f7ff ff97 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80005d6:	20d5      	movs	r0, #213	; 0xd5
 80005d8:	f7ff ff94 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80005dc:	20f0      	movs	r0, #240	; 0xf0
 80005de:	f7ff ff91 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80005e2:	20d9      	movs	r0, #217	; 0xd9
 80005e4:	f7ff ff8e 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80005e8:	2022      	movs	r0, #34	; 0x22
 80005ea:	f7ff ff8b 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80005ee:	20da      	movs	r0, #218	; 0xda
 80005f0:	f7ff ff88 	bl	8000504 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80005f4:	2012      	movs	r0, #18
 80005f6:	f7ff ff85 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80005fa:	20db      	movs	r0, #219	; 0xdb
 80005fc:	f7ff ff82 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000600:	2020      	movs	r0, #32
 8000602:	f7ff ff7f 	bl	8000504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000606:	208d      	movs	r0, #141	; 0x8d
 8000608:	f7ff ff7c 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800060c:	2014      	movs	r0, #20
 800060e:	f7ff ff79 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000612:	2001      	movs	r0, #1
 8000614:	f000 f988 	bl	8000928 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f80f 	bl	800063c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800061e:	f000 f82f 	bl	8000680 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <ssd1306_Init+0xd0>)
 8000624:	2200      	movs	r2, #0
 8000626:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <ssd1306_Init+0xd0>)
 800062a:	2200      	movs	r2, #0
 800062c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800062e:	4b02      	ldr	r3, [pc, #8]	; (8000638 <ssd1306_Init+0xd0>)
 8000630:	2201      	movs	r2, #1
 8000632:	711a      	strb	r2, [r3, #4]
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200004f4 	.word	0x200004f4

0800063c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e00d      	b.n	8000668 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <ssd1306_Fill+0x1a>
 8000652:	2100      	movs	r1, #0
 8000654:	e000      	b.n	8000658 <ssd1306_Fill+0x1c>
 8000656:	21ff      	movs	r1, #255	; 0xff
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <ssd1306_Fill+0x40>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800066e:	d3ed      	bcc.n	800064c <ssd1306_Fill+0x10>
    }
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200000f4 	.word	0x200000f4

08000680 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e016      	b.n	80006ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	3b50      	subs	r3, #80	; 0x50
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff36 	bl	8000504 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff33 	bl	8000504 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800069e:	2010      	movs	r0, #16
 80006a0:	f7ff ff30 	bl	8000504 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	01db      	lsls	r3, r3, #7
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <ssd1306_UpdateScreen+0x4c>)
 80006aa:	4413      	add	r3, r2
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff40 	bl	8000534 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3301      	adds	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d9e5      	bls.n	800068c <ssd1306_UpdateScreen+0xc>
    }
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000f4 	.word	0x200000f4

080006d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	460b      	mov	r3, r1
 80006dc:	71bb      	strb	r3, [r7, #6]
 80006de:	4613      	mov	r3, r2
 80006e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db3d      	blt.n	8000766 <ssd1306_DrawPixel+0x96>
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	2b3f      	cmp	r3, #63	; 0x3f
 80006ee:	d83a      	bhi.n	8000766 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d11a      	bne.n	800072c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	b2d8      	uxtb	r0, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	01db      	lsls	r3, r3, #7
 8000702:	4413      	add	r3, r2
 8000704:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <ssd1306_DrawPixel+0xa0>)
 8000706:	5cd3      	ldrb	r3, [r2, r3]
 8000708:	b25a      	sxtb	r2, r3
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b259      	sxtb	r1, r3
 800071c:	79fa      	ldrb	r2, [r7, #7]
 800071e:	4603      	mov	r3, r0
 8000720:	01db      	lsls	r3, r3, #7
 8000722:	4413      	add	r3, r2
 8000724:	b2c9      	uxtb	r1, r1
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <ssd1306_DrawPixel+0xa0>)
 8000728:	54d1      	strb	r1, [r2, r3]
 800072a:	e01d      	b.n	8000768 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	b2d8      	uxtb	r0, r3
 8000734:	4603      	mov	r3, r0
 8000736:	01db      	lsls	r3, r3, #7
 8000738:	4413      	add	r3, r2
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <ssd1306_DrawPixel+0xa0>)
 800073c:	5cd3      	ldrb	r3, [r2, r3]
 800073e:	b25a      	sxtb	r2, r3
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	b259      	sxtb	r1, r3
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	4603      	mov	r3, r0
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4413      	add	r3, r2
 800075e:	b2c9      	uxtb	r1, r1
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <ssd1306_DrawPixel+0xa0>)
 8000762:	54d1      	strb	r1, [r2, r3]
 8000764:	e000      	b.n	8000768 <ssd1306_DrawPixel+0x98>
        return;
 8000766:	bf00      	nop
    }
}
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	200000f4 	.word	0x200000f4

08000774 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	4604      	mov	r4, r0
 800077c:	1d38      	adds	r0, r7, #4
 800077e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000782:	461a      	mov	r2, r3
 8000784:	4623      	mov	r3, r4
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	4613      	mov	r3, r2
 800078a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b1f      	cmp	r3, #31
 8000790:	d902      	bls.n	8000798 <ssd1306_WriteChar+0x24>
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b7e      	cmp	r3, #126	; 0x7e
 8000796:	d901      	bls.n	800079c <ssd1306_WriteChar+0x28>
        return 0;
 8000798:	2300      	movs	r3, #0
 800079a:	e06d      	b.n	8000878 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <ssd1306_WriteChar+0x10c>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	793b      	ldrb	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	2b80      	cmp	r3, #128	; 0x80
 80007a8:	dc06      	bgt.n	80007b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <ssd1306_WriteChar+0x10c>)
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	461a      	mov	r2, r3
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007b4:	2b40      	cmp	r3, #64	; 0x40
 80007b6:	dd01      	ble.n	80007bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e05d      	b.n	8000878 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	e04c      	b.n	800085c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	3b20      	subs	r3, #32
 80007c8:	7979      	ldrb	r1, [r7, #5]
 80007ca:	fb01 f303 	mul.w	r3, r1, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	440b      	add	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	e034      	b.n	800084c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d012      	beq.n	8000818 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <ssd1306_WriteChar+0x10c>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4413      	add	r3, r2
 80007fe:	b2d8      	uxtb	r0, r3
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <ssd1306_WriteChar+0x10c>)
 8000802:	885b      	ldrh	r3, [r3, #2]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4413      	add	r3, r2
 800080c:	b2db      	uxtb	r3, r3
 800080e:	7bba      	ldrb	r2, [r7, #14]
 8000810:	4619      	mov	r1, r3
 8000812:	f7ff ff5d 	bl	80006d0 <ssd1306_DrawPixel>
 8000816:	e016      	b.n	8000846 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <ssd1306_WriteChar+0x10c>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4413      	add	r3, r2
 8000824:	b2d8      	uxtb	r0, r3
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <ssd1306_WriteChar+0x10c>)
 8000828:	885b      	ldrh	r3, [r3, #2]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4413      	add	r3, r2
 8000832:	b2d9      	uxtb	r1, r3
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	f7ff ff45 	bl	80006d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	3301      	adds	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	793b      	ldrb	r3, [r7, #4]
 800084e:	461a      	mov	r2, r3
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	4293      	cmp	r3, r2
 8000854:	d3c5      	bcc.n	80007e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3301      	adds	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	797b      	ldrb	r3, [r7, #5]
 800085e:	461a      	mov	r2, r3
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	4293      	cmp	r3, r2
 8000864:	d3ad      	bcc.n	80007c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <ssd1306_WriteChar+0x10c>)
 8000868:	881a      	ldrh	r2, [r3, #0]
 800086a:	793b      	ldrb	r3, [r7, #4]
 800086c:	b29b      	uxth	r3, r3
 800086e:	4413      	add	r3, r2
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b03      	ldr	r3, [pc, #12]	; (8000880 <ssd1306_WriteChar+0x10c>)
 8000874:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3724      	adds	r7, #36	; 0x24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	200004f4 	.word	0x200004f4

08000884 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	1d38      	adds	r0, r7, #4
 800088e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000892:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000894:	e012      	b.n	80008bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	7818      	ldrb	r0, [r3, #0]
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	1d3a      	adds	r2, r7, #4
 800089e:	ca06      	ldmia	r2, {r1, r2}
 80008a0:	f7ff ff68 	bl	8000774 <ssd1306_WriteChar>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d002      	beq.n	80008b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	e008      	b.n	80008c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1e8      	bne.n	8000896 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	781b      	ldrb	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <ssd1306_SetCursor+0x2c>)
 80008e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <ssd1306_SetCursor+0x2c>)
 80008ee:	805a      	strh	r2, [r3, #2]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200004f4 	.word	0x200004f4

08000900 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800090a:	2381      	movs	r3, #129	; 0x81
 800090c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fdf7 	bl	8000504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fdf3 	bl	8000504 <ssd1306_WriteCommand>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000938:	23af      	movs	r3, #175	; 0xaf
 800093a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <ssd1306_SetDisplayOn+0x38>)
 800093e:	2201      	movs	r2, #1
 8000940:	715a      	strb	r2, [r3, #5]
 8000942:	e004      	b.n	800094e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000944:	23ae      	movs	r3, #174	; 0xae
 8000946:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <ssd1306_SetDisplayOn+0x38>)
 800094a:	2200      	movs	r2, #0
 800094c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fdd7 	bl	8000504 <ssd1306_WriteCommand>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200004f4 	.word	0x200004f4

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x40>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_MspInit+0x40>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x40>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x40>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_MspInit+0x40>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_MspInit+0x40>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_I2C_MspInit+0x70>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d123      	bne.n	8000a10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_I2C_MspInit+0x74>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <HAL_I2C_MspInit+0x74>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_I2C_MspInit+0x74>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e0:	23c0      	movs	r3, #192	; 0xc0
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <HAL_I2C_MspInit+0x78>)
 80009f4:	f000 fa0a 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_I2C_MspInit+0x74>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_I2C_MspInit+0x74>)
 80009fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a02:	61d3      	str	r3, [r2, #28]
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_I2C_MspInit+0x74>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 f8ab 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f001 ffa4 	bl	80029f0 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20005000 	.word	0x20005000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	200004fc 	.word	0x200004fc
 8000adc:	20000518 	.word	0x20000518

08000ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff fff8 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af2:	490c      	ldr	r1, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b08:	4c09      	ldr	r4, [pc, #36]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f001 ff71 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1a:	f7ff fb17 	bl	800014c <main>
  bx lr
 8000b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b28:	08004128 	.word	0x08004128
  ldr r2, =_sbss
 8000b2c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b30:	20000514 	.word	0x20000514

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x28>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f92b 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f808 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff ff06 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x54>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x58>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f935 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00e      	b.n	8000bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d80a      	bhi.n	8000bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 f90b 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <HAL_InitTick+0x5c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000014 	.word	0x20000014
 8000bbc:	2000001c 	.word	0x2000001c
 8000bc0:	20000018 	.word	0x20000018

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a03      	ldr	r2, [pc, #12]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	2000001c 	.word	0x2000001c
 8000be4:	20000500 	.word	0x20000500

08000be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <HAL_GetTick+0x10>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000500 	.word	0x20000500

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff fff0 	bl	8000be8 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffe0 	bl	8000be8 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000001c 	.word	0x2000001c

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff90 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff49 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff5e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff90 	bl	8000cfc <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5f 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffb0 	bl	8000d60 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e169      	b.n	80010f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e20:	2201      	movs	r2, #1
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8158 	bne.w	80010ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a9a      	ldr	r2, [pc, #616]	; (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d05e      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e48:	4a98      	ldr	r2, [pc, #608]	; (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d875      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e4e:	4a98      	ldr	r2, [pc, #608]	; (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d058      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e54:	4a96      	ldr	r2, [pc, #600]	; (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d86f      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e5a:	4a96      	ldr	r2, [pc, #600]	; (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d052      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e60:	4a94      	ldr	r2, [pc, #592]	; (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d869      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e66:	4a94      	ldr	r2, [pc, #592]	; (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d04c      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a92      	ldr	r2, [pc, #584]	; (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d863      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e72:	4a92      	ldr	r2, [pc, #584]	; (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d046      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e78:	4a90      	ldr	r2, [pc, #576]	; (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d85d      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d82a      	bhi.n	8000ed8 <HAL_GPIO_Init+0xcc>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d859      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <HAL_GPIO_Init+0x80>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef3 	.word	0x08000ef3
 8000e98:	08000f35 	.word	0x08000f35
 8000e9c:	08000f3b 	.word	0x08000f3b
 8000ea0:	08000f3b 	.word	0x08000f3b
 8000ea4:	08000f3b 	.word	0x08000f3b
 8000ea8:	08000f3b 	.word	0x08000f3b
 8000eac:	08000f3b 	.word	0x08000f3b
 8000eb0:	08000f3b 	.word	0x08000f3b
 8000eb4:	08000f3b 	.word	0x08000f3b
 8000eb8:	08000f3b 	.word	0x08000f3b
 8000ebc:	08000f3b 	.word	0x08000f3b
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f3b 	.word	0x08000f3b
 8000ec8:	08000f3b 	.word	0x08000f3b
 8000ecc:	08000f3b 	.word	0x08000f3b
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	4a79      	ldr	r2, [pc, #484]	; (80010c0 <HAL_GPIO_Init+0x2b4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e02c      	b.n	8000f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e029      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	3304      	adds	r3, #4
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e024      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e01f      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	330c      	adds	r3, #12
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e01a      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e013      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	611a      	str	r2, [r3, #16]
          break;
 8000f26:	e009      	b.n	8000f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	615a      	str	r2, [r3, #20]
          break;
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          break;
 8000f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2bff      	cmp	r3, #255	; 0xff
 8000f40:	d801      	bhi.n	8000f46 <HAL_GPIO_Init+0x13a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_Init+0x13e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d802      	bhi.n	8000f58 <HAL_GPIO_Init+0x14c>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x152>
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	210f      	movs	r1, #15
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	6a39      	ldr	r1, [r7, #32]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80b1 	beq.w	80010ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a4c      	ldr	r2, [pc, #304]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa4:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_GPIO_Init+0x2bc>)
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <HAL_GPIO_Init+0x2c4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3e      	ldr	r2, [pc, #248]	; (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	; (80010d8 <HAL_GPIO_Init+0x2cc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1e0>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100a:	492f      	ldr	r1, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x2bc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	492c      	ldr	r1, [pc, #176]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4928      	ldr	r1, [pc, #160]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	4922      	ldr	r1, [pc, #136]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	491e      	ldr	r1, [pc, #120]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4918      	ldr	r1, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4914      	ldr	r1, [pc, #80]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d021      	beq.n	80010e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	490e      	ldr	r1, [pc, #56]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e021      	b.n	80010ee <HAL_GPIO_Init+0x2e2>
 80010aa:	bf00      	nop
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10310000 	.word	0x10310000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10120000 	.word	0x10120000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae8e 	bne.w	8000e20 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	372c      	adds	r7, #44	; 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	611a      	str	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e12b      	b.n	80013ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fc1c 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2224      	movs	r2, #36	; 0x24
 8001174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011a8:	f001 fbf0 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a81      	ldr	r2, [pc, #516]	; (80013b8 <HAL_I2C_Init+0x274>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d807      	bhi.n	80011c8 <HAL_I2C_Init+0x84>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a80      	ldr	r2, [pc, #512]	; (80013bc <HAL_I2C_Init+0x278>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	bf94      	ite	ls
 80011c0:	2301      	movls	r3, #1
 80011c2:	2300      	movhi	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	e006      	b.n	80011d6 <HAL_I2C_Init+0x92>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a7d      	ldr	r2, [pc, #500]	; (80013c0 <HAL_I2C_Init+0x27c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf94      	ite	ls
 80011d0:	2301      	movls	r3, #1
 80011d2:	2300      	movhi	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0e7      	b.n	80013ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4a78      	ldr	r2, [pc, #480]	; (80013c4 <HAL_I2C_Init+0x280>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9b      	lsrs	r3, r3, #18
 80011e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a6a      	ldr	r2, [pc, #424]	; (80013b8 <HAL_I2C_Init+0x274>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d802      	bhi.n	8001218 <HAL_I2C_Init+0xd4>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	e009      	b.n	800122c <HAL_I2C_Init+0xe8>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	4a69      	ldr	r2, [pc, #420]	; (80013c8 <HAL_I2C_Init+0x284>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	099b      	lsrs	r3, r3, #6
 800122a:	3301      	adds	r3, #1
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	430b      	orrs	r3, r1
 8001232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800123e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	495c      	ldr	r1, [pc, #368]	; (80013b8 <HAL_I2C_Init+0x274>)
 8001248:	428b      	cmp	r3, r1
 800124a:	d819      	bhi.n	8001280 <HAL_I2C_Init+0x13c>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e59      	subs	r1, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fbb1 f3f3 	udiv	r3, r1, r3
 800125a:	1c59      	adds	r1, r3, #1
 800125c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001260:	400b      	ands	r3, r1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00a      	beq.n	800127c <HAL_I2C_Init+0x138>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1e59      	subs	r1, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fbb1 f3f3 	udiv	r3, r1, r3
 8001274:	3301      	adds	r3, #1
 8001276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127a:	e051      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 800127c:	2304      	movs	r3, #4
 800127e:	e04f      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d111      	bne.n	80012ac <HAL_I2C_Init+0x168>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1e58      	subs	r0, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	440b      	add	r3, r1
 8001296:	fbb0 f3f3 	udiv	r3, r0, r3
 800129a:	3301      	adds	r3, #1
 800129c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e012      	b.n	80012d2 <HAL_I2C_Init+0x18e>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	0099      	lsls	r1, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Init+0x196>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e022      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10e      	bne.n	8001300 <HAL_I2C_Init+0x1bc>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1e58      	subs	r0, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6859      	ldr	r1, [r3, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	440b      	add	r3, r1
 80012f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fe:	e00f      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1e58      	subs	r0, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	0099      	lsls	r1, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	fbb0 f3f3 	udiv	r3, r0, r3
 8001316:	3301      	adds	r3, #1
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	6809      	ldr	r1, [r1, #0]
 8001324:	4313      	orrs	r3, r2
 8001326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800134e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6911      	ldr	r1, [r2, #16]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68d2      	ldr	r2, [r2, #12]
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	430b      	orrs	r3, r1
 8001362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	000186a0 	.word	0x000186a0
 80013bc:	001e847f 	.word	0x001e847f
 80013c0:	003d08ff 	.word	0x003d08ff
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	10624dd3 	.word	0x10624dd3

080013cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	4608      	mov	r0, r1
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	817b      	strh	r3, [r7, #10]
 80013de:	460b      	mov	r3, r1
 80013e0:	813b      	strh	r3, [r7, #8]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013e6:	f7ff fbff 	bl	8000be8 <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	f040 80d9 	bne.w	80015ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2319      	movs	r3, #25
 8001400:	2201      	movs	r2, #1
 8001402:	496d      	ldr	r1, [pc, #436]	; (80015b8 <HAL_I2C_Mem_Write+0x1ec>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fcc1 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001410:	2302      	movs	r3, #2
 8001412:	e0cc      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Mem_Write+0x56>
 800141e:	2302      	movs	r3, #2
 8001420:	e0c5      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b01      	cmp	r3, #1
 8001436:	d007      	beq.n	8001448 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2221      	movs	r2, #33	; 0x21
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a3a      	ldr	r2, [r7, #32]
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <HAL_I2C_Mem_Write+0x1f0>)
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800148a:	88f8      	ldrh	r0, [r7, #6]
 800148c:	893a      	ldrh	r2, [r7, #8]
 800148e:	8979      	ldrh	r1, [r7, #10]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4603      	mov	r3, r0
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 faf8 	bl	8001a90 <I2C_RequestMemoryWrite>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d052      	beq.n	800154c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e081      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 fd86 	bl	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00d      	beq.n	80014d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06b      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b04      	cmp	r3, #4
 8001512:	d11b      	bne.n	800154c <HAL_I2C_Mem_Write+0x180>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	2b00      	cmp	r3, #0
 800151a:	d017      	beq.n	800154c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1aa      	bne.n	80014aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fd79 	bl	8002050 <I2C_WaitOnBTFFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2b04      	cmp	r3, #4
 800156a:	d107      	bne.n	800157c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e016      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800158e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2220      	movs	r2, #32
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015ac:	2302      	movs	r3, #2
  }
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	00100002 	.word	0x00100002
 80015bc:	ffff0000 	.word	0xffff0000

080015c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	460b      	mov	r3, r1
 80015d4:	813b      	strh	r3, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015de:	f7ff fb03 	bl	8000be8 <HAL_GetTick>
 80015e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	f040 8244 	bne.w	8001a7a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2319      	movs	r3, #25
 80015f8:	2201      	movs	r2, #1
 80015fa:	4982      	ldr	r1, [pc, #520]	; (8001804 <HAL_I2C_Mem_Read+0x244>)
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fbc5 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001608:	2302      	movs	r3, #2
 800160a:	e237      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_I2C_Mem_Read+0x5a>
 8001616:	2302      	movs	r3, #2
 8001618:	e230      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d007      	beq.n	8001640 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2222      	movs	r2, #34	; 0x22
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a62      	ldr	r2, [pc, #392]	; (8001808 <HAL_I2C_Mem_Read+0x248>)
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001682:	88f8      	ldrh	r0, [r7, #6]
 8001684:	893a      	ldrh	r2, [r7, #8]
 8001686:	8979      	ldrh	r1, [r7, #10]
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4603      	mov	r3, r0
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa92 	bl	8001bbc <I2C_RequestMemoryRead>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e1ec      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d113      	bne.n	80016d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e1c0      	b.n	8001a54 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d11e      	bne.n	8001718 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016ea:	b672      	cpsid	i
}
 80016ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001712:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001714:	b662      	cpsie	i
}
 8001716:	e035      	b.n	8001784 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171c:	2b02      	cmp	r3, #2
 800171e:	d11e      	bne.n	800175e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001758:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800175a:	b662      	cpsie	i
}
 800175c:	e012      	b.n	8001784 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800176c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001784:	e166      	b.n	8001a54 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	2b03      	cmp	r3, #3
 800178c:	f200 811f 	bhi.w	80019ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	2b01      	cmp	r3, #1
 8001796:	d123      	bne.n	80017e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fc9f 	bl	80020e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e167      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017de:	e139      	b.n	8001a54 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d152      	bne.n	800188e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ee:	2200      	movs	r2, #0
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <HAL_I2C_Mem_Read+0x24c>)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 faca 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e13c      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
 8001802:	bf00      	nop
 8001804:	00100002 	.word	0x00100002
 8001808:	ffff0000 	.word	0xffff0000
 800180c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001856:	b662      	cpsie	i
}
 8001858:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800188c:	e0e2      	b.n	8001a54 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001894:	2200      	movs	r2, #0
 8001896:	497b      	ldr	r1, [pc, #492]	; (8001a84 <HAL_I2C_Mem_Read+0x4c4>)
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fa77 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0e9      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80018ee:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_I2C_Mem_Read+0x4c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	4a65      	ldr	r2, [pc, #404]	; (8001a8c <HAL_I2C_Mem_Read+0x4cc>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a1a      	lsrs	r2, r3, #8
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00da      	lsls	r2, r3, #3
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	3b01      	subs	r3, #1
 800190c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d118      	bne.n	8001946 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001936:	b662      	cpsie	i
}
 8001938:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e09a      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d1d9      	bne.n	8001908 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001996:	b662      	cpsie	i
}
 8001998:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019cc:	e042      	b.n	8001a54 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fb84 	bl	80020e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e04c      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d118      	bne.n	8001a54 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f47f ae94 	bne.w	8001786 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	00010004 	.word	0x00010004
 8001a88:	20000014 	.word	0x20000014
 8001a8c:	14f8b589 	.word	0x14f8b589

08001a90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	817b      	strh	r3, [r7, #10]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	813b      	strh	r3, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f960 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae0:	d103      	bne.n	8001aea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e05f      	b.n	8001bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aee:	897b      	ldrh	r3, [r7, #10]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	6a3a      	ldr	r2, [r7, #32]
 8001b02:	492d      	ldr	r1, [pc, #180]	; (8001bb8 <I2C_RequestMemoryWrite+0x128>)
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f9bb 	bl	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e04c      	b.n	8001bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	6a39      	ldr	r1, [r7, #32]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa46 	bl	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d107      	bne.n	8001b52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e02b      	b.n	8001bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b5c:	893b      	ldrh	r3, [r7, #8]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	e021      	b.n	8001bac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b68:	893b      	ldrh	r3, [r7, #8]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	6a39      	ldr	r1, [r7, #32]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fa20 	bl	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d107      	bne.n	8001b9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e005      	b.n	8001bae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ba2:	893b      	ldrh	r3, [r7, #8]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	00010002 	.word	0x00010002

08001bbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	817b      	strh	r3, [r7, #10]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	813b      	strh	r3, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001be4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f8c2 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1c:	d103      	bne.n	8001c26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0aa      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c2a:	897b      	ldrh	r3, [r7, #10]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	4952      	ldr	r1, [pc, #328]	; (8001d88 <I2C_RequestMemoryRead+0x1cc>)
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f91d 	bl	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e097      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f9a8 	bl	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d107      	bne.n	8001c8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e076      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c98:	893b      	ldrh	r3, [r7, #8]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	e021      	b.n	8001ce8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ca4:	893b      	ldrh	r3, [r7, #8]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f982 	bl	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00d      	beq.n	8001cde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d107      	bne.n	8001cda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e050      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cde:	893b      	ldrh	r3, [r7, #8]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	6a39      	ldr	r1, [r7, #32]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f967 	bl	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d107      	bne.n	8001d10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e035      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f82b 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d4a:	d103      	bne.n	8001d54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e013      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d58:	897b      	ldrh	r3, [r7, #10]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	6a3a      	ldr	r2, [r7, #32]
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <I2C_RequestMemoryRead+0x1cc>)
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f886 	bl	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	00010002 	.word	0x00010002

08001d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9c:	e048      	b.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d044      	beq.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da6:	f7fe ff1f 	bl	8000be8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d302      	bcc.n	8001dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d139      	bne.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0c1b      	lsrs	r3, r3, #16
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10d      	bne.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	e00c      	b.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	43da      	mvns	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4013      	ands	r3, r2
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d116      	bne.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e023      	b.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10d      	bne.n	8001e56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	43da      	mvns	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	4013      	ands	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	e00c      	b.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4013      	ands	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d093      	beq.n	8001d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e8e:	e071      	b.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9e:	d123      	bne.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e067      	b.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d041      	beq.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef0:	f7fe fe7a 	bl	8000be8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d302      	bcc.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d136      	bne.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10c      	bne.n	8001f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	e00b      	b.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e021      	b.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	0c1b      	lsrs	r3, r3, #16
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10c      	bne.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e00b      	b.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f af6d 	bne.w	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fcc:	e034      	b.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f8e3 	bl	800219a <I2C_IsAcknowledgeFailed>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e034      	b.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d028      	beq.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	f7fe fdff 	bl	8000be8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d302      	bcc.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11d      	bne.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b80      	cmp	r3, #128	; 0x80
 8002008:	d016      	beq.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e007      	b.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d1c3      	bne.n	8001fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800205c:	e034      	b.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f89b 	bl	800219a <I2C_IsAcknowledgeFailed>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e034      	b.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d028      	beq.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7fe fdb7 	bl	8000be8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d11d      	bne.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d016      	beq.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e007      	b.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d1c3      	bne.n	800205e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ec:	e049      	b.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d119      	bne.n	8002130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0210 	mvn.w	r2, #16
 8002104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e030      	b.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002130:	f7fe fd5a 	bl	8000be8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d302      	bcc.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11d      	bne.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d016      	beq.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e007      	b.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d1ae      	bne.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b0:	d11b      	bne.n	80021ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e272      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e24c      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fc88 	bl	8000be8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fc84 	bl	8000be8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e200      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc74 	bl	8000be8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fc70 	bl	8000be8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1ec      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c0      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fc29 	bl	8000be8 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fc25 	bl	8000be8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc08 	bl	8000be8 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fc04 	bl	8000be8 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e180      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7fe fbe8 	bl	8000be8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fbe4 	bl	8000be8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e160      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 faba 	bl	80029b4 <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fbce 	bl	8000be8 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fbca 	bl	8000be8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e146      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b92      	ldr	r3, [pc, #584]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a87      	ldr	r2, [pc, #540]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b85      	ldr	r3, [pc, #532]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7e      	ldr	r2, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fb8b 	bl	8000be8 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe fb87 	bl	8000be8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e103      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a69      	ldr	r2, [pc, #420]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a60      	ldr	r2, [pc, #384]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a5d      	ldr	r2, [pc, #372]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a5a      	ldr	r2, [pc, #360]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b58      	ldr	r3, [pc, #352]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a57      	ldr	r2, [pc, #348]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fb3b 	bl	8000be8 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fb37 	bl	8000be8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0b1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fb25 	bl	8000be8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fb21 	bl	8000be8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e09b      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe faf5 	bl	8000be8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe faf1 	bl	8000be8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e06d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4921      	ldr	r1, [pc, #132]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	491b      	ldr	r1, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fac5 	bl	8000be8 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fac1 	bl	8000be8 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e035      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe faae 	bl	8000be8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe faaa 	bl	8000be8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e026      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e01e      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e019      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x500>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4965      	ldr	r1, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe f9fc 	bl	8000be8 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe f9f8 	bl	8000be8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f95a 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080040c0 	.word	0x080040c0
 80028c8:	20000014 	.word	0x20000014
 80028cc:	20000018 	.word	0x20000018

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x30>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x36>
 80028fe:	e027      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002902:	613b      	str	r3, [r7, #16]
      break;
 8002904:	e027      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0c9b      	lsrs	r3, r3, #18
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0c5b      	lsrs	r3, r3, #17
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	4a11      	ldr	r2, [pc, #68]	; (8002970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e004      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	613b      	str	r3, [r7, #16]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	693b      	ldr	r3, [r7, #16]
}
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	080040d8 	.word	0x080040d8
 8002970:	080040e8 	.word	0x080040e8
 8002974:	003d0900 	.word	0x003d0900

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <HAL_RCC_GetHCLKFreq+0x10>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000014 	.word	0x20000014

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff2 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	080040d0 	.word	0x080040d0

080029b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <RCC_Delay+0x34>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <RCC_Delay+0x38>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a5b      	lsrs	r3, r3, #9
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d0:	bf00      	nop
  }
  while (Delay --);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f9      	bne.n	80029d0 <RCC_Delay+0x1c>
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000014 	.word	0x20000014
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <__errno>:
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <__errno+0x8>)
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000020 	.word	0x20000020

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4d0c      	ldr	r5, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	f000 fc9c 	bl	8003348 <_init>
 8002a10:	2600      	movs	r6, #0
 8002a12:	4d0a      	ldr	r5, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08004120 	.word	0x08004120
 8002a38:	08004120 	.word	0x08004120
 8002a3c:	08004120 	.word	0x08004120
 8002a40:	08004124 	.word	0x08004124

08002a44 <memcpy>:
 8002a44:	440a      	add	r2, r1
 8002a46:	4291      	cmp	r1, r2
 8002a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a4c:	d100      	bne.n	8002a50 <memcpy+0xc>
 8002a4e:	4770      	bx	lr
 8002a50:	b510      	push	{r4, lr}
 8002a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a56:	4291      	cmp	r1, r2
 8002a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a5c:	d1f9      	bne.n	8002a52 <memcpy+0xe>
 8002a5e:	bd10      	pop	{r4, pc}

08002a60 <memmove>:
 8002a60:	4288      	cmp	r0, r1
 8002a62:	b510      	push	{r4, lr}
 8002a64:	eb01 0402 	add.w	r4, r1, r2
 8002a68:	d902      	bls.n	8002a70 <memmove+0x10>
 8002a6a:	4284      	cmp	r4, r0
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	d807      	bhi.n	8002a80 <memmove+0x20>
 8002a70:	1e43      	subs	r3, r0, #1
 8002a72:	42a1      	cmp	r1, r4
 8002a74:	d008      	beq.n	8002a88 <memmove+0x28>
 8002a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a7e:	e7f8      	b.n	8002a72 <memmove+0x12>
 8002a80:	4601      	mov	r1, r0
 8002a82:	4402      	add	r2, r0
 8002a84:	428a      	cmp	r2, r1
 8002a86:	d100      	bne.n	8002a8a <memmove+0x2a>
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a92:	e7f7      	b.n	8002a84 <memmove+0x24>

08002a94 <memset>:
 8002a94:	4603      	mov	r3, r0
 8002a96:	4402      	add	r2, r0
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <memset+0xa>
 8002a9c:	4770      	bx	lr
 8002a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa2:	e7f9      	b.n	8002a98 <memset+0x4>

08002aa4 <siprintf>:
 8002aa4:	b40e      	push	{r1, r2, r3}
 8002aa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aaa:	b500      	push	{lr}
 8002aac:	b09c      	sub	sp, #112	; 0x70
 8002aae:	ab1d      	add	r3, sp, #116	; 0x74
 8002ab0:	9002      	str	r0, [sp, #8]
 8002ab2:	9006      	str	r0, [sp, #24]
 8002ab4:	9107      	str	r1, [sp, #28]
 8002ab6:	9104      	str	r1, [sp, #16]
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <siprintf+0x38>)
 8002aba:	4909      	ldr	r1, [pc, #36]	; (8002ae0 <siprintf+0x3c>)
 8002abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac0:	9105      	str	r1, [sp, #20]
 8002ac2:	6800      	ldr	r0, [r0, #0]
 8002ac4:	a902      	add	r1, sp, #8
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	f000 f868 	bl	8002b9c <_svfiprintf_r>
 8002acc:	2200      	movs	r2, #0
 8002ace:	9b02      	ldr	r3, [sp, #8]
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	b01c      	add	sp, #112	; 0x70
 8002ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad8:	b003      	add	sp, #12
 8002ada:	4770      	bx	lr
 8002adc:	20000020 	.word	0x20000020
 8002ae0:	ffff0208 	.word	0xffff0208

08002ae4 <__ssputs_r>:
 8002ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae8:	688e      	ldr	r6, [r1, #8]
 8002aea:	4682      	mov	sl, r0
 8002aec:	429e      	cmp	r6, r3
 8002aee:	460c      	mov	r4, r1
 8002af0:	4690      	mov	r8, r2
 8002af2:	461f      	mov	r7, r3
 8002af4:	d838      	bhi.n	8002b68 <__ssputs_r+0x84>
 8002af6:	898a      	ldrh	r2, [r1, #12]
 8002af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002afc:	d032      	beq.n	8002b64 <__ssputs_r+0x80>
 8002afe:	6825      	ldr	r5, [r4, #0]
 8002b00:	6909      	ldr	r1, [r1, #16]
 8002b02:	3301      	adds	r3, #1
 8002b04:	eba5 0901 	sub.w	r9, r5, r1
 8002b08:	6965      	ldr	r5, [r4, #20]
 8002b0a:	444b      	add	r3, r9
 8002b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b14:	106d      	asrs	r5, r5, #1
 8002b16:	429d      	cmp	r5, r3
 8002b18:	bf38      	it	cc
 8002b1a:	461d      	movcc	r5, r3
 8002b1c:	0553      	lsls	r3, r2, #21
 8002b1e:	d531      	bpl.n	8002b84 <__ssputs_r+0xa0>
 8002b20:	4629      	mov	r1, r5
 8002b22:	f000 fb47 	bl	80031b4 <_malloc_r>
 8002b26:	4606      	mov	r6, r0
 8002b28:	b950      	cbnz	r0, 8002b40 <__ssputs_r+0x5c>
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f8ca 3000 	str.w	r3, [sl]
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3a:	81a3      	strh	r3, [r4, #12]
 8002b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b40:	464a      	mov	r2, r9
 8002b42:	6921      	ldr	r1, [r4, #16]
 8002b44:	f7ff ff7e 	bl	8002a44 <memcpy>
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	6126      	str	r6, [r4, #16]
 8002b56:	444e      	add	r6, r9
 8002b58:	6026      	str	r6, [r4, #0]
 8002b5a:	463e      	mov	r6, r7
 8002b5c:	6165      	str	r5, [r4, #20]
 8002b5e:	eba5 0509 	sub.w	r5, r5, r9
 8002b62:	60a5      	str	r5, [r4, #8]
 8002b64:	42be      	cmp	r6, r7
 8002b66:	d900      	bls.n	8002b6a <__ssputs_r+0x86>
 8002b68:	463e      	mov	r6, r7
 8002b6a:	4632      	mov	r2, r6
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	6820      	ldr	r0, [r4, #0]
 8002b70:	f7ff ff76 	bl	8002a60 <memmove>
 8002b74:	68a3      	ldr	r3, [r4, #8]
 8002b76:	2000      	movs	r0, #0
 8002b78:	1b9b      	subs	r3, r3, r6
 8002b7a:	60a3      	str	r3, [r4, #8]
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	4433      	add	r3, r6
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	e7db      	b.n	8002b3c <__ssputs_r+0x58>
 8002b84:	462a      	mov	r2, r5
 8002b86:	f000 fb89 	bl	800329c <_realloc_r>
 8002b8a:	4606      	mov	r6, r0
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d1e1      	bne.n	8002b54 <__ssputs_r+0x70>
 8002b90:	4650      	mov	r0, sl
 8002b92:	6921      	ldr	r1, [r4, #16]
 8002b94:	f000 faa6 	bl	80030e4 <_free_r>
 8002b98:	e7c7      	b.n	8002b2a <__ssputs_r+0x46>
	...

08002b9c <_svfiprintf_r>:
 8002b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	898b      	ldrh	r3, [r1, #12]
 8002ba4:	4607      	mov	r7, r0
 8002ba6:	061b      	lsls	r3, r3, #24
 8002ba8:	460d      	mov	r5, r1
 8002baa:	4614      	mov	r4, r2
 8002bac:	b09d      	sub	sp, #116	; 0x74
 8002bae:	d50e      	bpl.n	8002bce <_svfiprintf_r+0x32>
 8002bb0:	690b      	ldr	r3, [r1, #16]
 8002bb2:	b963      	cbnz	r3, 8002bce <_svfiprintf_r+0x32>
 8002bb4:	2140      	movs	r1, #64	; 0x40
 8002bb6:	f000 fafd 	bl	80031b4 <_malloc_r>
 8002bba:	6028      	str	r0, [r5, #0]
 8002bbc:	6128      	str	r0, [r5, #16]
 8002bbe:	b920      	cbnz	r0, 8002bca <_svfiprintf_r+0x2e>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	e0d1      	b.n	8002d6e <_svfiprintf_r+0x1d2>
 8002bca:	2340      	movs	r3, #64	; 0x40
 8002bcc:	616b      	str	r3, [r5, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bd8:	2330      	movs	r3, #48	; 0x30
 8002bda:	f04f 0901 	mov.w	r9, #1
 8002bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8002be2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d88 <_svfiprintf_r+0x1ec>
 8002be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bea:	4623      	mov	r3, r4
 8002bec:	469a      	mov	sl, r3
 8002bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bf2:	b10a      	cbz	r2, 8002bf8 <_svfiprintf_r+0x5c>
 8002bf4:	2a25      	cmp	r2, #37	; 0x25
 8002bf6:	d1f9      	bne.n	8002bec <_svfiprintf_r+0x50>
 8002bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8002bfc:	d00b      	beq.n	8002c16 <_svfiprintf_r+0x7a>
 8002bfe:	465b      	mov	r3, fp
 8002c00:	4622      	mov	r2, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	4638      	mov	r0, r7
 8002c06:	f7ff ff6d 	bl	8002ae4 <__ssputs_r>
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	f000 80aa 	beq.w	8002d64 <_svfiprintf_r+0x1c8>
 8002c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c12:	445a      	add	r2, fp
 8002c14:	9209      	str	r2, [sp, #36]	; 0x24
 8002c16:	f89a 3000 	ldrb.w	r3, [sl]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80a2 	beq.w	8002d64 <_svfiprintf_r+0x1c8>
 8002c20:	2300      	movs	r3, #0
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c2a:	f10a 0a01 	add.w	sl, sl, #1
 8002c2e:	9304      	str	r3, [sp, #16]
 8002c30:	9307      	str	r3, [sp, #28]
 8002c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c36:	931a      	str	r3, [sp, #104]	; 0x68
 8002c38:	4654      	mov	r4, sl
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c40:	4851      	ldr	r0, [pc, #324]	; (8002d88 <_svfiprintf_r+0x1ec>)
 8002c42:	f000 fa41 	bl	80030c8 <memchr>
 8002c46:	9a04      	ldr	r2, [sp, #16]
 8002c48:	b9d8      	cbnz	r0, 8002c82 <_svfiprintf_r+0xe6>
 8002c4a:	06d0      	lsls	r0, r2, #27
 8002c4c:	bf44      	itt	mi
 8002c4e:	2320      	movmi	r3, #32
 8002c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c54:	0711      	lsls	r1, r2, #28
 8002c56:	bf44      	itt	mi
 8002c58:	232b      	movmi	r3, #43	; 0x2b
 8002c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c62:	2b2a      	cmp	r3, #42	; 0x2a
 8002c64:	d015      	beq.n	8002c92 <_svfiprintf_r+0xf6>
 8002c66:	4654      	mov	r4, sl
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f04f 0c0a 	mov.w	ip, #10
 8002c6e:	9a07      	ldr	r2, [sp, #28]
 8002c70:	4621      	mov	r1, r4
 8002c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c76:	3b30      	subs	r3, #48	; 0x30
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d94e      	bls.n	8002d1a <_svfiprintf_r+0x17e>
 8002c7c:	b1b0      	cbz	r0, 8002cac <_svfiprintf_r+0x110>
 8002c7e:	9207      	str	r2, [sp, #28]
 8002c80:	e014      	b.n	8002cac <_svfiprintf_r+0x110>
 8002c82:	eba0 0308 	sub.w	r3, r0, r8
 8002c86:	fa09 f303 	lsl.w	r3, r9, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	46a2      	mov	sl, r4
 8002c8e:	9304      	str	r3, [sp, #16]
 8002c90:	e7d2      	b.n	8002c38 <_svfiprintf_r+0x9c>
 8002c92:	9b03      	ldr	r3, [sp, #12]
 8002c94:	1d19      	adds	r1, r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	9103      	str	r1, [sp, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bfbb      	ittet	lt
 8002c9e:	425b      	neglt	r3, r3
 8002ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ca4:	9307      	strge	r3, [sp, #28]
 8002ca6:	9307      	strlt	r3, [sp, #28]
 8002ca8:	bfb8      	it	lt
 8002caa:	9204      	strlt	r2, [sp, #16]
 8002cac:	7823      	ldrb	r3, [r4, #0]
 8002cae:	2b2e      	cmp	r3, #46	; 0x2e
 8002cb0:	d10c      	bne.n	8002ccc <_svfiprintf_r+0x130>
 8002cb2:	7863      	ldrb	r3, [r4, #1]
 8002cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb6:	d135      	bne.n	8002d24 <_svfiprintf_r+0x188>
 8002cb8:	9b03      	ldr	r3, [sp, #12]
 8002cba:	3402      	adds	r4, #2
 8002cbc:	1d1a      	adds	r2, r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	9203      	str	r2, [sp, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bfb8      	it	lt
 8002cc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cca:	9305      	str	r3, [sp, #20]
 8002ccc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002d8c <_svfiprintf_r+0x1f0>
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	4650      	mov	r0, sl
 8002cd4:	7821      	ldrb	r1, [r4, #0]
 8002cd6:	f000 f9f7 	bl	80030c8 <memchr>
 8002cda:	b140      	cbz	r0, 8002cee <_svfiprintf_r+0x152>
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	eba0 000a 	sub.w	r0, r0, sl
 8002ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ce6:	9b04      	ldr	r3, [sp, #16]
 8002ce8:	3401      	adds	r4, #1
 8002cea:	4303      	orrs	r3, r0
 8002cec:	9304      	str	r3, [sp, #16]
 8002cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf2:	2206      	movs	r2, #6
 8002cf4:	4826      	ldr	r0, [pc, #152]	; (8002d90 <_svfiprintf_r+0x1f4>)
 8002cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cfa:	f000 f9e5 	bl	80030c8 <memchr>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d038      	beq.n	8002d74 <_svfiprintf_r+0x1d8>
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <_svfiprintf_r+0x1f8>)
 8002d04:	bb1b      	cbnz	r3, 8002d4e <_svfiprintf_r+0x1b2>
 8002d06:	9b03      	ldr	r3, [sp, #12]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	f023 0307 	bic.w	r3, r3, #7
 8002d0e:	3308      	adds	r3, #8
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d14:	4433      	add	r3, r6
 8002d16:	9309      	str	r3, [sp, #36]	; 0x24
 8002d18:	e767      	b.n	8002bea <_svfiprintf_r+0x4e>
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d22:	e7a5      	b.n	8002c70 <_svfiprintf_r+0xd4>
 8002d24:	2300      	movs	r3, #0
 8002d26:	f04f 0c0a 	mov.w	ip, #10
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	3401      	adds	r4, #1
 8002d2e:	9305      	str	r3, [sp, #20]
 8002d30:	4620      	mov	r0, r4
 8002d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d36:	3a30      	subs	r2, #48	; 0x30
 8002d38:	2a09      	cmp	r2, #9
 8002d3a:	d903      	bls.n	8002d44 <_svfiprintf_r+0x1a8>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0c5      	beq.n	8002ccc <_svfiprintf_r+0x130>
 8002d40:	9105      	str	r1, [sp, #20]
 8002d42:	e7c3      	b.n	8002ccc <_svfiprintf_r+0x130>
 8002d44:	4604      	mov	r4, r0
 8002d46:	2301      	movs	r3, #1
 8002d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d4c:	e7f0      	b.n	8002d30 <_svfiprintf_r+0x194>
 8002d4e:	ab03      	add	r3, sp, #12
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	462a      	mov	r2, r5
 8002d54:	4638      	mov	r0, r7
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_svfiprintf_r+0x1fc>)
 8002d58:	a904      	add	r1, sp, #16
 8002d5a:	f3af 8000 	nop.w
 8002d5e:	1c42      	adds	r2, r0, #1
 8002d60:	4606      	mov	r6, r0
 8002d62:	d1d6      	bne.n	8002d12 <_svfiprintf_r+0x176>
 8002d64:	89ab      	ldrh	r3, [r5, #12]
 8002d66:	065b      	lsls	r3, r3, #25
 8002d68:	f53f af2c 	bmi.w	8002bc4 <_svfiprintf_r+0x28>
 8002d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d6e:	b01d      	add	sp, #116	; 0x74
 8002d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d74:	ab03      	add	r3, sp, #12
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	462a      	mov	r2, r5
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <_svfiprintf_r+0x1fc>)
 8002d7e:	a904      	add	r1, sp, #16
 8002d80:	f000 f87c 	bl	8002e7c <_printf_i>
 8002d84:	e7eb      	b.n	8002d5e <_svfiprintf_r+0x1c2>
 8002d86:	bf00      	nop
 8002d88:	080040ea 	.word	0x080040ea
 8002d8c:	080040f0 	.word	0x080040f0
 8002d90:	080040f4 	.word	0x080040f4
 8002d94:	00000000 	.word	0x00000000
 8002d98:	08002ae5 	.word	0x08002ae5

08002d9c <_printf_common>:
 8002d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da0:	4616      	mov	r6, r2
 8002da2:	4699      	mov	r9, r3
 8002da4:	688a      	ldr	r2, [r1, #8]
 8002da6:	690b      	ldr	r3, [r1, #16]
 8002da8:	4607      	mov	r7, r0
 8002daa:	4293      	cmp	r3, r2
 8002dac:	bfb8      	it	lt
 8002dae:	4613      	movlt	r3, r2
 8002db0:	6033      	str	r3, [r6, #0]
 8002db2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002db6:	460c      	mov	r4, r1
 8002db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dbc:	b10a      	cbz	r2, 8002dc2 <_printf_common+0x26>
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	6033      	str	r3, [r6, #0]
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	0699      	lsls	r1, r3, #26
 8002dc6:	bf42      	ittt	mi
 8002dc8:	6833      	ldrmi	r3, [r6, #0]
 8002dca:	3302      	addmi	r3, #2
 8002dcc:	6033      	strmi	r3, [r6, #0]
 8002dce:	6825      	ldr	r5, [r4, #0]
 8002dd0:	f015 0506 	ands.w	r5, r5, #6
 8002dd4:	d106      	bne.n	8002de4 <_printf_common+0x48>
 8002dd6:	f104 0a19 	add.w	sl, r4, #25
 8002dda:	68e3      	ldr	r3, [r4, #12]
 8002ddc:	6832      	ldr	r2, [r6, #0]
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	42ab      	cmp	r3, r5
 8002de2:	dc28      	bgt.n	8002e36 <_printf_common+0x9a>
 8002de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002de8:	1e13      	subs	r3, r2, #0
 8002dea:	6822      	ldr	r2, [r4, #0]
 8002dec:	bf18      	it	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	0692      	lsls	r2, r2, #26
 8002df2:	d42d      	bmi.n	8002e50 <_printf_common+0xb4>
 8002df4:	4649      	mov	r1, r9
 8002df6:	4638      	mov	r0, r7
 8002df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dfc:	47c0      	blx	r8
 8002dfe:	3001      	adds	r0, #1
 8002e00:	d020      	beq.n	8002e44 <_printf_common+0xa8>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	68e5      	ldr	r5, [r4, #12]
 8002e06:	f003 0306 	and.w	r3, r3, #6
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf18      	it	ne
 8002e0e:	2500      	movne	r5, #0
 8002e10:	6832      	ldr	r2, [r6, #0]
 8002e12:	f04f 0600 	mov.w	r6, #0
 8002e16:	68a3      	ldr	r3, [r4, #8]
 8002e18:	bf08      	it	eq
 8002e1a:	1aad      	subeq	r5, r5, r2
 8002e1c:	6922      	ldr	r2, [r4, #16]
 8002e1e:	bf08      	it	eq
 8002e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bfc4      	itt	gt
 8002e28:	1a9b      	subgt	r3, r3, r2
 8002e2a:	18ed      	addgt	r5, r5, r3
 8002e2c:	341a      	adds	r4, #26
 8002e2e:	42b5      	cmp	r5, r6
 8002e30:	d11a      	bne.n	8002e68 <_printf_common+0xcc>
 8002e32:	2000      	movs	r0, #0
 8002e34:	e008      	b.n	8002e48 <_printf_common+0xac>
 8002e36:	2301      	movs	r3, #1
 8002e38:	4652      	mov	r2, sl
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	47c0      	blx	r8
 8002e40:	3001      	adds	r0, #1
 8002e42:	d103      	bne.n	8002e4c <_printf_common+0xb0>
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	e7c4      	b.n	8002dda <_printf_common+0x3e>
 8002e50:	2030      	movs	r0, #48	; 0x30
 8002e52:	18e1      	adds	r1, r4, r3
 8002e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e5e:	4422      	add	r2, r4
 8002e60:	3302      	adds	r3, #2
 8002e62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e66:	e7c5      	b.n	8002df4 <_printf_common+0x58>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	4638      	mov	r0, r7
 8002e70:	47c0      	blx	r8
 8002e72:	3001      	adds	r0, #1
 8002e74:	d0e6      	beq.n	8002e44 <_printf_common+0xa8>
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7d9      	b.n	8002e2e <_printf_common+0x92>
	...

08002e7c <_printf_i>:
 8002e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e80:	7e0f      	ldrb	r7, [r1, #24]
 8002e82:	4691      	mov	r9, r2
 8002e84:	2f78      	cmp	r7, #120	; 0x78
 8002e86:	4680      	mov	r8, r0
 8002e88:	460c      	mov	r4, r1
 8002e8a:	469a      	mov	sl, r3
 8002e8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e92:	d807      	bhi.n	8002ea4 <_printf_i+0x28>
 8002e94:	2f62      	cmp	r7, #98	; 0x62
 8002e96:	d80a      	bhi.n	8002eae <_printf_i+0x32>
 8002e98:	2f00      	cmp	r7, #0
 8002e9a:	f000 80d9 	beq.w	8003050 <_printf_i+0x1d4>
 8002e9e:	2f58      	cmp	r7, #88	; 0x58
 8002ea0:	f000 80a4 	beq.w	8002fec <_printf_i+0x170>
 8002ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002eac:	e03a      	b.n	8002f24 <_printf_i+0xa8>
 8002eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eb2:	2b15      	cmp	r3, #21
 8002eb4:	d8f6      	bhi.n	8002ea4 <_printf_i+0x28>
 8002eb6:	a101      	add	r1, pc, #4	; (adr r1, 8002ebc <_printf_i+0x40>)
 8002eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ebc:	08002f15 	.word	0x08002f15
 8002ec0:	08002f29 	.word	0x08002f29
 8002ec4:	08002ea5 	.word	0x08002ea5
 8002ec8:	08002ea5 	.word	0x08002ea5
 8002ecc:	08002ea5 	.word	0x08002ea5
 8002ed0:	08002ea5 	.word	0x08002ea5
 8002ed4:	08002f29 	.word	0x08002f29
 8002ed8:	08002ea5 	.word	0x08002ea5
 8002edc:	08002ea5 	.word	0x08002ea5
 8002ee0:	08002ea5 	.word	0x08002ea5
 8002ee4:	08002ea5 	.word	0x08002ea5
 8002ee8:	08003037 	.word	0x08003037
 8002eec:	08002f59 	.word	0x08002f59
 8002ef0:	08003019 	.word	0x08003019
 8002ef4:	08002ea5 	.word	0x08002ea5
 8002ef8:	08002ea5 	.word	0x08002ea5
 8002efc:	08003059 	.word	0x08003059
 8002f00:	08002ea5 	.word	0x08002ea5
 8002f04:	08002f59 	.word	0x08002f59
 8002f08:	08002ea5 	.word	0x08002ea5
 8002f0c:	08002ea5 	.word	0x08002ea5
 8002f10:	08003021 	.word	0x08003021
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	1d1a      	adds	r2, r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	602a      	str	r2, [r5, #0]
 8002f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0a4      	b.n	8003072 <_printf_i+0x1f6>
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	6829      	ldr	r1, [r5, #0]
 8002f2c:	0606      	lsls	r6, r0, #24
 8002f2e:	f101 0304 	add.w	r3, r1, #4
 8002f32:	d50a      	bpl.n	8002f4a <_printf_i+0xce>
 8002f34:	680e      	ldr	r6, [r1, #0]
 8002f36:	602b      	str	r3, [r5, #0]
 8002f38:	2e00      	cmp	r6, #0
 8002f3a:	da03      	bge.n	8002f44 <_printf_i+0xc8>
 8002f3c:	232d      	movs	r3, #45	; 0x2d
 8002f3e:	4276      	negs	r6, r6
 8002f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f44:	230a      	movs	r3, #10
 8002f46:	485e      	ldr	r0, [pc, #376]	; (80030c0 <_printf_i+0x244>)
 8002f48:	e019      	b.n	8002f7e <_printf_i+0x102>
 8002f4a:	680e      	ldr	r6, [r1, #0]
 8002f4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f50:	602b      	str	r3, [r5, #0]
 8002f52:	bf18      	it	ne
 8002f54:	b236      	sxthne	r6, r6
 8002f56:	e7ef      	b.n	8002f38 <_printf_i+0xbc>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	1d19      	adds	r1, r3, #4
 8002f5e:	6029      	str	r1, [r5, #0]
 8002f60:	0601      	lsls	r1, r0, #24
 8002f62:	d501      	bpl.n	8002f68 <_printf_i+0xec>
 8002f64:	681e      	ldr	r6, [r3, #0]
 8002f66:	e002      	b.n	8002f6e <_printf_i+0xf2>
 8002f68:	0646      	lsls	r6, r0, #25
 8002f6a:	d5fb      	bpl.n	8002f64 <_printf_i+0xe8>
 8002f6c:	881e      	ldrh	r6, [r3, #0]
 8002f6e:	2f6f      	cmp	r7, #111	; 0x6f
 8002f70:	bf0c      	ite	eq
 8002f72:	2308      	moveq	r3, #8
 8002f74:	230a      	movne	r3, #10
 8002f76:	4852      	ldr	r0, [pc, #328]	; (80030c0 <_printf_i+0x244>)
 8002f78:	2100      	movs	r1, #0
 8002f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f7e:	6865      	ldr	r5, [r4, #4]
 8002f80:	2d00      	cmp	r5, #0
 8002f82:	bfa8      	it	ge
 8002f84:	6821      	ldrge	r1, [r4, #0]
 8002f86:	60a5      	str	r5, [r4, #8]
 8002f88:	bfa4      	itt	ge
 8002f8a:	f021 0104 	bicge.w	r1, r1, #4
 8002f8e:	6021      	strge	r1, [r4, #0]
 8002f90:	b90e      	cbnz	r6, 8002f96 <_printf_i+0x11a>
 8002f92:	2d00      	cmp	r5, #0
 8002f94:	d04d      	beq.n	8003032 <_printf_i+0x1b6>
 8002f96:	4615      	mov	r5, r2
 8002f98:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f9c:	fb03 6711 	mls	r7, r3, r1, r6
 8002fa0:	5dc7      	ldrb	r7, [r0, r7]
 8002fa2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fa6:	4637      	mov	r7, r6
 8002fa8:	42bb      	cmp	r3, r7
 8002faa:	460e      	mov	r6, r1
 8002fac:	d9f4      	bls.n	8002f98 <_printf_i+0x11c>
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d10b      	bne.n	8002fca <_printf_i+0x14e>
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	07de      	lsls	r6, r3, #31
 8002fb6:	d508      	bpl.n	8002fca <_printf_i+0x14e>
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	6861      	ldr	r1, [r4, #4]
 8002fbc:	4299      	cmp	r1, r3
 8002fbe:	bfde      	ittt	le
 8002fc0:	2330      	movle	r3, #48	; 0x30
 8002fc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fca:	1b52      	subs	r2, r2, r5
 8002fcc:	6122      	str	r2, [r4, #16]
 8002fce:	464b      	mov	r3, r9
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	f8cd a000 	str.w	sl, [sp]
 8002fd8:	aa03      	add	r2, sp, #12
 8002fda:	f7ff fedf 	bl	8002d9c <_printf_common>
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d14c      	bne.n	800307c <_printf_i+0x200>
 8002fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe6:	b004      	add	sp, #16
 8002fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fec:	4834      	ldr	r0, [pc, #208]	; (80030c0 <_printf_i+0x244>)
 8002fee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ff2:	6829      	ldr	r1, [r5, #0]
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ffa:	6029      	str	r1, [r5, #0]
 8002ffc:	061d      	lsls	r5, r3, #24
 8002ffe:	d514      	bpl.n	800302a <_printf_i+0x1ae>
 8003000:	07df      	lsls	r7, r3, #31
 8003002:	bf44      	itt	mi
 8003004:	f043 0320 	orrmi.w	r3, r3, #32
 8003008:	6023      	strmi	r3, [r4, #0]
 800300a:	b91e      	cbnz	r6, 8003014 <_printf_i+0x198>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	f023 0320 	bic.w	r3, r3, #32
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	2310      	movs	r3, #16
 8003016:	e7af      	b.n	8002f78 <_printf_i+0xfc>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f043 0320 	orr.w	r3, r3, #32
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	2378      	movs	r3, #120	; 0x78
 8003022:	4828      	ldr	r0, [pc, #160]	; (80030c4 <_printf_i+0x248>)
 8003024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003028:	e7e3      	b.n	8002ff2 <_printf_i+0x176>
 800302a:	0659      	lsls	r1, r3, #25
 800302c:	bf48      	it	mi
 800302e:	b2b6      	uxthmi	r6, r6
 8003030:	e7e6      	b.n	8003000 <_printf_i+0x184>
 8003032:	4615      	mov	r5, r2
 8003034:	e7bb      	b.n	8002fae <_printf_i+0x132>
 8003036:	682b      	ldr	r3, [r5, #0]
 8003038:	6826      	ldr	r6, [r4, #0]
 800303a:	1d18      	adds	r0, r3, #4
 800303c:	6961      	ldr	r1, [r4, #20]
 800303e:	6028      	str	r0, [r5, #0]
 8003040:	0635      	lsls	r5, r6, #24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	d501      	bpl.n	800304a <_printf_i+0x1ce>
 8003046:	6019      	str	r1, [r3, #0]
 8003048:	e002      	b.n	8003050 <_printf_i+0x1d4>
 800304a:	0670      	lsls	r0, r6, #25
 800304c:	d5fb      	bpl.n	8003046 <_printf_i+0x1ca>
 800304e:	8019      	strh	r1, [r3, #0]
 8003050:	2300      	movs	r3, #0
 8003052:	4615      	mov	r5, r2
 8003054:	6123      	str	r3, [r4, #16]
 8003056:	e7ba      	b.n	8002fce <_printf_i+0x152>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	2100      	movs	r1, #0
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	602a      	str	r2, [r5, #0]
 8003060:	681d      	ldr	r5, [r3, #0]
 8003062:	6862      	ldr	r2, [r4, #4]
 8003064:	4628      	mov	r0, r5
 8003066:	f000 f82f 	bl	80030c8 <memchr>
 800306a:	b108      	cbz	r0, 8003070 <_printf_i+0x1f4>
 800306c:	1b40      	subs	r0, r0, r5
 800306e:	6060      	str	r0, [r4, #4]
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	6123      	str	r3, [r4, #16]
 8003074:	2300      	movs	r3, #0
 8003076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800307a:	e7a8      	b.n	8002fce <_printf_i+0x152>
 800307c:	462a      	mov	r2, r5
 800307e:	4649      	mov	r1, r9
 8003080:	4640      	mov	r0, r8
 8003082:	6923      	ldr	r3, [r4, #16]
 8003084:	47d0      	blx	sl
 8003086:	3001      	adds	r0, #1
 8003088:	d0ab      	beq.n	8002fe2 <_printf_i+0x166>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	079b      	lsls	r3, r3, #30
 800308e:	d413      	bmi.n	80030b8 <_printf_i+0x23c>
 8003090:	68e0      	ldr	r0, [r4, #12]
 8003092:	9b03      	ldr	r3, [sp, #12]
 8003094:	4298      	cmp	r0, r3
 8003096:	bfb8      	it	lt
 8003098:	4618      	movlt	r0, r3
 800309a:	e7a4      	b.n	8002fe6 <_printf_i+0x16a>
 800309c:	2301      	movs	r3, #1
 800309e:	4632      	mov	r2, r6
 80030a0:	4649      	mov	r1, r9
 80030a2:	4640      	mov	r0, r8
 80030a4:	47d0      	blx	sl
 80030a6:	3001      	adds	r0, #1
 80030a8:	d09b      	beq.n	8002fe2 <_printf_i+0x166>
 80030aa:	3501      	adds	r5, #1
 80030ac:	68e3      	ldr	r3, [r4, #12]
 80030ae:	9903      	ldr	r1, [sp, #12]
 80030b0:	1a5b      	subs	r3, r3, r1
 80030b2:	42ab      	cmp	r3, r5
 80030b4:	dcf2      	bgt.n	800309c <_printf_i+0x220>
 80030b6:	e7eb      	b.n	8003090 <_printf_i+0x214>
 80030b8:	2500      	movs	r5, #0
 80030ba:	f104 0619 	add.w	r6, r4, #25
 80030be:	e7f5      	b.n	80030ac <_printf_i+0x230>
 80030c0:	080040fb 	.word	0x080040fb
 80030c4:	0800410c 	.word	0x0800410c

080030c8 <memchr>:
 80030c8:	4603      	mov	r3, r0
 80030ca:	b510      	push	{r4, lr}
 80030cc:	b2c9      	uxtb	r1, r1
 80030ce:	4402      	add	r2, r0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	d101      	bne.n	80030da <memchr+0x12>
 80030d6:	2000      	movs	r0, #0
 80030d8:	e003      	b.n	80030e2 <memchr+0x1a>
 80030da:	7804      	ldrb	r4, [r0, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	428c      	cmp	r4, r1
 80030e0:	d1f6      	bne.n	80030d0 <memchr+0x8>
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <_free_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	4605      	mov	r5, r0
 80030e8:	2900      	cmp	r1, #0
 80030ea:	d040      	beq.n	800316e <_free_r+0x8a>
 80030ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030f0:	1f0c      	subs	r4, r1, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bfb8      	it	lt
 80030f6:	18e4      	addlt	r4, r4, r3
 80030f8:	f000 f910 	bl	800331c <__malloc_lock>
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <_free_r+0x8c>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	b933      	cbnz	r3, 8003110 <_free_r+0x2c>
 8003102:	6063      	str	r3, [r4, #4]
 8003104:	6014      	str	r4, [r2, #0]
 8003106:	4628      	mov	r0, r5
 8003108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800310c:	f000 b90c 	b.w	8003328 <__malloc_unlock>
 8003110:	42a3      	cmp	r3, r4
 8003112:	d908      	bls.n	8003126 <_free_r+0x42>
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	1821      	adds	r1, r4, r0
 8003118:	428b      	cmp	r3, r1
 800311a:	bf01      	itttt	eq
 800311c:	6819      	ldreq	r1, [r3, #0]
 800311e:	685b      	ldreq	r3, [r3, #4]
 8003120:	1809      	addeq	r1, r1, r0
 8003122:	6021      	streq	r1, [r4, #0]
 8003124:	e7ed      	b.n	8003102 <_free_r+0x1e>
 8003126:	461a      	mov	r2, r3
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b10b      	cbz	r3, 8003130 <_free_r+0x4c>
 800312c:	42a3      	cmp	r3, r4
 800312e:	d9fa      	bls.n	8003126 <_free_r+0x42>
 8003130:	6811      	ldr	r1, [r2, #0]
 8003132:	1850      	adds	r0, r2, r1
 8003134:	42a0      	cmp	r0, r4
 8003136:	d10b      	bne.n	8003150 <_free_r+0x6c>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	4401      	add	r1, r0
 800313c:	1850      	adds	r0, r2, r1
 800313e:	4283      	cmp	r3, r0
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	d1e0      	bne.n	8003106 <_free_r+0x22>
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4401      	add	r1, r0
 800314a:	6011      	str	r1, [r2, #0]
 800314c:	6053      	str	r3, [r2, #4]
 800314e:	e7da      	b.n	8003106 <_free_r+0x22>
 8003150:	d902      	bls.n	8003158 <_free_r+0x74>
 8003152:	230c      	movs	r3, #12
 8003154:	602b      	str	r3, [r5, #0]
 8003156:	e7d6      	b.n	8003106 <_free_r+0x22>
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	1821      	adds	r1, r4, r0
 800315c:	428b      	cmp	r3, r1
 800315e:	bf01      	itttt	eq
 8003160:	6819      	ldreq	r1, [r3, #0]
 8003162:	685b      	ldreq	r3, [r3, #4]
 8003164:	1809      	addeq	r1, r1, r0
 8003166:	6021      	streq	r1, [r4, #0]
 8003168:	6063      	str	r3, [r4, #4]
 800316a:	6054      	str	r4, [r2, #4]
 800316c:	e7cb      	b.n	8003106 <_free_r+0x22>
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	20000504 	.word	0x20000504

08003174 <sbrk_aligned>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4e0e      	ldr	r6, [pc, #56]	; (80031b0 <sbrk_aligned+0x3c>)
 8003178:	460c      	mov	r4, r1
 800317a:	6831      	ldr	r1, [r6, #0]
 800317c:	4605      	mov	r5, r0
 800317e:	b911      	cbnz	r1, 8003186 <sbrk_aligned+0x12>
 8003180:	f000 f8bc 	bl	80032fc <_sbrk_r>
 8003184:	6030      	str	r0, [r6, #0]
 8003186:	4621      	mov	r1, r4
 8003188:	4628      	mov	r0, r5
 800318a:	f000 f8b7 	bl	80032fc <_sbrk_r>
 800318e:	1c43      	adds	r3, r0, #1
 8003190:	d00a      	beq.n	80031a8 <sbrk_aligned+0x34>
 8003192:	1cc4      	adds	r4, r0, #3
 8003194:	f024 0403 	bic.w	r4, r4, #3
 8003198:	42a0      	cmp	r0, r4
 800319a:	d007      	beq.n	80031ac <sbrk_aligned+0x38>
 800319c:	1a21      	subs	r1, r4, r0
 800319e:	4628      	mov	r0, r5
 80031a0:	f000 f8ac 	bl	80032fc <_sbrk_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d101      	bne.n	80031ac <sbrk_aligned+0x38>
 80031a8:	f04f 34ff 	mov.w	r4, #4294967295
 80031ac:	4620      	mov	r0, r4
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	20000508 	.word	0x20000508

080031b4 <_malloc_r>:
 80031b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b8:	1ccd      	adds	r5, r1, #3
 80031ba:	f025 0503 	bic.w	r5, r5, #3
 80031be:	3508      	adds	r5, #8
 80031c0:	2d0c      	cmp	r5, #12
 80031c2:	bf38      	it	cc
 80031c4:	250c      	movcc	r5, #12
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	4607      	mov	r7, r0
 80031ca:	db01      	blt.n	80031d0 <_malloc_r+0x1c>
 80031cc:	42a9      	cmp	r1, r5
 80031ce:	d905      	bls.n	80031dc <_malloc_r+0x28>
 80031d0:	230c      	movs	r3, #12
 80031d2:	2600      	movs	r6, #0
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4630      	mov	r0, r6
 80031d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031dc:	4e2e      	ldr	r6, [pc, #184]	; (8003298 <_malloc_r+0xe4>)
 80031de:	f000 f89d 	bl	800331c <__malloc_lock>
 80031e2:	6833      	ldr	r3, [r6, #0]
 80031e4:	461c      	mov	r4, r3
 80031e6:	bb34      	cbnz	r4, 8003236 <_malloc_r+0x82>
 80031e8:	4629      	mov	r1, r5
 80031ea:	4638      	mov	r0, r7
 80031ec:	f7ff ffc2 	bl	8003174 <sbrk_aligned>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	4604      	mov	r4, r0
 80031f4:	d14d      	bne.n	8003292 <_malloc_r+0xde>
 80031f6:	6834      	ldr	r4, [r6, #0]
 80031f8:	4626      	mov	r6, r4
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	d140      	bne.n	8003280 <_malloc_r+0xcc>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	4631      	mov	r1, r6
 8003202:	4638      	mov	r0, r7
 8003204:	eb04 0803 	add.w	r8, r4, r3
 8003208:	f000 f878 	bl	80032fc <_sbrk_r>
 800320c:	4580      	cmp	r8, r0
 800320e:	d13a      	bne.n	8003286 <_malloc_r+0xd2>
 8003210:	6821      	ldr	r1, [r4, #0]
 8003212:	3503      	adds	r5, #3
 8003214:	1a6d      	subs	r5, r5, r1
 8003216:	f025 0503 	bic.w	r5, r5, #3
 800321a:	3508      	adds	r5, #8
 800321c:	2d0c      	cmp	r5, #12
 800321e:	bf38      	it	cc
 8003220:	250c      	movcc	r5, #12
 8003222:	4638      	mov	r0, r7
 8003224:	4629      	mov	r1, r5
 8003226:	f7ff ffa5 	bl	8003174 <sbrk_aligned>
 800322a:	3001      	adds	r0, #1
 800322c:	d02b      	beq.n	8003286 <_malloc_r+0xd2>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	442b      	add	r3, r5
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	e00e      	b.n	8003254 <_malloc_r+0xa0>
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	1b52      	subs	r2, r2, r5
 800323a:	d41e      	bmi.n	800327a <_malloc_r+0xc6>
 800323c:	2a0b      	cmp	r2, #11
 800323e:	d916      	bls.n	800326e <_malloc_r+0xba>
 8003240:	1961      	adds	r1, r4, r5
 8003242:	42a3      	cmp	r3, r4
 8003244:	6025      	str	r5, [r4, #0]
 8003246:	bf18      	it	ne
 8003248:	6059      	strne	r1, [r3, #4]
 800324a:	6863      	ldr	r3, [r4, #4]
 800324c:	bf08      	it	eq
 800324e:	6031      	streq	r1, [r6, #0]
 8003250:	5162      	str	r2, [r4, r5]
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	4638      	mov	r0, r7
 8003256:	f104 060b 	add.w	r6, r4, #11
 800325a:	f000 f865 	bl	8003328 <__malloc_unlock>
 800325e:	f026 0607 	bic.w	r6, r6, #7
 8003262:	1d23      	adds	r3, r4, #4
 8003264:	1af2      	subs	r2, r6, r3
 8003266:	d0b6      	beq.n	80031d6 <_malloc_r+0x22>
 8003268:	1b9b      	subs	r3, r3, r6
 800326a:	50a3      	str	r3, [r4, r2]
 800326c:	e7b3      	b.n	80031d6 <_malloc_r+0x22>
 800326e:	6862      	ldr	r2, [r4, #4]
 8003270:	42a3      	cmp	r3, r4
 8003272:	bf0c      	ite	eq
 8003274:	6032      	streq	r2, [r6, #0]
 8003276:	605a      	strne	r2, [r3, #4]
 8003278:	e7ec      	b.n	8003254 <_malloc_r+0xa0>
 800327a:	4623      	mov	r3, r4
 800327c:	6864      	ldr	r4, [r4, #4]
 800327e:	e7b2      	b.n	80031e6 <_malloc_r+0x32>
 8003280:	4634      	mov	r4, r6
 8003282:	6876      	ldr	r6, [r6, #4]
 8003284:	e7b9      	b.n	80031fa <_malloc_r+0x46>
 8003286:	230c      	movs	r3, #12
 8003288:	4638      	mov	r0, r7
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	f000 f84c 	bl	8003328 <__malloc_unlock>
 8003290:	e7a1      	b.n	80031d6 <_malloc_r+0x22>
 8003292:	6025      	str	r5, [r4, #0]
 8003294:	e7de      	b.n	8003254 <_malloc_r+0xa0>
 8003296:	bf00      	nop
 8003298:	20000504 	.word	0x20000504

0800329c <_realloc_r>:
 800329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a0:	4680      	mov	r8, r0
 80032a2:	4614      	mov	r4, r2
 80032a4:	460e      	mov	r6, r1
 80032a6:	b921      	cbnz	r1, 80032b2 <_realloc_r+0x16>
 80032a8:	4611      	mov	r1, r2
 80032aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	f7ff bf81 	b.w	80031b4 <_malloc_r>
 80032b2:	b92a      	cbnz	r2, 80032c0 <_realloc_r+0x24>
 80032b4:	f7ff ff16 	bl	80030e4 <_free_r>
 80032b8:	4625      	mov	r5, r4
 80032ba:	4628      	mov	r0, r5
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c0:	f000 f838 	bl	8003334 <_malloc_usable_size_r>
 80032c4:	4284      	cmp	r4, r0
 80032c6:	4607      	mov	r7, r0
 80032c8:	d802      	bhi.n	80032d0 <_realloc_r+0x34>
 80032ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032ce:	d812      	bhi.n	80032f6 <_realloc_r+0x5a>
 80032d0:	4621      	mov	r1, r4
 80032d2:	4640      	mov	r0, r8
 80032d4:	f7ff ff6e 	bl	80031b4 <_malloc_r>
 80032d8:	4605      	mov	r5, r0
 80032da:	2800      	cmp	r0, #0
 80032dc:	d0ed      	beq.n	80032ba <_realloc_r+0x1e>
 80032de:	42bc      	cmp	r4, r7
 80032e0:	4622      	mov	r2, r4
 80032e2:	4631      	mov	r1, r6
 80032e4:	bf28      	it	cs
 80032e6:	463a      	movcs	r2, r7
 80032e8:	f7ff fbac 	bl	8002a44 <memcpy>
 80032ec:	4631      	mov	r1, r6
 80032ee:	4640      	mov	r0, r8
 80032f0:	f7ff fef8 	bl	80030e4 <_free_r>
 80032f4:	e7e1      	b.n	80032ba <_realloc_r+0x1e>
 80032f6:	4635      	mov	r5, r6
 80032f8:	e7df      	b.n	80032ba <_realloc_r+0x1e>
	...

080032fc <_sbrk_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	2300      	movs	r3, #0
 8003300:	4d05      	ldr	r5, [pc, #20]	; (8003318 <_sbrk_r+0x1c>)
 8003302:	4604      	mov	r4, r0
 8003304:	4608      	mov	r0, r1
 8003306:	602b      	str	r3, [r5, #0]
 8003308:	f7fd fbb4 	bl	8000a74 <_sbrk>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d102      	bne.n	8003316 <_sbrk_r+0x1a>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	b103      	cbz	r3, 8003316 <_sbrk_r+0x1a>
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	2000050c 	.word	0x2000050c

0800331c <__malloc_lock>:
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <__malloc_lock+0x8>)
 800331e:	f000 b811 	b.w	8003344 <__retarget_lock_acquire_recursive>
 8003322:	bf00      	nop
 8003324:	20000510 	.word	0x20000510

08003328 <__malloc_unlock>:
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <__malloc_unlock+0x8>)
 800332a:	f000 b80c 	b.w	8003346 <__retarget_lock_release_recursive>
 800332e:	bf00      	nop
 8003330:	20000510 	.word	0x20000510

08003334 <_malloc_usable_size_r>:
 8003334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003338:	1f18      	subs	r0, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	bfbc      	itt	lt
 800333e:	580b      	ldrlt	r3, [r1, r0]
 8003340:	18c0      	addlt	r0, r0, r3
 8003342:	4770      	bx	lr

08003344 <__retarget_lock_acquire_recursive>:
 8003344:	4770      	bx	lr

08003346 <__retarget_lock_release_recursive>:
 8003346:	4770      	bx	lr

08003348 <_init>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr

08003354 <_fini>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr
