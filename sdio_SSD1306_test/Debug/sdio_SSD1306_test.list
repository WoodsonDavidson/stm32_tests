
sdio_SSD1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  08009da8  08009da8  00019da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a92c  0800a92c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a934  0800a934  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000005c4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007a8  200007a8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127db  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282f  00000000  00000000  000329ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00035220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00036260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236f0  00000000  00000000  00037188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142c8  00000000  00000000  0005a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce2e2  00000000  00000000  0006eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ce22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005514  00000000  00000000  0013ce74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d90 	.word	0x08009d90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009d90 	.word	0x08009d90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0aa      	sub	sp, #168	; 0xa8
 8000f54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 ff1d 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 faff 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 fc13 	bl	8001788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f62:	f000 fb63 	bl	800162c <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8000f66:	f000 fb8f 	bl	8001688 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f6a:	f005 fb81 	bl	8006670 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f6e:	f000 fbab 	bl	80016c8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000f72:	f000 fbdf 	bl	8001734 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  uint16_t address_TX = 0x81;
 8000f76:	2381      	movs	r3, #129	; 0x81
 8000f78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  uint16_t address_RX = 0x80;
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  uint8_t reset_CMD = 0xFE;
 8000f82:	23fe      	movs	r3, #254	; 0xfe
 8000f84:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  uint16_t read_temper_CMD = 0xE3;
 8000f88:	23e3      	movs	r3, #227	; 0xe3
 8000f8a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90


  uint8_t data[3] = {0, 0, 0};
 8000f8e:	4ab4      	ldr	r2, [pc, #720]	; (8001260 <main+0x310>)
 8000f90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	4611      	mov	r1, r2
 8000f98:	8019      	strh	r1, [r3, #0]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	701a      	strb	r2, [r3, #0]
  //status = HAL_I2C_Master_Transmit(&hi2c1, address_TX, &read_temper_CMD, 1, HAL_MAX_DELAY);
  //status = HAL_I2C_Master_Receive(&hi2c1, address_RX, &data[0], 3, HAL_MAX_DELAY);



  status = HAL_I2C_Mem_Read(&hi2c1, address_RX, read_temper_CMD, I2C_MEMADD_SIZE_8BIT, &data[0], 2, 1000);
 8000fa0:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8000fa4:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8000fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	48aa      	ldr	r0, [pc, #680]	; (8001264 <main+0x314>)
 8000fbc:	f001 fc5a 	bl	8002874 <HAL_I2C_Mem_Read>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


  ssd1306_Init(&hi2c1);
 8000fc6:	48a7      	ldr	r0, [pc, #668]	; (8001264 <main+0x314>)
 8000fc8:	f005 fd3a 	bl	8006a40 <ssd1306_Init>
  ssd1306_Fill(White);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f005 fe57 	bl	8006c80 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000fd2:	48a4      	ldr	r0, [pc, #656]	; (8001264 <main+0x314>)
 8000fd4:	f005 fe78 	bl	8006cc8 <ssd1306_UpdateScreen>

  uint16_t raw_temper = (data[0]<<8)|(data[1]);
 8000fd8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  float temper =0 - 46.85 + 175.72*((float)raw_temper/65536);
 8000fee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffa:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001268 <main+0x318>
 8000ffe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001002:	ee16 0a90 	vmov	r0, s13
 8001006:	f7ff fa9f 	bl	8000548 <__aeabi_f2d>
 800100a:	a391      	add	r3, pc, #580	; (adr r3, 8001250 <main+0x300>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff faf2 	bl	80005f8 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	a38e      	add	r3, pc, #568	; (adr r3, 8001258 <main+0x308>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff f931 	bl	8000288 <__aeabi_dsub>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fdbb 	bl	8000ba8 <__aeabi_d2f>
 8001032:	4603      	mov	r3, r0
 8001034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  char str[20];
  sprintf(str, "%.4f", temper);
 8001038:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800103c:	f7ff fa84 	bl	8000548 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001048:	4988      	ldr	r1, [pc, #544]	; (800126c <main+0x31c>)
 800104a:	f006 fc29 	bl	80078a0 <siprintf>

  ssd1306_SetCursor(0,3);		//step 0,15
 800104e:	2103      	movs	r1, #3
 8001050:	2000      	movs	r0, #0
 8001052:	f005 ff71 	bl	8006f38 <ssd1306_SetCursor>
  ssd1306_WriteString(&str[0], Font_7x10, Black);
 8001056:	4a86      	ldr	r2, [pc, #536]	; (8001270 <main+0x320>)
 8001058:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800105c:	2300      	movs	r3, #0
 800105e:	ca06      	ldmia	r2, {r1, r2}
 8001060:	f005 ff44 	bl	8006eec <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c1);
 8001064:	487f      	ldr	r0, [pc, #508]	; (8001264 <main+0x314>)
 8001066:	f005 fe2f 	bl	8006cc8 <ssd1306_UpdateScreen>



  uint8_t tx_spi = 0x00|0b10000000;
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t rx1_spi = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t rx2_spi = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  uint8_t init_spi = 0x7F|0b10000000;		//single send to BMI for using SPI, 0b10000000 meaning it's read access (i want to read from this address)
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  HAL_StatusTypeDef status_SPI1, status_SPI2, status_SPI3, status_SPI4, status_SPI5, status_SPI6, status_SPI7, status_SPI8,
  status_SPI9, status_SPI10, status_SPI11, status_SPI12, status_SPI13, status_SPI14, status_SPI15, status_SPI16;


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	2110      	movs	r1, #16
 8001086:	487b      	ldr	r0, [pc, #492]	; (8001274 <main+0x324>)
 8001088:	f001 f99c 	bl	80023c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4878      	ldr	r0, [pc, #480]	; (8001274 <main+0x324>)
 8001092:	f001 f997 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI1 =  HAL_SPI_Transmit(&hspi1, &init_spi, 1, HAL_MAX_DELAY);
 8001096:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	2201      	movs	r2, #1
 80010a0:	4875      	ldr	r0, [pc, #468]	; (8001278 <main+0x328>)
 80010a2:	f003 fdd2 	bl	8004c4a <HAL_SPI_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  status_SPI4 = HAL_SPI_Receive(&hspi1, &rx1_spi, 1, HAL_MAX_DELAY);
 80010ac:	f107 0156 	add.w	r1, r7, #86	; 0x56
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	2201      	movs	r2, #1
 80010b6:	4870      	ldr	r0, [pc, #448]	; (8001278 <main+0x328>)
 80010b8:	f003 ff03 	bl	8004ec2 <HAL_SPI_Receive>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	486b      	ldr	r0, [pc, #428]	; (8001274 <main+0x324>)
 80010c8:	f001 f97c 	bl	80023c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4868      	ldr	r0, [pc, #416]	; (8001274 <main+0x324>)
 80010d2:	f001 f977 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI2 =  HAL_SPI_Transmit(&hspi1, &tx_spi, 1, HAL_MAX_DELAY);
 80010d6:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2201      	movs	r2, #1
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <main+0x328>)
 80010e2:	f003 fdb2 	bl	8004c4a <HAL_SPI_Transmit>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  status_SPI3 = HAL_SPI_Receive(&hspi1, &rx2_spi, 1, HAL_MAX_DELAY);
 80010ec:	f107 0155 	add.w	r1, r7, #85	; 0x55
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2201      	movs	r2, #1
 80010f6:	4860      	ldr	r0, [pc, #384]	; (8001278 <main+0x328>)
 80010f8:	f003 fee3 	bl	8004ec2 <HAL_SPI_Receive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001102:	2201      	movs	r2, #1
 8001104:	2110      	movs	r1, #16
 8001106:	485b      	ldr	r0, [pc, #364]	; (8001274 <main+0x324>)
 8001108:	f001 f95c 	bl	80023c4 <HAL_GPIO_WritePin>

  //read PMU status
   uint8_t PMU_status_addres = 0x03|0b10000000;
 800110c:	2383      	movs	r3, #131	; 0x83
 800110e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
   uint8_t PMU_status_result = 0xFF;
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2110      	movs	r1, #16
 800111c:	4855      	ldr	r0, [pc, #340]	; (8001274 <main+0x324>)
 800111e:	f001 f951 	bl	80023c4 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(&hspi1, &PMU_status_addres, 1, HAL_MAX_DELAY);
 8001122:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	2201      	movs	r2, #1
 800112c:	4852      	ldr	r0, [pc, #328]	; (8001278 <main+0x328>)
 800112e:	f003 fd8c 	bl	8004c4a <HAL_SPI_Transmit>
   HAL_SPI_Receive(&hspi1, &PMU_status_result, 1, HAL_MAX_DELAY);
 8001132:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	2201      	movs	r2, #1
 800113c:	484e      	ldr	r0, [pc, #312]	; (8001278 <main+0x328>)
 800113e:	f003 fec0 	bl	8004ec2 <HAL_SPI_Receive>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	484b      	ldr	r0, [pc, #300]	; (8001274 <main+0x324>)
 8001148:	f001 f93c 	bl	80023c4 <HAL_GPIO_WritePin>

   //HAL_Delay(100);


   //cmd make gyr normal mode
   uint8_t cmd_addr = 0x7E;
 800114c:	237e      	movs	r3, #126	; 0x7e
 800114e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
   uint8_t set_gyr_norm = /*0b00010111*/0x15;
 8001152:	2315      	movs	r3, #21
 8001154:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   uint8_t set_gyr_fast = 0x17;
 8001158:	2317      	movs	r3, #23
 800115a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   /**/


   if(PMU_status_result == 0)
 800115e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001162:	2b00      	cmp	r3, #0
 8001164:	d134      	bne.n	80011d0 <main+0x280>
   {
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2110      	movs	r1, #16
 800116a:	4842      	ldr	r0, [pc, #264]	; (8001274 <main+0x324>)
 800116c:	f001 f92a 	bl	80023c4 <HAL_GPIO_WritePin>
	      HAL_SPI_Transmit(&hspi1, &cmd_addr, 1, HAL_MAX_DELAY);
 8001170:	f107 0151 	add.w	r1, r7, #81	; 0x51
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	2201      	movs	r2, #1
 800117a:	483f      	ldr	r0, [pc, #252]	; (8001278 <main+0x328>)
 800117c:	f003 fd65 	bl	8004c4a <HAL_SPI_Transmit>
	      HAL_SPI_Transmit(&hspi1, &set_gyr_fast, 1, HAL_MAX_DELAY);
 8001180:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	483b      	ldr	r0, [pc, #236]	; (8001278 <main+0x328>)
 800118c:	f003 fd5d 	bl	8004c4a <HAL_SPI_Transmit>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	2110      	movs	r1, #16
 8001194:	4837      	ldr	r0, [pc, #220]	; (8001274 <main+0x324>)
 8001196:	f001 f915 	bl	80023c4 <HAL_GPIO_WritePin>

		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2110      	movs	r1, #16
 800119e:	4835      	ldr	r0, [pc, #212]	; (8001274 <main+0x324>)
 80011a0:	f001 f910 	bl	80023c4 <HAL_GPIO_WritePin>
		   HAL_SPI_Transmit(&hspi1, &cmd_addr, 1, HAL_MAX_DELAY);
 80011a4:	f107 0151 	add.w	r1, r7, #81	; 0x51
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	2201      	movs	r2, #1
 80011ae:	4832      	ldr	r0, [pc, #200]	; (8001278 <main+0x328>)
 80011b0:	f003 fd4b 	bl	8004c4a <HAL_SPI_Transmit>
		   HAL_SPI_Transmit(&hspi1, &set_gyr_norm, 1, HAL_MAX_DELAY);
 80011b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	2201      	movs	r2, #1
 80011be:	482e      	ldr	r0, [pc, #184]	; (8001278 <main+0x328>)
 80011c0:	f003 fd43 	bl	8004c4a <HAL_SPI_Transmit>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2110      	movs	r1, #16
 80011c8:	482a      	ldr	r0, [pc, #168]	; (8001274 <main+0x324>)
 80011ca:	f001 f8fb 	bl	80023c4 <HAL_GPIO_WritePin>
 80011ce:	e01d      	b.n	800120c <main+0x2bc>
   }else if(PMU_status_result == 0b1100){
 80011d0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d119      	bne.n	800120c <main+0x2bc>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2110      	movs	r1, #16
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <main+0x324>)
 80011de:	f001 f8f1 	bl	80023c4 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, &cmd_addr, 1, HAL_MAX_DELAY);
 80011e2:	f107 0151 	add.w	r1, r7, #81	; 0x51
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	2201      	movs	r2, #1
 80011ec:	4822      	ldr	r0, [pc, #136]	; (8001278 <main+0x328>)
 80011ee:	f003 fd2c 	bl	8004c4a <HAL_SPI_Transmit>
	   HAL_SPI_Transmit(&hspi1, &set_gyr_norm, 1, HAL_MAX_DELAY);
 80011f2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	2201      	movs	r2, #1
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <main+0x328>)
 80011fe:	f003 fd24 	bl	8004c4a <HAL_SPI_Transmit>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	2110      	movs	r1, #16
 8001206:	481b      	ldr	r0, [pc, #108]	; (8001274 <main+0x324>)
 8001208:	f001 f8dc 	bl	80023c4 <HAL_GPIO_WritePin>


  // HAL_Delay(100);


   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2110      	movs	r1, #16
 8001210:	4818      	ldr	r0, [pc, #96]	; (8001274 <main+0x324>)
 8001212:	f001 f8d7 	bl	80023c4 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(&hspi1, &PMU_status_addres, 1, HAL_MAX_DELAY);
 8001216:	f107 0153 	add.w	r1, r7, #83	; 0x53
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	2201      	movs	r2, #1
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <main+0x328>)
 8001222:	f003 fd12 	bl	8004c4a <HAL_SPI_Transmit>
   HAL_SPI_Receive(&hspi1, &PMU_status_result, 1, HAL_MAX_DELAY);
 8001226:	f107 0152 	add.w	r1, r7, #82	; 0x52
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	2201      	movs	r2, #1
 8001230:	4811      	ldr	r0, [pc, #68]	; (8001278 <main+0x328>)
 8001232:	f003 fe46 	bl	8004ec2 <HAL_SPI_Receive>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	2110      	movs	r1, #16
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <main+0x324>)
 800123c:	f001 f8c2 	bl	80023c4 <HAL_GPIO_WritePin>


   //HAL_Delay(100);

  //get status of data (is it ready)
  uint8_t data_status_addr = 0x1B|0b10000000;
 8001240:	239b      	movs	r3, #155	; 0x9b
 8001242:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  uint8_t data_status_result = 0xFF;
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  while((data_status_result != 0b01010000) && (data_status_result == 0xFF)){
 800124c:	e033      	b.n	80012b6 <main+0x366>
 800124e:	bf00      	nop
 8001250:	3d70a3d7 	.word	0x3d70a3d7
 8001254:	4065f70a 	.word	0x4065f70a
 8001258:	cccccccd 	.word	0xcccccccd
 800125c:	40476ccc 	.word	0x40476ccc
 8001260:	08009db4 	.word	0x08009db4
 8001264:	20000200 	.word	0x20000200
 8001268:	47800000 	.word	0x47800000
 800126c:	08009da8 	.word	0x08009da8
 8001270:	2000000c 	.word	0x2000000c
 8001274:	40020000 	.word	0x40020000
 8001278:	200002d8 	.word	0x200002d8
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2110      	movs	r1, #16
 8001280:	48b1      	ldr	r0, [pc, #708]	; (8001548 <main+0x5f8>)
 8001282:	f001 f89f 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &data_status_addr, 1, HAL_MAX_DELAY);
 8001286:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	2201      	movs	r2, #1
 8001290:	48ae      	ldr	r0, [pc, #696]	; (800154c <main+0x5fc>)
 8001292:	f003 fcda 	bl	8004c4a <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, &data_status_result, 1, HAL_MAX_DELAY);
 8001296:	f107 014d 	add.w	r1, r7, #77	; 0x4d
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2201      	movs	r2, #1
 80012a0:	48aa      	ldr	r0, [pc, #680]	; (800154c <main+0x5fc>)
 80012a2:	f003 fe0e 	bl	8004ec2 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2110      	movs	r1, #16
 80012aa:	48a7      	ldr	r0, [pc, #668]	; (8001548 <main+0x5f8>)
 80012ac:	f001 f88a 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 fde1 	bl	8001e78 <HAL_Delay>
  while((data_status_result != 0b01010000) && (data_status_result == 0xFF)){
 80012b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	d003      	beq.n	80012c6 <main+0x376>
 80012be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d0da      	beq.n	800127c <main+0x32c>
  }

  //getting GYR xyz data from BMI
  uint8_t x_GYR_addr_MSB = 0x0D|0b10000000;
 80012c6:	238d      	movs	r3, #141	; 0x8d
 80012c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  uint8_t x_GYR_addr_LSB = 0x0C|0b10000000;
 80012cc:	238c      	movs	r3, #140	; 0x8c
 80012ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t y_GYR_addr_MSB = 0x0F|0b10000000;
 80012d2:	238f      	movs	r3, #143	; 0x8f
 80012d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  uint8_t y_GYR_addr_LSB = 0x0E|0b10000000;
 80012d8:	238e      	movs	r3, #142	; 0x8e
 80012da:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  uint8_t z_GYR_addr_MSB = 0x11|0b10000000;
 80012de:	2391      	movs	r3, #145	; 0x91
 80012e0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  uint8_t z_GYR_addr_LSB = 0x10|0b10000000;
 80012e4:	2390      	movs	r3, #144	; 0x90
 80012e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  uint8_t x_GYR_data_MSB = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t x_GYR_data_LSB = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t y_GYR_data_MSB = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  uint8_t y_GYR_data_LSB = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t z_GYR_data_MSB = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  uint8_t z_GYR_data_LSB = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2110      	movs	r1, #16
 8001312:	488d      	ldr	r0, [pc, #564]	; (8001548 <main+0x5f8>)
 8001314:	f001 f856 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI5 = HAL_SPI_Transmit(&hspi1, &x_GYR_addr_MSB, 1, HAL_MAX_DELAY);
 8001318:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	2201      	movs	r2, #1
 8001322:	488a      	ldr	r0, [pc, #552]	; (800154c <main+0x5fc>)
 8001324:	f003 fc91 	bl	8004c4a <HAL_SPI_Transmit>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  status_SPI6 = HAL_SPI_Receive(&hspi1, &x_GYR_data_MSB, 1, HAL_MAX_DELAY);
 800132e:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	2201      	movs	r2, #1
 8001338:	4884      	ldr	r0, [pc, #528]	; (800154c <main+0x5fc>)
 800133a:	f003 fdc2 	bl	8004ec2 <HAL_SPI_Receive>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	2110      	movs	r1, #16
 8001348:	487f      	ldr	r0, [pc, #508]	; (8001548 <main+0x5f8>)
 800134a:	f001 f83b 	bl	80023c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	487d      	ldr	r0, [pc, #500]	; (8001548 <main+0x5f8>)
 8001354:	f001 f836 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI7 = HAL_SPI_Transmit(&hspi1, &x_GYR_addr_LSB, 1, HAL_MAX_DELAY);
 8001358:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	2201      	movs	r2, #1
 8001362:	487a      	ldr	r0, [pc, #488]	; (800154c <main+0x5fc>)
 8001364:	f003 fc71 	bl	8004c4a <HAL_SPI_Transmit>
 8001368:	4603      	mov	r3, r0
 800136a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  status_SPI8 = HAL_SPI_Receive(&hspi1, &x_GYR_data_LSB, 1, HAL_MAX_DELAY);
 800136e:	f107 0145 	add.w	r1, r7, #69	; 0x45
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	2201      	movs	r2, #1
 8001378:	4874      	ldr	r0, [pc, #464]	; (800154c <main+0x5fc>)
 800137a:	f003 fda2 	bl	8004ec2 <HAL_SPI_Receive>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	486f      	ldr	r0, [pc, #444]	; (8001548 <main+0x5f8>)
 800138a:	f001 f81b 	bl	80023c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2110      	movs	r1, #16
 8001392:	486d      	ldr	r0, [pc, #436]	; (8001548 <main+0x5f8>)
 8001394:	f001 f816 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI9 = HAL_SPI_Transmit(&hspi1, &y_GYR_addr_MSB, 1, HAL_MAX_DELAY);
 8001398:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	2201      	movs	r2, #1
 80013a2:	486a      	ldr	r0, [pc, #424]	; (800154c <main+0x5fc>)
 80013a4:	f003 fc51 	bl	8004c4a <HAL_SPI_Transmit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  status_SPI10 = HAL_SPI_Receive(&hspi1, &y_GYR_data_MSB, 1, HAL_MAX_DELAY);
 80013ae:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	2201      	movs	r2, #1
 80013b8:	4864      	ldr	r0, [pc, #400]	; (800154c <main+0x5fc>)
 80013ba:	f003 fd82 	bl	8004ec2 <HAL_SPI_Receive>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2110      	movs	r1, #16
 80013c8:	485f      	ldr	r0, [pc, #380]	; (8001548 <main+0x5f8>)
 80013ca:	f000 fffb 	bl	80023c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2110      	movs	r1, #16
 80013d2:	485d      	ldr	r0, [pc, #372]	; (8001548 <main+0x5f8>)
 80013d4:	f000 fff6 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI11 = HAL_SPI_Transmit(&hspi1, &y_GYR_addr_LSB, 1, HAL_MAX_DELAY);
 80013d8:	f107 0149 	add.w	r1, r7, #73	; 0x49
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	2201      	movs	r2, #1
 80013e2:	485a      	ldr	r0, [pc, #360]	; (800154c <main+0x5fc>)
 80013e4:	f003 fc31 	bl	8004c4a <HAL_SPI_Transmit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  status_SPI12 = HAL_SPI_Receive(&hspi1, &y_GYR_data_LSB, 1, HAL_MAX_DELAY);
 80013ee:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	2201      	movs	r2, #1
 80013f8:	4854      	ldr	r0, [pc, #336]	; (800154c <main+0x5fc>)
 80013fa:	f003 fd62 	bl	8004ec2 <HAL_SPI_Receive>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	2110      	movs	r1, #16
 8001408:	484f      	ldr	r0, [pc, #316]	; (8001548 <main+0x5f8>)
 800140a:	f000 ffdb 	bl	80023c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2110      	movs	r1, #16
 8001412:	484d      	ldr	r0, [pc, #308]	; (8001548 <main+0x5f8>)
 8001414:	f000 ffd6 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI13 = HAL_SPI_Transmit(&hspi1, &z_GYR_addr_MSB, 1, HAL_MAX_DELAY);
 8001418:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	2201      	movs	r2, #1
 8001422:	484a      	ldr	r0, [pc, #296]	; (800154c <main+0x5fc>)
 8001424:	f003 fc11 	bl	8004c4a <HAL_SPI_Transmit>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  status_SPI14 = HAL_SPI_Receive(&hspi1, &z_GYR_data_MSB, 1, HAL_MAX_DELAY);
 800142e:	f107 0142 	add.w	r1, r7, #66	; 0x42
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2201      	movs	r2, #1
 8001438:	4844      	ldr	r0, [pc, #272]	; (800154c <main+0x5fc>)
 800143a:	f003 fd42 	bl	8004ec2 <HAL_SPI_Receive>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	2110      	movs	r1, #16
 8001448:	483f      	ldr	r0, [pc, #252]	; (8001548 <main+0x5f8>)
 800144a:	f000 ffbb 	bl	80023c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2110      	movs	r1, #16
 8001452:	483d      	ldr	r0, [pc, #244]	; (8001548 <main+0x5f8>)
 8001454:	f000 ffb6 	bl	80023c4 <HAL_GPIO_WritePin>
  status_SPI15 = HAL_SPI_Transmit(&hspi1, &z_GYR_addr_LSB, 1, HAL_MAX_DELAY);
 8001458:	f107 0147 	add.w	r1, r7, #71	; 0x47
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2201      	movs	r2, #1
 8001462:	483a      	ldr	r0, [pc, #232]	; (800154c <main+0x5fc>)
 8001464:	f003 fbf1 	bl	8004c4a <HAL_SPI_Transmit>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
  status_SPI16 = HAL_SPI_Receive(&hspi1, &z_GYR_data_LSB, 1, HAL_MAX_DELAY);
 800146e:	f107 0141 	add.w	r1, r7, #65	; 0x41
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	2201      	movs	r2, #1
 8001478:	4834      	ldr	r0, [pc, #208]	; (800154c <main+0x5fc>)
 800147a:	f003 fd22 	bl	8004ec2 <HAL_SPI_Receive>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	2110      	movs	r1, #16
 8001488:	482f      	ldr	r0, [pc, #188]	; (8001548 <main+0x5f8>)
 800148a:	f000 ff9b 	bl	80023c4 <HAL_GPIO_WritePin>

  uint16_t x_GYR_data = (x_GYR_data_MSB<<8)|x_GYR_data_LSB;
 800148e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b21a      	sxth	r2, r3
 8001496:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21b      	sxth	r3, r3
 80014a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  uint16_t y_GYR_data = (y_GYR_data_MSB<<8)|y_GYR_data_LSB;
 80014a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  uint16_t z_GYR_data = (z_GYR_data_MSB<<8)|z_GYR_data_LSB;
 80014ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72


  char str_x_GYR[20];
  char str_y_GYR[20];
  char str_z_GYR[20];
  sprintf(str_x_GYR, "%d", x_GYR_data);
 80014d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80014d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d8:	491d      	ldr	r1, [pc, #116]	; (8001550 <main+0x600>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 f9e0 	bl	80078a0 <siprintf>
  sprintf(str_y_GYR, "%d", y_GYR_data);
 80014e0:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4919      	ldr	r1, [pc, #100]	; (8001550 <main+0x600>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 f9d8 	bl	80078a0 <siprintf>
  sprintf(str_z_GYR, "%d", z_GYR_data);
 80014f0:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4916      	ldr	r1, [pc, #88]	; (8001550 <main+0x600>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 f9d1 	bl	80078a0 <siprintf>


  ssd1306_SetCursor(0,15);
 80014fe:	210f      	movs	r1, #15
 8001500:	2000      	movs	r0, #0
 8001502:	f005 fd19 	bl	8006f38 <ssd1306_SetCursor>
  ssd1306_WriteString(&str_x_GYR[0], Font_7x10, Black);
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <main+0x604>)
 8001508:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800150c:	2300      	movs	r3, #0
 800150e:	ca06      	ldmia	r2, {r1, r2}
 8001510:	f005 fcec 	bl	8006eec <ssd1306_WriteString>
  ssd1306_SetCursor(0,30);
 8001514:	211e      	movs	r1, #30
 8001516:	2000      	movs	r0, #0
 8001518:	f005 fd0e 	bl	8006f38 <ssd1306_SetCursor>
  ssd1306_WriteString(&str_y_GYR[0], Font_7x10, Black);
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <main+0x604>)
 800151e:	f107 0018 	add.w	r0, r7, #24
 8001522:	2300      	movs	r3, #0
 8001524:	ca06      	ldmia	r2, {r1, r2}
 8001526:	f005 fce1 	bl	8006eec <ssd1306_WriteString>
  ssd1306_SetCursor(0,45);
 800152a:	212d      	movs	r1, #45	; 0x2d
 800152c:	2000      	movs	r0, #0
 800152e:	f005 fd03 	bl	8006f38 <ssd1306_SetCursor>
  ssd1306_WriteString(&str_z_GYR[0], Font_7x10, Black);
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <main+0x604>)
 8001534:	1d38      	adds	r0, r7, #4
 8001536:	2300      	movs	r3, #0
 8001538:	ca06      	ldmia	r2, {r1, r2}
 800153a:	f005 fcd7 	bl	8006eec <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c1);
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <main+0x608>)
 8001540:	f005 fbc2 	bl	8006cc8 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001544:	e7fe      	b.n	8001544 <main+0x5f4>
 8001546:	bf00      	nop
 8001548:	40020000 	.word	0x40020000
 800154c:	200002d8 	.word	0x200002d8
 8001550:	08009db0 	.word	0x08009db0
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000200 	.word	0x20000200

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fd26 	bl	8006fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <SystemClock_Config+0xc8>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a26      	ldr	r2, [pc, #152]	; (8001624 <SystemClock_Config+0xc8>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <SystemClock_Config+0xc8>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <SystemClock_Config+0xcc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <SystemClock_Config+0xcc>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <SystemClock_Config+0xcc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015cc:	2310      	movs	r3, #16
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015d0:	23c0      	movs	r3, #192	; 0xc0
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fec9 	bl	8003378 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015ec:	f000 f938 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f002 f92c 	bl	8003868 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001616:	f000 f923 	bl	8001860 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	; 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000

0800162c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	; (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C1_Init+0x50>)
 800166a:	f000 fec5 	bl	80023f8 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 f8f4 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000200 	.word	0x20000200
 8001680:	40005400 	.word	0x40005400
 8001684:	000186a0 	.word	0x000186a0

08001688 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <MX_SDIO_SD_Init+0x3c>)
 8001690:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <MX_SDIO_SD_Init+0x38>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000254 	.word	0x20000254
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_SPI1_Init+0x64>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <MX_SPI1_Init+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_SPI1_Init+0x64>)
 80016d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_SPI1_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_SPI1_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_SPI1_Init+0x64>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_SPI1_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MX_SPI1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_SPI1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MX_SPI1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_SPI1_Init+0x64>)
 8001714:	220a      	movs	r2, #10
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_SPI1_Init+0x64>)
 800171a:	f003 fa0d 	bl	8004b38 <HAL_SPI_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001724:	f000 f89c 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002d8 	.word	0x200002d8
 8001730:	40013000 	.word	0x40013000

08001734 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_UART4_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_UART4_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_UART4_Init+0x4c>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_UART4_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_UART4_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_UART4_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_UART4_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_UART4_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_UART4_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_UART4_Init+0x4c>)
 800176c:	f003 ff8c 	bl	8005688 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001776:	f000 f873 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000330 	.word	0x20000330
 8001784:	40004c00 	.word	0x40004c00

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <MX_GPIO_Init+0xd0>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2110      	movs	r1, #16
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0xd4>)
 8001830:	f000 fdc8 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001834:	2310      	movs	r3, #16
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183c:	2301      	movs	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_GPIO_Init+0xd4>)
 800184c:	f000 fc1e 	bl	800208c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_MspInit+0x4c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_I2C_MspInit+0x84>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12b      	bne.n	8001936 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_I2C_MspInit+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_I2C_MspInit+0x88>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_I2C_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fe:	2312      	movs	r3, #18
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800190a:	2304      	movs	r3, #4
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <HAL_I2C_MspInit+0x8c>)
 8001916:	f000 fbb9 	bl	800208c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_I2C_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_I2C_MspInit+0x88>)
 8001924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_I2C_MspInit+0x88>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40005400 	.word	0x40005400
 8001944:	40023800 	.word	0x40023800
 8001948:	40020400 	.word	0x40020400

0800194c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <HAL_SD_MspInit+0xc0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d14a      	bne.n	8001a04 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_SD_MspInit+0xc4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80019c2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019d4:	230c      	movs	r3, #12
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <HAL_SD_MspInit+0xc8>)
 80019e0:	f000 fb54 	bl	800208c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e4:	2304      	movs	r3, #4
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019f4:	230c      	movs	r3, #12
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <HAL_SD_MspInit+0xcc>)
 8001a00:	f000 fb44 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40012c00 	.word	0x40012c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020c00 	.word	0x40020c00

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12b      	bne.n	8001a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23e0      	movs	r3, #224	; 0xe0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	f000 fafb 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d12b      	bne.n	8001b26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b06:	2303      	movs	r3, #3
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b16:	2308      	movs	r3, #8
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_UART_MspInit+0x8c>)
 8001b22:	f000 fab3 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40004c00 	.word	0x40004c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f956 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_kill>:

int _kill(int pid, int sig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001baa:	f005 f9dd 	bl	8006f68 <__errno>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2216      	movs	r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_exit>:

void _exit (int status)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffe7 	bl	8001ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd2:	e7fe      	b.n	8001bd2 <_exit+0x12>

08001bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
  }

  return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
  }
  return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f005 f942 	bl	8006f68 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20020000 	.word	0x20020000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000374 	.word	0x20000374
 8001d18:	200007a8 	.word	0x200007a8

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6a:	f7ff ffd7 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f005 f901 	bl	8006f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7ff f8ed 	bl	8000f50 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001d84:	0800a93c 	.word	0x0800a93c
  ldr r2, =_sbss
 8001d88:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001d8c:	200007a8 	.word	0x200007a8

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_Init+0x40>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_Init+0x40>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_Init+0x40>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f931 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fd50 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f93b 	bl	8002072 <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 f911 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20000378 	.word	0x20000378

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000378 	.word	0x20000378

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000008 	.word	0x20000008

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff47 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff5c 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffb0 	bl	8001fe0 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e16b      	b.n	8002380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 815a 	bne.w	800237a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80b4 	beq.w	800237a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <HAL_GPIO_Init+0x30c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <HAL_GPIO_Init+0x30c>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_GPIO_Init+0x30c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a5b      	ldr	r2, [pc, #364]	; (800239c <HAL_GPIO_Init+0x310>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x314>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x318>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d025      	beq.n	80022ae <HAL_GPIO_Init+0x222>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x31c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <HAL_GPIO_Init+0x21e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x320>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x21a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x216>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_GPIO_Init+0x328>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x212>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4c      	ldr	r2, [pc, #304]	; (80023b8 <HAL_GPIO_Init+0x32c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x20e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_GPIO_Init+0x330>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x20a>
 8002292:	2307      	movs	r3, #7
 8002294:	e00e      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 8002296:	2308      	movs	r3, #8
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 800229a:	2306      	movs	r3, #6
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	; (800239c <HAL_GPIO_Init+0x310>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_GPIO_Init+0x334>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a32      	ldr	r2, [pc, #200]	; (80023c0 <HAL_GPIO_Init+0x334>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_GPIO_Init+0x334>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_GPIO_Init+0x334>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f ae90 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e12b      	b.n	8002662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fa4c 	bl	80018bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2224      	movs	r2, #36	; 0x24
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800245a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800245c:	f001 fbbc 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8002460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a81      	ldr	r2, [pc, #516]	; (800266c <HAL_I2C_Init+0x274>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d807      	bhi.n	800247c <HAL_I2C_Init+0x84>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a80      	ldr	r2, [pc, #512]	; (8002670 <HAL_I2C_Init+0x278>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e006      	b.n	800248a <HAL_I2C_Init+0x92>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a7d      	ldr	r2, [pc, #500]	; (8002674 <HAL_I2C_Init+0x27c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	bf94      	ite	ls
 8002484:	2301      	movls	r3, #1
 8002486:	2300      	movhi	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0e7      	b.n	8002662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a78      	ldr	r2, [pc, #480]	; (8002678 <HAL_I2C_Init+0x280>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9b      	lsrs	r3, r3, #18
 800249c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	; (800266c <HAL_I2C_Init+0x274>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d802      	bhi.n	80024cc <HAL_I2C_Init+0xd4>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3301      	adds	r3, #1
 80024ca:	e009      	b.n	80024e0 <HAL_I2C_Init+0xe8>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_I2C_Init+0x284>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	3301      	adds	r3, #1
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	495c      	ldr	r1, [pc, #368]	; (800266c <HAL_I2C_Init+0x274>)
 80024fc:	428b      	cmp	r3, r1
 80024fe:	d819      	bhi.n	8002534 <HAL_I2C_Init+0x13c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e59      	subs	r1, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fbb1 f3f3 	udiv	r3, r1, r3
 800250e:	1c59      	adds	r1, r3, #1
 8002510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002514:	400b      	ands	r3, r1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_I2C_Init+0x138>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e59      	subs	r1, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fbb1 f3f3 	udiv	r3, r1, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252e:	e051      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 8002530:	2304      	movs	r3, #4
 8002532:	e04f      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d111      	bne.n	8002560 <HAL_I2C_Init+0x168>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	440b      	add	r3, r1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e012      	b.n	8002586 <HAL_I2C_Init+0x18e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	0099      	lsls	r1, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	fbb0 f3f3 	udiv	r3, r0, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Init+0x196>
 800258a:	2301      	movs	r3, #1
 800258c:	e022      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <HAL_I2C_Init+0x1bc>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e58      	subs	r0, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	440b      	add	r3, r1
 80025a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b2:	e00f      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	6809      	ldr	r1, [r1, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6911      	ldr	r1, [r2, #16]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	430b      	orrs	r3, r1
 8002616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	000186a0 	.word	0x000186a0
 8002670:	001e847f 	.word	0x001e847f
 8002674:	003d08ff 	.word	0x003d08ff
 8002678:	431bde83 	.word	0x431bde83
 800267c:	10624dd3 	.word	0x10624dd3

08002680 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4603      	mov	r3, r0
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	460b      	mov	r3, r1
 8002694:	813b      	strh	r3, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800269a:	f7ff fbe1 	bl	8001e60 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	f040 80d9 	bne.w	8002860 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2319      	movs	r3, #25
 80026b4:	2201      	movs	r2, #1
 80026b6:	496d      	ldr	r1, [pc, #436]	; (800286c <HAL_I2C_Mem_Write+0x1ec>)
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fc7f 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0cc      	b.n	8002862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_I2C_Mem_Write+0x56>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0c5      	b.n	8002862 <HAL_I2C_Mem_Write+0x1e2>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d007      	beq.n	80026fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2221      	movs	r2, #33	; 0x21
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800272c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <HAL_I2C_Mem_Write+0x1f0>)
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800273e:	88f8      	ldrh	r0, [r7, #6]
 8002740:	893a      	ldrh	r2, [r7, #8]
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4603      	mov	r3, r0
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fab6 	bl	8002cc0 <I2C_RequestMemoryWrite>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d052      	beq.n	8002800 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e081      	b.n	8002862 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fd00 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b04      	cmp	r3, #4
 8002774:	d107      	bne.n	8002786 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06b      	b.n	8002862 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d11b      	bne.n	8002800 <HAL_I2C_Mem_Write+0x180>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d017      	beq.n	8002800 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1aa      	bne.n	800275e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fcec 	bl	80031ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2b04      	cmp	r3, #4
 800281e:	d107      	bne.n	8002830 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e016      	b.n	8002862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	00100002 	.word	0x00100002
 8002870:	ffff0000 	.word	0xffff0000

08002874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4603      	mov	r3, r0
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	460b      	mov	r3, r1
 8002888:	813b      	strh	r3, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800288e:	f7ff fae7 	bl	8001e60 <HAL_GetTick>
 8002892:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b20      	cmp	r3, #32
 800289e:	f040 8208 	bne.w	8002cb2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2319      	movs	r3, #25
 80028a8:	2201      	movs	r2, #1
 80028aa:	497b      	ldr	r1, [pc, #492]	; (8002a98 <HAL_I2C_Mem_Read+0x224>)
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fb85 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
 80028ba:	e1fb      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_I2C_Mem_Read+0x56>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e1f4      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d007      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2222      	movs	r2, #34	; 0x22
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a5b      	ldr	r2, [pc, #364]	; (8002a9c <HAL_I2C_Mem_Read+0x228>)
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002932:	88f8      	ldrh	r0, [r7, #6]
 8002934:	893a      	ldrh	r2, [r7, #8]
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4603      	mov	r3, r0
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa52 	bl	8002dec <I2C_RequestMemoryRead>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1b0      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e184      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b01      	cmp	r3, #1
 8002988:	d11b      	bne.n	80029c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e164      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d11b      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	e144      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a18:	e138      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	f200 80f1 	bhi.w	8002c06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d123      	bne.n	8002a74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fc1b 	bl	800326c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e139      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a72:	e10b      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d14e      	bne.n	8002b1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	2200      	movs	r2, #0
 8002a84:	4906      	ldr	r1, [pc, #24]	; (8002aa0 <HAL_I2C_Mem_Read+0x22c>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa98 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e10e      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
 8002a96:	bf00      	nop
 8002a98:	00100002 	.word	0x00100002
 8002a9c:	ffff0000 	.word	0xffff0000
 8002aa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b18:	e0b8      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2200      	movs	r2, #0
 8002b22:	4966      	ldr	r1, [pc, #408]	; (8002cbc <HAL_I2C_Mem_Read+0x448>)
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fa49 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0bf      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	494f      	ldr	r1, [pc, #316]	; (8002cbc <HAL_I2C_Mem_Read+0x448>)
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fa1b 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e091      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c04:	e042      	b.n	8002c8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fb2e 	bl	800326c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e04c      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d118      	bne.n	8002c8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f aec2 	bne.w	8002a1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	00010004 	.word	0x00010004

08002cc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	817b      	strh	r3, [r7, #10]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	813b      	strh	r3, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f960 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d103      	bne.n	8002d1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e05f      	b.n	8002dde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	492d      	ldr	r1, [pc, #180]	; (8002de8 <I2C_RequestMemoryWrite+0x128>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f998 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e04c      	b.n	8002dde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fa02 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d107      	bne.n	8002d82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e02b      	b.n	8002dde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	e021      	b.n	8002ddc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da8:	6a39      	ldr	r1, [r7, #32]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f9dc 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d107      	bne.n	8002dce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e005      	b.n	8002dde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	00010002 	.word	0x00010002

08002dec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	817b      	strh	r3, [r7, #10]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f8c2 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4c:	d103      	bne.n	8002e56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0aa      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	4952      	ldr	r1, [pc, #328]	; (8002fb8 <I2C_RequestMemoryRead+0x1cc>)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f8fa 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e097      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f964 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d107      	bne.n	8002ebe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e076      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]
 8002ed2:	e021      	b.n	8002f18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed4:	893b      	ldrh	r3, [r7, #8]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	6a39      	ldr	r1, [r7, #32]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f93e 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d107      	bne.n	8002f0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e050      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0e:	893b      	ldrh	r3, [r7, #8]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	6a39      	ldr	r1, [r7, #32]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f923 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d107      	bne.n	8002f40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e035      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f82b 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7a:	d103      	bne.n	8002f84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e013      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	6a3a      	ldr	r2, [r7, #32]
 8002f9c:	4906      	ldr	r1, [pc, #24]	; (8002fb8 <I2C_RequestMemoryRead+0x1cc>)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f863 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	00010002 	.word	0x00010002

08002fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fcc:	e025      	b.n	800301a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe ff43 	bl	8001e60 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e023      	b.n	8003062 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10d      	bne.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	e00c      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d0b6      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003078:	e051      	b.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d123      	bne.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003098:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e046      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d021      	beq.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe fec1 	bl	8001e60 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d116      	bne.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0220 	orr.w	r2, r3, #32
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e020      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10c      	bne.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e00b      	b.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d18d      	bne.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	e02d      	b.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8ce 	bl	8003318 <I2C_IsAcknowledgeFailed>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e02d      	b.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d021      	beq.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fe67 	bl	8001e60 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d116      	bne.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d1ca      	bne.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f6:	e02d      	b.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f88d 	bl	8003318 <I2C_IsAcknowledgeFailed>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e02d      	b.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d021      	beq.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003210:	f7fe fe26 	bl	8001e60 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e007      	b.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d1ca      	bne.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003278:	e042      	b.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d119      	bne.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0210 	mvn.w	r2, #16
 8003290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e029      	b.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7fe fdd0 	bl	8001e60 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d1b5      	bne.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d11b      	bne.n	8003368 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003338:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f043 0204 	orr.w	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e267      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003396:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00c      	beq.n	80033bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b85      	ldr	r3, [pc, #532]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d112      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e242      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x74>
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6f      	ldr	r2, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6c      	ldr	r2, [pc, #432]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 8003410:	4b69      	ldr	r3, [pc, #420]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a68      	ldr	r2, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fd16 	bl	8001e60 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fd12 	bl	8001e60 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e207      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xc0>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fd02 	bl	8001e60 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fcfe 	bl	8001e60 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1f3      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c7      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCC_OscConfig+0x244>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe fcb7 	bl	8001e60 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe fcb3 	bl	8001e60 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a8      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4925      	ldr	r1, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x244>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe fc96 	bl	8001e60 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe fc92 	bl	8001e60 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e187      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d036      	beq.n	80035d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x248>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe fc76 	bl	8001e60 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fc72 	bl	8001e60 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e167      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
 8003596:	e01b      	b.n	80035d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x248>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe fc5f 	bl	8001e60 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	e00e      	b.n	80035c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a6:	f7fe fc5b 	bl	8001e60 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d907      	bls.n	80035c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e150      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	42470000 	.word	0x42470000
 80035c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ea      	bne.n	80035a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8097 	beq.w	800370c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b7a      	ldr	r3, [pc, #488]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b77      	ldr	r3, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b74      	ldr	r3, [pc, #464]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe fc1b 	bl	8001e60 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe fc17 	bl	8001e60 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e10c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x2ea>
 8003654:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x30c>
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5e      	ldr	r2, [pc, #376]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a5b      	ldr	r2, [pc, #364]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a57      	ldr	r2, [pc, #348]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a54      	ldr	r2, [pc, #336]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 0304 	bic.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fe fbdc 	bl	8001e60 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe fbd8 	bl	8001e60 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0cb      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ee      	beq.n	80036ac <HAL_RCC_OscConfig+0x334>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fbc6 	bl	8001e60 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe fbc2 	bl	8001e60 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e0b5      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a1 	beq.w	8003858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003716:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b08      	cmp	r3, #8
 8003720:	d05c      	beq.n	80037dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d141      	bne.n	80037ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fb96 	bl	8001e60 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fb92 	bl	8001e60 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e087      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	491b      	ldr	r1, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe fb6b 	bl	8001e60 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe fb67 	bl	8001e60 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e05c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x416>
 80037ac:	e054      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe fb54 	bl	8001e60 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fb50 	bl	8001e60 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e038      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x4ec>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d028      	beq.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d121      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800382a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d111      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fe fa82 	bl	8001e60 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe fa7e 	bl	8001e60 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f9e2 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	08009db8 	.word	0x08009db8
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a38:	b090      	sub	sp, #64	; 0x40
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a40:	2300      	movs	r3, #0
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80a1 	bhi.w	8003ba0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e09b      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a6c:	e09b      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a72:	e098      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b4f      	ldr	r3, [pc, #316]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7e:	4b4d      	ldr	r3, [pc, #308]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d028      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	627a      	str	r2, [r7, #36]	; 0x24
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa0:	fb03 f201 	mul.w	r2, r3, r1
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a43      	ldr	r2, [pc, #268]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003aae:	fba0 1202 	umull	r1, r2, r0, r2
 8003ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aba:	4413      	add	r3, r2
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	61fa      	str	r2, [r7, #28]
 8003ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ace:	f7fd f8bb 	bl	8000c48 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ada:	e053      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	617a      	str	r2, [r7, #20]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aee:	f04f 0b00 	mov.w	fp, #0
 8003af2:	4652      	mov	r2, sl
 8003af4:	465b      	mov	r3, fp
 8003af6:	f04f 0000 	mov.w	r0, #0
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	0159      	lsls	r1, r3, #5
 8003b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b04:	0150      	lsls	r0, r2, #5
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b0e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b26:	ebb2 0408 	subs.w	r4, r2, r8
 8003b2a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	00eb      	lsls	r3, r5, #3
 8003b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3c:	00e2      	lsls	r2, r4, #3
 8003b3e:	4614      	mov	r4, r2
 8003b40:	461d      	mov	r5, r3
 8003b42:	eb14 030a 	adds.w	r3, r4, sl
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	eb45 030b 	adc.w	r3, r5, fp
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b78:	f7fd f866 	bl	8000c48 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3740      	adds	r7, #64	; 0x40
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	017d7840 	.word	0x017d7840

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	.word	0x20000000

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08009dc8 	.word	0x08009dc8

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffdc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	08009dc8 	.word	0x08009dc8

08003c28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e022      	b.n	8003c80 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fd fe7d 	bl	800194c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2203      	movs	r2, #3
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f814 	bl	8003c88 <HAL_SD_InitCard>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00a      	b.n	8003c80 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c88:	b5b0      	push	{r4, r5, r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af04      	add	r7, sp, #16
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ca4:	2376      	movs	r3, #118	; 0x76
 8003ca6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681d      	ldr	r5, [r3, #0]
 8003cac:	466c      	mov	r4, sp
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f001 ffa3 	bl	8005c0c <SDIO_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e04f      	b.n	8003d78 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003cd8:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_SD_InitCard+0xf8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 ffdb 	bl	8005c9e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_SD_InitCard+0xf8>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003cee:	2002      	movs	r0, #2
 8003cf0:	f7fe f8c2 	bl	8001e78 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fe69 	bl	80049cc <SD_PowerON>
 8003cfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e02e      	b.n	8003d78 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fd88 	bl	8004830 <SD_InitCard>
 8003d20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e01b      	b.n	8003d78 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 f83a 	bl	8005dc2 <SDMMC_CmdBlockLength>
 8003d4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00f      	beq.n	8003d76 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <HAL_SD_InitCard+0xfc>)
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d80:	422580a0 	.word	0x422580a0
 8003d84:	004005ff 	.word	0x004005ff

08003d88 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b092      	sub	sp, #72	; 0x48
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d96:	f7fe f863 	bl	8001e60 <HAL_GetTick>
 8003d9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e1bd      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	f040 81b0 	bne.w	8004128 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d907      	bls.n	8003dec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e1a4      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2203      	movs	r2, #3
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d002      	beq.n	8003e0a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	025b      	lsls	r3, r3, #9
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	025b      	lsls	r3, r3, #9
 8003e14:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003e16:	2390      	movs	r3, #144	; 0x90
 8003e18:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003e22:	2301      	movs	r3, #1
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f107 0214 	add.w	r2, r7, #20
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 ff9a 	bl	8005d6a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d90a      	bls.n	8003e52 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fffe 	bl	8005e4a <SDMMC_CmdReadMultiBlock>
 8003e4e:	6478      	str	r0, [r7, #68]	; 0x44
 8003e50:	e009      	b.n	8003e66 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 ffd1 	bl	8005e06 <SDMMC_CmdReadSingleBlock>
 8003e64:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7a      	ldr	r2, [pc, #488]	; (800405c <HAL_SD_ReadBlocks+0x2d4>)
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e151      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e96:	e061      	b.n	8003f5c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03c      	beq.n	8003f20 <HAL_SD_ReadBlocks+0x198>
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d039      	beq.n	8003f20 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb0:	e033      	b.n	8003f1a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fed3 	bl	8005c62 <SDIO_ReadFIFO>
 8003ebc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	3301      	adds	r3, #1
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	3301      	adds	r3, #1
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	3b01      	subs	r3, #1
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	0e1b      	lsrs	r3, r3, #24
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	3b01      	subs	r3, #1
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f16:	3301      	adds	r3, #1
 8003f18:	643b      	str	r3, [r7, #64]	; 0x40
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1c:	2b07      	cmp	r3, #7
 8003f1e:	d9c8      	bls.n	8003eb2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f20:	f7fd ff9e 	bl	8001e60 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d902      	bls.n	8003f36 <HAL_SD_ReadBlocks+0x1ae>
 8003f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d112      	bne.n	8003f5c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a48      	ldr	r2, [pc, #288]	; (800405c <HAL_SD_ReadBlocks+0x2d4>)
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0ec      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	f240 332a 	movw	r3, #810	; 0x32a
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d095      	beq.n	8003e98 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d022      	beq.n	8003fc0 <HAL_SD_ReadBlocks+0x238>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d91f      	bls.n	8003fc0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d01b      	beq.n	8003fc0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 ffc3 	bl	8005f18 <SDMMC_CmdStopTransfer>
 8003f92:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d012      	beq.n	8003fc0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2f      	ldr	r2, [pc, #188]	; (800405c <HAL_SD_ReadBlocks+0x2d4>)
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0ba      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d012      	beq.n	8003ff4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <HAL_SD_ReadBlocks+0x2d4>)
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	f043 0208 	orr.w	r2, r3, #8
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a0      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <HAL_SD_ReadBlocks+0x2d4>)
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e086      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d063      	beq.n	80040fe <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <HAL_SD_ReadBlocks+0x2d4>)
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e06c      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
 800405c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f001 fdfc 	bl	8005c62 <SDIO_ReadFIFO>
 800406a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	b2da      	uxtb	r2, r3
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	3301      	adds	r3, #1
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407c:	3b01      	subs	r3, #1
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b2da      	uxtb	r2, r3
 8004086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004088:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	3301      	adds	r3, #1
 800408e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	3b01      	subs	r3, #1
 8004094:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	b2da      	uxtb	r2, r3
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	3301      	adds	r3, #1
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80040a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a8:	3b01      	subs	r3, #1
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	0e1b      	lsrs	r3, r3, #24
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	3301      	adds	r3, #1
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80040bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040be:	3b01      	subs	r3, #1
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80040c2:	f7fd fecd 	bl	8001e60 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d902      	bls.n	80040d8 <HAL_SD_ReadBlocks+0x350>
 80040d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d112      	bne.n	80040fe <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_SD_ReadBlocks+0x3b8>)
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e01b      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_SD_ReadBlocks+0x38a>
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1a6      	bne.n	8004060 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f240 523a 	movw	r2, #1338	; 0x53a
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e006      	b.n	8004136 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3748      	adds	r7, #72	; 0x48
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	004005ff 	.word	0x004005ff

08004144 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b092      	sub	sp, #72	; 0x48
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004152:	f7fd fe85 	bl	8001e60 <HAL_GetTick>
 8004156:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e166      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 8159 	bne.w	8004436 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800418a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	429a      	cmp	r2, r3
 8004196:	d907      	bls.n	80041a8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e14d      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d002      	beq.n	80041c6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	025b      	lsls	r3, r3, #9
 80041d0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80041d2:	2390      	movs	r3, #144	; 0x90
 80041d4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80041da:	2300      	movs	r3, #0
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80041de:	2301      	movs	r3, #1
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f107 0218 	add.w	r2, r7, #24
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 fdbc 	bl	8005d6a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d90a      	bls.n	800420e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fe64 	bl	8005ed2 <SDMMC_CmdWriteMultiBlock>
 800420a:	6478      	str	r0, [r7, #68]	; 0x44
 800420c:	e009      	b.n	8004222 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2210      	movs	r2, #16
 8004212:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fe37 	bl	8005e8e <SDMMC_CmdWriteSingleBlock>
 8004220:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a87      	ldr	r2, [pc, #540]	; (800444c <HAL_SD_WriteBlocks+0x308>)
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004236:	431a      	orrs	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0fa      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004252:	e065      	b.n	8004320 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d040      	beq.n	80042e4 <HAL_SD_WriteBlocks+0x1a0>
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d03d      	beq.n	80042e4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004268:	2300      	movs	r3, #0
 800426a:	643b      	str	r3, [r7, #64]	; 0x40
 800426c:	e037      	b.n	80042de <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	3301      	adds	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800427a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427c:	3b01      	subs	r3, #1
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	021a      	lsls	r2, r3, #8
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	3301      	adds	r3, #1
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	3b01      	subs	r3, #1
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	041a      	lsls	r2, r3, #16
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	3301      	adds	r3, #1
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80042aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ac:	3b01      	subs	r3, #1
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	061a      	lsls	r2, r3, #24
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	3301      	adds	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80042c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c4:	3b01      	subs	r3, #1
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f107 0214 	add.w	r2, r7, #20
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fcd2 	bl	8005c7c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80042d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042da:	3301      	adds	r3, #1
 80042dc:	643b      	str	r3, [r7, #64]	; 0x40
 80042de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d9c4      	bls.n	800426e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80042e4:	f7fd fdbc 	bl	8001e60 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d902      	bls.n	80042fa <HAL_SD_WriteBlocks+0x1b6>
 80042f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d112      	bne.n	8004320 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a53      	ldr	r2, [pc, #332]	; (800444c <HAL_SD_WriteBlocks+0x308>)
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e091      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004326:	f240 331a 	movw	r3, #794	; 0x31a
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d091      	beq.n	8004254 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d022      	beq.n	8004384 <HAL_SD_WriteBlocks+0x240>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d91f      	bls.n	8004384 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	2b03      	cmp	r3, #3
 800434a:	d01b      	beq.n	8004384 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f001 fde1 	bl	8005f18 <SDMMC_CmdStopTransfer>
 8004356:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2b00      	cmp	r3, #0
 800435c:	d012      	beq.n	8004384 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <HAL_SD_WriteBlocks+0x308>)
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e05f      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2d      	ldr	r2, [pc, #180]	; (800444c <HAL_SD_WriteBlocks+0x308>)
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f043 0208 	orr.w	r2, r3, #8
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e045      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a20      	ldr	r2, [pc, #128]	; (800444c <HAL_SD_WriteBlocks+0x308>)
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f043 0202 	orr.w	r2, r3, #2
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e02b      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <HAL_SD_WriteBlocks+0x308>)
 8004400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e011      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f240 523a 	movw	r2, #1338	; 0x53a
 8004428:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e006      	b.n	8004444 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3748      	adds	r7, #72	; 0x48
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	004005ff 	.word	0x004005ff

08004450 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445e:	0f9b      	lsrs	r3, r3, #30
 8004460:	b2da      	uxtb	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446a:	0e9b      	lsrs	r3, r3, #26
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	b2da      	uxtb	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	b2da      	uxtb	r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	b2da      	uxtb	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b2da      	uxtb	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b0:	0d1b      	lsrs	r3, r3, #20
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ce:	0bdb      	lsrs	r3, r3, #15
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e0:	0b9b      	lsrs	r3, r3, #14
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f2:	0b5b      	lsrs	r3, r3, #13
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004504:	0b1b      	lsrs	r3, r3, #12
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	b2da      	uxtb	r2, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2200      	movs	r2, #0
 8004516:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	2b00      	cmp	r3, #0
 800451e:	d163      	bne.n	80045e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004524:	009a      	lsls	r2, r3, #2
 8004526:	f640 73fc 	movw	r3, #4092	; 0xffc
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004530:	0f92      	lsrs	r2, r2, #30
 8004532:	431a      	orrs	r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	0edb      	lsrs	r3, r3, #27
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	b2da      	uxtb	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	0e1b      	lsrs	r3, r3, #24
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004560:	0d5b      	lsrs	r3, r3, #21
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	b2da      	uxtb	r2, r3
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004572:	0c9b      	lsrs	r3, r3, #18
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b2da      	uxtb	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004584:	0bdb      	lsrs	r3, r3, #15
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	b2da      	uxtb	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	7e1b      	ldrb	r3, [r3, #24]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	3302      	adds	r3, #2
 80045a8:	2201      	movs	r2, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045b2:	fb03 f202 	mul.w	r2, r3, r2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	7a1b      	ldrb	r3, [r3, #8]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	2201      	movs	r2, #1
 80045c6:	409a      	lsls	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045d4:	0a52      	lsrs	r2, r2, #9
 80045d6:	fb03 f202 	mul.w	r2, r3, r2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
 80045e6:	e031      	b.n	800464c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d11d      	bne.n	800462c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	431a      	orrs	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	3301      	adds	r3, #1
 800460c:	029a      	lsls	r2, r3, #10
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004620:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	661a      	str	r2, [r3, #96]	; 0x60
 800462a:	e00f      	b.n	800464c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a58      	ldr	r2, [pc, #352]	; (8004794 <HAL_SD_GetCardCSD+0x344>)
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e09d      	b.n	8004788 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004650:	0b9b      	lsrs	r3, r3, #14
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	09db      	lsrs	r3, r3, #7
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800466a:	b2da      	uxtb	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467a:	b2da      	uxtb	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	0fdb      	lsrs	r3, r3, #31
 8004686:	b2da      	uxtb	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	0f5b      	lsrs	r3, r3, #29
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	b2da      	uxtb	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	0e9b      	lsrs	r3, r3, #26
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	0d9b      	lsrs	r3, r3, #22
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	0d5b      	lsrs	r3, r3, #21
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	0bdb      	lsrs	r3, r3, #15
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	0b9b      	lsrs	r3, r3, #14
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	b2da      	uxtb	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	0b1b      	lsrs	r3, r3, #12
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	0a9b      	lsrs	r3, r3, #10
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	b2da      	uxtb	r2, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	b2da      	uxtb	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	004005ff 	.word	0x004005ff

08004798 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f970 	bl	8004ae8 <SD_SendStatus>
 8004808:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0a5b      	lsrs	r3, r3, #9
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004826:	693b      	ldr	r3, [r7, #16]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b094      	sub	sp, #80	; 0x50
 8004834:	af04      	add	r7, sp, #16
 8004836:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004838:	2301      	movs	r3, #1
 800483a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f001 fa3a 	bl	8005cba <SDIO_GetPowerState>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800484c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004850:	e0b8      	b.n	80049c4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	2b03      	cmp	r3, #3
 8004858:	d02f      	beq.n	80048ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fc21 	bl	80060a6 <SDMMC_CmdSendCID>
 8004864:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <SD_InitCard+0x40>
    {
      return errorstate;
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	e0a9      	b.n	80049c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fa64 	bl	8005d44 <SDIO_GetResponse>
 800487c:	4602      	mov	r2, r0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2104      	movs	r1, #4
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fa5b 	bl	8005d44 <SDIO_GetResponse>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2108      	movs	r1, #8
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fa52 	bl	8005d44 <SDIO_GetResponse>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	210c      	movs	r1, #12
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fa49 	bl	8005d44 <SDIO_GetResponse>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d00d      	beq.n	80048de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f107 020e 	add.w	r2, r7, #14
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fc27 	bl	8006120 <SDMMC_CmdSetRelAdd>
 80048d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <SD_InitCard+0xae>
    {
      return errorstate;
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	e072      	b.n	80049c4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d036      	beq.n	8004954 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f001 fbf1 	bl	80060e2 <SDMMC_CmdSendCSD>
 8004900:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	e05b      	b.n	80049c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fa16 	bl	8005d44 <SDIO_GetResponse>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2104      	movs	r1, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f001 fa0d 	bl	8005d44 <SDIO_GetResponse>
 800492a:	4602      	mov	r2, r0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2108      	movs	r1, #8
 8004936:	4618      	mov	r0, r3
 8004938:	f001 fa04 	bl	8005d44 <SDIO_GetResponse>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	210c      	movs	r1, #12
 8004948:	4618      	mov	r0, r3
 800494a:	f001 f9fb 	bl	8005d44 <SDIO_GetResponse>
 800494e:	4602      	mov	r2, r0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2104      	movs	r1, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f001 f9f2 	bl	8005d44 <SDIO_GetResponse>
 8004960:	4603      	mov	r3, r0
 8004962:	0d1a      	lsrs	r2, r3, #20
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004968:	f107 0310 	add.w	r3, r7, #16
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fd6e 	bl	8004450 <HAL_SD_GetCardCSD>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800497a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800497e:	e021      	b.n	80049c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	2200      	movs	r2, #0
 800498c:	461c      	mov	r4, r3
 800498e:	4615      	mov	r5, r2
 8004990:	4622      	mov	r2, r4
 8004992:	462b      	mov	r3, r5
 8004994:	4608      	mov	r0, r1
 8004996:	f001 fae1 	bl	8005f5c <SDMMC_CmdSelDesel>
 800499a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <SD_InitCard+0x176>
  {
    return errorstate;
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	e00e      	b.n	80049c4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681d      	ldr	r5, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	466c      	mov	r4, sp
 80049ae:	f103 0210 	add.w	r2, r3, #16
 80049b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80049b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049b8:	3304      	adds	r3, #4
 80049ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049bc:	4628      	mov	r0, r5
 80049be:	f001 f925 	bl	8005c0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3740      	adds	r7, #64	; 0x40
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdb0      	pop	{r4, r5, r7, pc}

080049cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fadc 	bl	8005fa2 <SDMMC_CmdGoIdleState>
 80049ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	e072      	b.n	8004adc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 faef 	bl	8005fde <SDMMC_CmdOperCond>
 8004a00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 fac5 	bl	8005fa2 <SDMMC_CmdGoIdleState>
 8004a18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	e05b      	b.n	8004adc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d137      	bne.n	8004aa2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 faef 	bl	800601c <SDMMC_CmdAppCommand>
 8004a3e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02d      	beq.n	8004aa2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a4a:	e047      	b.n	8004adc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fae2 	bl	800601c <SDMMC_CmdAppCommand>
 8004a58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	e03b      	b.n	8004adc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	491e      	ldr	r1, [pc, #120]	; (8004ae4 <SD_PowerON+0x118>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 faf8 	bl	8006060 <SDMMC_CmdAppOperCommand>
 8004a70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a7c:	e02e      	b.n	8004adc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 f95d 	bl	8005d44 <SDIO_GetResponse>
 8004a8a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	0fdb      	lsrs	r3, r3, #31
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <SD_PowerON+0xcc>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <SD_PowerON+0xce>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]

    count++;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d802      	bhi.n	8004ab2 <SD_PowerON+0xe6>
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0cc      	beq.n	8004a4c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d902      	bls.n	8004ac2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac0:	e00c      	b.n	8004adc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ad2:	e002      	b.n	8004ada <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	c1100000 	.word	0xc1100000

08004ae8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004afc:	e018      	b.n	8004b30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f001 fb29 	bl	8006162 <SDMMC_CmdSendStatus>
 8004b10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	e009      	b.n	8004b30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f90e 	bl	8005d44 <SDIO_GetResponse>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07b      	b.n	8004c42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5a:	d009      	beq.n	8004b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e005      	b.n	8004b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc ff46 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0104 	and.w	r1, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0210 	and.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_SPI_Transmit+0x22>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e126      	b.n	8004eba <HAL_SPI_Transmit+0x270>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c74:	f7fd f8f4 	bl	8001e60 <HAL_GetTick>
 8004c78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c8e:	e10b      	b.n	8004ea8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_SPI_Transmit+0x52>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ca0:	e102      	b.n	8004ea8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	88fa      	ldrh	r2, [r7, #6]
 8004cba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	d10f      	bne.n	8004d0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d007      	beq.n	8004d28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d30:	d14b      	bne.n	8004dca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Transmit+0xf6>
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d13e      	bne.n	8004dbe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d64:	e02b      	b.n	8004dbe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d112      	bne.n	8004d9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d98:	e011      	b.n	8004dbe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9a:	f7fd f861 	bl	8001e60 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d803      	bhi.n	8004db2 <HAL_SPI_Transmit+0x168>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d102      	bne.n	8004db8 <HAL_SPI_Transmit+0x16e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dbc:	e074      	b.n	8004ea8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ce      	bne.n	8004d66 <HAL_SPI_Transmit+0x11c>
 8004dc8:	e04c      	b.n	8004e64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_SPI_Transmit+0x18e>
 8004dd2:	8afb      	ldrh	r3, [r7, #22]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d140      	bne.n	8004e5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	7812      	ldrb	r2, [r2, #0]
 8004de4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dfe:	e02c      	b.n	8004e5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d113      	bne.n	8004e36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e34:	e011      	b.n	8004e5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e36:	f7fd f813 	bl	8001e60 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d803      	bhi.n	8004e4e <HAL_SPI_Transmit+0x204>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d102      	bne.n	8004e54 <HAL_SPI_Transmit+0x20a>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e58:	e026      	b.n	8004ea8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1cd      	bne.n	8004e00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fbcb 	bl	8005604 <SPI_EndRxTxTransaction>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e000      	b.n	8004ea8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ea6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ede:	d112      	bne.n	8004f06 <HAL_SPI_Receive+0x44>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10e      	bne.n	8004f06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2204      	movs	r2, #4
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f8f1 	bl	80050e4 <HAL_SPI_TransmitReceive>
 8004f02:	4603      	mov	r3, r0
 8004f04:	e0ea      	b.n	80050dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_SPI_Receive+0x52>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0e3      	b.n	80050dc <HAL_SPI_Receive+0x21a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f1c:	f7fc ffa0 	bl	8001e60 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f32:	e0ca      	b.n	80050ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_Receive+0x7e>
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f44:	e0c1      	b.n	80050ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2204      	movs	r2, #4
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d10f      	bne.n	8004fae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d007      	beq.n	8004fcc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d162      	bne.n	800509a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fd4:	e02e      	b.n	8005034 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d115      	bne.n	8005010 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f103 020c 	add.w	r2, r3, #12
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800500e:	e011      	b.n	8005034 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005010:	f7fc ff26 	bl	8001e60 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d803      	bhi.n	8005028 <HAL_SPI_Receive+0x166>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d102      	bne.n	800502e <HAL_SPI_Receive+0x16c>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005032:	e04a      	b.n	80050ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1cb      	bne.n	8004fd6 <HAL_SPI_Receive+0x114>
 800503e:	e031      	b.n	80050a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d113      	bne.n	8005076 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	b292      	uxth	r2, r2
 800505a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	1c9a      	adds	r2, r3, #2
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005074:	e011      	b.n	800509a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005076:	f7fc fef3 	bl	8001e60 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d803      	bhi.n	800508e <HAL_SPI_Receive+0x1cc>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d102      	bne.n	8005094 <HAL_SPI_Receive+0x1d2>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005098:	e017      	b.n	80050ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1cd      	bne.n	8005040 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fa45 	bl	8005538 <SPI_EndRxTransaction>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
 80050c6:	e000      	b.n	80050ca <HAL_SPI_Receive+0x208>
  }

error :
 80050c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050f2:	2301      	movs	r3, #1
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_SPI_TransmitReceive+0x26>
 8005106:	2302      	movs	r3, #2
 8005108:	e18a      	b.n	8005420 <HAL_SPI_TransmitReceive+0x33c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005112:	f7fc fea5 	bl	8001e60 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800512c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005130:	2b01      	cmp	r3, #1
 8005132:	d00f      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x70>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513a:	d107      	bne.n	800514c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <HAL_SPI_TransmitReceive+0x68>
 8005144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005148:	2b04      	cmp	r3, #4
 800514a:	d003      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800514c:	2302      	movs	r3, #2
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005152:	e15b      	b.n	800540c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x82>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x82>
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800516c:	e14e      	b.n	800540c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b04      	cmp	r3, #4
 8005178:	d003      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2205      	movs	r2, #5
 800517e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	887a      	ldrh	r2, [r7, #2]
 8005192:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	887a      	ldrh	r2, [r7, #2]
 80051aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d007      	beq.n	80051d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051de:	d178      	bne.n	80052d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x10a>
 80051e8:	8b7b      	ldrh	r3, [r7, #26]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d166      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005212:	e053      	b.n	80052bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d11b      	bne.n	800525a <HAL_SPI_TransmitReceive+0x176>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d016      	beq.n	800525a <HAL_SPI_TransmitReceive+0x176>
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d113      	bne.n	800525a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	1c9a      	adds	r2, r3, #2
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d119      	bne.n	800529c <HAL_SPI_TransmitReceive+0x1b8>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d014      	beq.n	800529c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	b292      	uxth	r2, r2
 800527e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005298:	2301      	movs	r3, #1
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800529c:	f7fc fde0 	bl	8001e60 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d807      	bhi.n	80052bc <HAL_SPI_TransmitReceive+0x1d8>
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d003      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052ba:	e0a7      	b.n	800540c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1a6      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x130>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1a1      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x130>
 80052d0:	e07c      	b.n	80053cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x1fc>
 80052da:	8b7b      	ldrh	r3, [r7, #26]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d16b      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	7812      	ldrb	r2, [r2, #0]
 80052ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005306:	e057      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b02      	cmp	r3, #2
 8005314:	d11c      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x26c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_SPI_TransmitReceive+0x26c>
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d114      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d119      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x2ae>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d014      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800538e:	2301      	movs	r3, #1
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005392:	f7fc fd65 	bl	8001e60 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800539e:	429a      	cmp	r2, r3
 80053a0:	d803      	bhi.n	80053aa <HAL_SPI_TransmitReceive+0x2c6>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d102      	bne.n	80053b0 <HAL_SPI_TransmitReceive+0x2cc>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053b6:	e029      	b.n	800540c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1a2      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x224>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d19d      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f917 	bl	8005604 <SPI_EndRxTxTransaction>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053e8:	e010      	b.n	800540c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	e000      	b.n	800540c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800540a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800541c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	; 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005438:	f7fc fd12 	bl	8001e60 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	4413      	add	r3, r2
 8005446:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005448:	f7fc fd0a 	bl	8001e60 <HAL_GetTick>
 800544c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	015b      	lsls	r3, r3, #5
 8005454:	0d1b      	lsrs	r3, r3, #20
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800545e:	e054      	b.n	800550a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d050      	beq.n	800550a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005468:	f7fc fcfa 	bl	8001e60 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	429a      	cmp	r2, r3
 8005476:	d902      	bls.n	800547e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d13d      	bne.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800548c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d111      	bne.n	80054bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a0:	d004      	beq.n	80054ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054aa:	d107      	bne.n	80054bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c4:	d10f      	bne.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e017      	b.n	800552a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	3b01      	subs	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4013      	ands	r3, r2
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	429a      	cmp	r2, r3
 8005526:	d19b      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000000 	.word	0x20000000

08005538 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554c:	d111      	bne.n	8005572 <SPI_EndRxTransaction+0x3a>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005556:	d004      	beq.n	8005562 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	d107      	bne.n	8005572 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800557a:	d12a      	bne.n	80055d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005584:	d012      	beq.n	80055ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2200      	movs	r2, #0
 800558e:	2180      	movs	r1, #128	; 0x80
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff ff49 	bl	8005428 <SPI_WaitFlagStateUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d02d      	beq.n	80055f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e026      	b.n	80055fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2101      	movs	r1, #1
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ff36 	bl	8005428 <SPI_WaitFlagStateUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01a      	beq.n	80055f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e013      	b.n	80055fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2200      	movs	r2, #0
 80055da:	2101      	movs	r1, #1
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff ff23 	bl	8005428 <SPI_WaitFlagStateUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	f043 0220 	orr.w	r2, r3, #32
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e000      	b.n	80055fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <SPI_EndRxTxTransaction+0x7c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <SPI_EndRxTxTransaction+0x80>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	0d5b      	lsrs	r3, r3, #21
 800561c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005620:	fb02 f303 	mul.w	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562e:	d112      	bne.n	8005656 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	2180      	movs	r1, #128	; 0x80
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff fef4 	bl	8005428 <SPI_WaitFlagStateUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e00f      	b.n	8005676 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3b01      	subs	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d0f2      	beq.n	8005656 <SPI_EndRxTxTransaction+0x52>
 8005670:	e000      	b.n	8005674 <SPI_EndRxTxTransaction+0x70>
        break;
 8005672:	bf00      	nop
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000000 	.word	0x20000000
 8005684:	165e9f81 	.word	0x165e9f81

08005688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e03f      	b.n	800571a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fc f9fc 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2224      	movs	r2, #36	; 0x24
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f829 	bl	8005724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b0c0      	sub	sp, #256	; 0x100
 800572a:	af00      	add	r7, sp, #0
 800572c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	68d9      	ldr	r1, [r3, #12]
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	ea40 0301 	orr.w	r3, r0, r1
 800574c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	431a      	orrs	r2, r3
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800577c:	f021 010c 	bic.w	r1, r1, #12
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800578a:	430b      	orrs	r3, r1
 800578c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579e:	6999      	ldr	r1, [r3, #24]
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	ea40 0301 	orr.w	r3, r0, r1
 80057aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b8f      	ldr	r3, [pc, #572]	; (80059f0 <UART_SetConfig+0x2cc>)
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d005      	beq.n	80057c4 <UART_SetConfig+0xa0>
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b8d      	ldr	r3, [pc, #564]	; (80059f4 <UART_SetConfig+0x2d0>)
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d104      	bne.n	80057ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c4:	f7fe fa1c 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 80057c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057cc:	e003      	b.n	80057d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ce:	f7fe fa03 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80057d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e0:	f040 810c 	bne.w	80059fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057f6:	4622      	mov	r2, r4
 80057f8:	462b      	mov	r3, r5
 80057fa:	1891      	adds	r1, r2, r2
 80057fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80057fe:	415b      	adcs	r3, r3
 8005800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005806:	4621      	mov	r1, r4
 8005808:	eb12 0801 	adds.w	r8, r2, r1
 800580c:	4629      	mov	r1, r5
 800580e:	eb43 0901 	adc.w	r9, r3, r1
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800581e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005826:	4690      	mov	r8, r2
 8005828:	4699      	mov	r9, r3
 800582a:	4623      	mov	r3, r4
 800582c:	eb18 0303 	adds.w	r3, r8, r3
 8005830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005834:	462b      	mov	r3, r5
 8005836:	eb49 0303 	adc.w	r3, r9, r3
 800583a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800584a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800584e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005852:	460b      	mov	r3, r1
 8005854:	18db      	adds	r3, r3, r3
 8005856:	653b      	str	r3, [r7, #80]	; 0x50
 8005858:	4613      	mov	r3, r2
 800585a:	eb42 0303 	adc.w	r3, r2, r3
 800585e:	657b      	str	r3, [r7, #84]	; 0x54
 8005860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005868:	f7fb f9ee 	bl	8000c48 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <UART_SetConfig+0x2d4>)
 8005872:	fba3 2302 	umull	r2, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	011c      	lsls	r4, r3, #4
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005884:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	64b9      	str	r1, [r7, #72]	; 0x48
 8005894:	415b      	adcs	r3, r3
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800589c:	4641      	mov	r1, r8
 800589e:	eb12 0a01 	adds.w	sl, r2, r1
 80058a2:	4649      	mov	r1, r9
 80058a4:	eb43 0b01 	adc.w	fp, r3, r1
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058bc:	4692      	mov	sl, r2
 80058be:	469b      	mov	fp, r3
 80058c0:	4643      	mov	r3, r8
 80058c2:	eb1a 0303 	adds.w	r3, sl, r3
 80058c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ca:	464b      	mov	r3, r9
 80058cc:	eb4b 0303 	adc.w	r3, fp, r3
 80058d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058e8:	460b      	mov	r3, r1
 80058ea:	18db      	adds	r3, r3, r3
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
 80058ee:	4613      	mov	r3, r2
 80058f0:	eb42 0303 	adc.w	r3, r2, r3
 80058f4:	647b      	str	r3, [r7, #68]	; 0x44
 80058f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058fe:	f7fb f9a3 	bl	8000c48 <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4611      	mov	r1, r2
 8005908:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2301 	umull	r2, r3, r3, r1
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2264      	movs	r2, #100	; 0x64
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	1acb      	subs	r3, r1, r3
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800591e:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <UART_SetConfig+0x2d4>)
 8005920:	fba3 2302 	umull	r2, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800592c:	441c      	add	r4, r3
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005938:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800593c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	63b9      	str	r1, [r7, #56]	; 0x38
 8005948:	415b      	adcs	r3, r3
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800594c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6339      	str	r1, [r7, #48]	; 0x30
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800599c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059a4:	460b      	mov	r3, r1
 80059a6:	18db      	adds	r3, r3, r3
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059aa:	4613      	mov	r3, r2
 80059ac:	eb42 0303 	adc.w	r3, r2, r3
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059ba:	f7fb f945 	bl	8000c48 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <UART_SetConfig+0x2d4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	3332      	adds	r3, #50	; 0x32
 80059d6:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <UART_SetConfig+0x2d4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 0207 	and.w	r2, r3, #7
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4422      	add	r2, r4
 80059ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059ec:	e105      	b.n	8005bfa <UART_SetConfig+0x4d6>
 80059ee:	bf00      	nop
 80059f0:	40011000 	.word	0x40011000
 80059f4:	40011400 	.word	0x40011400
 80059f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a0e:	4642      	mov	r2, r8
 8005a10:	464b      	mov	r3, r9
 8005a12:	1891      	adds	r1, r2, r2
 8005a14:	6239      	str	r1, [r7, #32]
 8005a16:	415b      	adcs	r3, r3
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a1e:	4641      	mov	r1, r8
 8005a20:	1854      	adds	r4, r2, r1
 8005a22:	4649      	mov	r1, r9
 8005a24:	eb43 0501 	adc.w	r5, r3, r1
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	00eb      	lsls	r3, r5, #3
 8005a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a36:	00e2      	lsls	r2, r4, #3
 8005a38:	4614      	mov	r4, r2
 8005a3a:	461d      	mov	r5, r3
 8005a3c:	4643      	mov	r3, r8
 8005a3e:	18e3      	adds	r3, r4, r3
 8005a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a44:	464b      	mov	r3, r9
 8005a46:	eb45 0303 	adc.w	r3, r5, r3
 8005a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	008b      	lsls	r3, r1, #2
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a74:	4621      	mov	r1, r4
 8005a76:	008a      	lsls	r2, r1, #2
 8005a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a7c:	f7fb f8e4 	bl	8000c48 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4b60      	ldr	r3, [pc, #384]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005a86:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	011c      	lsls	r4, r3, #4
 8005a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	1891      	adds	r1, r2, r2
 8005aa6:	61b9      	str	r1, [r7, #24]
 8005aa8:	415b      	adcs	r3, r3
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	1851      	adds	r1, r2, r1
 8005ab4:	6139      	str	r1, [r7, #16]
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	414b      	adcs	r3, r1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ac8:	4659      	mov	r1, fp
 8005aca:	00cb      	lsls	r3, r1, #3
 8005acc:	4651      	mov	r1, sl
 8005ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	00ca      	lsls	r2, r1, #3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	4642      	mov	r2, r8
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	460a      	mov	r2, r1
 8005ae8:	eb42 0303 	adc.w	r3, r2, r3
 8005aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005afa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b08:	4649      	mov	r1, r9
 8005b0a:	008b      	lsls	r3, r1, #2
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b12:	4641      	mov	r1, r8
 8005b14:	008a      	lsls	r2, r1, #2
 8005b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b1a:	f7fb f895 	bl	8000c48 <__aeabi_uldivmod>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005b24:	fba3 1302 	umull	r1, r3, r3, r2
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	2164      	movs	r1, #100	; 0x64
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	3332      	adds	r3, #50	; 0x32
 8005b36:	4a34      	ldr	r2, [pc, #208]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005b38:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b42:	441c      	add	r4, r3
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b48:	2200      	movs	r2, #0
 8005b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b4c:	677a      	str	r2, [r7, #116]	; 0x74
 8005b4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b52:	4642      	mov	r2, r8
 8005b54:	464b      	mov	r3, r9
 8005b56:	1891      	adds	r1, r2, r2
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	415b      	adcs	r3, r3
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b62:	4641      	mov	r1, r8
 8005b64:	1851      	adds	r1, r2, r1
 8005b66:	6039      	str	r1, [r7, #0]
 8005b68:	4649      	mov	r1, r9
 8005b6a:	414b      	adcs	r3, r1
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b7a:	4659      	mov	r1, fp
 8005b7c:	00cb      	lsls	r3, r1, #3
 8005b7e:	4651      	mov	r1, sl
 8005b80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b84:	4651      	mov	r1, sl
 8005b86:	00ca      	lsls	r2, r1, #3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4642      	mov	r2, r8
 8005b90:	189b      	adds	r3, r3, r2
 8005b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b94:	464b      	mov	r3, r9
 8005b96:	460a      	mov	r2, r1
 8005b98:	eb42 0303 	adc.w	r3, r2, r3
 8005b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba8:	667a      	str	r2, [r7, #100]	; 0x64
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	008b      	lsls	r3, r1, #2
 8005bba:	4641      	mov	r1, r8
 8005bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	008a      	lsls	r2, r1, #2
 8005bc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bc8:	f7fb f83e 	bl	8000c48 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2164      	movs	r1, #100	; 0x64
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	; 0x32
 8005be4:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4422      	add	r2, r4
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c06:	bf00      	nop
 8005c08:	51eb851f 	.word	0x51eb851f

08005c0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	f107 001c 	add.w	r0, r7, #28
 8005c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005c22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005c24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005c26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005c2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005c2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005c32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005c36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005c46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	b004      	add	sp, #16
 8005c60:	4770      	bx	lr

08005c62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cf4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005cfa:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005d00:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d10:	f023 030f 	bic.w	r3, r3, #15
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	b2db      	uxtb	r3, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3314      	adds	r3, #20
 8005d52:	461a      	mov	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4413      	add	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
}  
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d90:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d96:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0

}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005de2:	f107 0308 	add.w	r3, r7, #8
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff74 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df2:	2110      	movs	r1, #16
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f9d7 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b088      	sub	sp, #32
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005e14:	2311      	movs	r3, #17
 8005e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff52 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	2111      	movs	r1, #17
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f9b5 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e40:	69fb      	ldr	r3, [r7, #28]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b088      	sub	sp, #32
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005e58:	2312      	movs	r3, #18
 8005e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e5c:	2340      	movs	r3, #64	; 0x40
 8005e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e6a:	f107 0308 	add.w	r3, r7, #8
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff30 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7a:	2112      	movs	r1, #18
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f993 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e84:	69fb      	ldr	r3, [r7, #28]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b088      	sub	sp, #32
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005e9c:	2318      	movs	r3, #24
 8005e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ea0:	2340      	movs	r3, #64	; 0x40
 8005ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff0e 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	2118      	movs	r1, #24
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f971 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005ec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b088      	sub	sp, #32
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005ee0:	2319      	movs	r3, #25
 8005ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff feec 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f02:	2119      	movs	r1, #25
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f94f 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005f24:	230c      	movs	r3, #12
 8005f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f36:	f107 0308 	add.w	r3, r7, #8
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff feca 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005f42:	4a05      	ldr	r2, [pc, #20]	; (8005f58 <SDMMC_CmdStopTransfer+0x40>)
 8005f44:	210c      	movs	r1, #12
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f92e 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	05f5e100 	.word	0x05f5e100

08005f5c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f6c:	2307      	movs	r3, #7
 8005f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f70:	2340      	movs	r3, #64	; 0x40
 8005f72:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f7e:	f107 0310 	add.w	r3, r7, #16
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fea6 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	2107      	movs	r1, #7
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f909 	bl	80061a8 <SDMMC_GetCmdResp1>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fc0:	f107 0308 	add.w	r3, r7, #8
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fe85 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb23 	bl	8006618 <SDMMC_GetCmdError>
 8005fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b088      	sub	sp, #32
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005fe6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005fec:	2308      	movs	r3, #8
 8005fee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fe66 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fab6 	bl	800657c <SDMMC_GetCmdResp7>
 8006010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006012:	69fb      	ldr	r3, [r7, #28]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800602a:	2337      	movs	r3, #55	; 0x37
 800602c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800602e:	2340      	movs	r3, #64	; 0x40
 8006030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800603a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800603c:	f107 0308 	add.w	r3, r7, #8
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fe47 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006048:	f241 3288 	movw	r2, #5000	; 0x1388
 800604c:	2137      	movs	r1, #55	; 0x37
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8aa 	bl	80061a8 <SDMMC_GetCmdResp1>
 8006054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006056:	69fb      	ldr	r3, [r7, #28]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006076:	2329      	movs	r3, #41	; 0x29
 8006078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006088:	f107 0308 	add.w	r3, r7, #8
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fe21 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9bd 	bl	8006414 <SDMMC_GetCmdResp3>
 800609a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800609c:	69fb      	ldr	r3, [r7, #28]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b088      	sub	sp, #32
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80060b2:	2302      	movs	r3, #2
 80060b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060b6:	23c0      	movs	r3, #192	; 0xc0
 80060b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fe03 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f957 	bl	8006384 <SDMMC_GetCmdResp2>
 80060d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060d8:	69fb      	ldr	r3, [r7, #28]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b088      	sub	sp, #32
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80060f0:	2309      	movs	r3, #9
 80060f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060f4:	23c0      	movs	r3, #192	; 0xc0
 80060f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006100:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fde4 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f938 	bl	8006384 <SDMMC_GetCmdResp2>
 8006114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006116:	69fb      	ldr	r3, [r7, #28]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800612e:	2303      	movs	r3, #3
 8006130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800613a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800613e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006140:	f107 0308 	add.w	r3, r7, #8
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fdc5 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	2103      	movs	r1, #3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f99d 	bl	8006490 <SDMMC_GetCmdResp6>
 8006156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006158:	69fb      	ldr	r3, [r7, #28]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b088      	sub	sp, #32
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006170:	230d      	movs	r3, #13
 8006172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800617c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006180:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fda4 	bl	8005cd6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	210d      	movs	r1, #13
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f807 	bl	80061a8 <SDMMC_GetCmdResp1>
 800619a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800619c:	69fb      	ldr	r3, [r7, #28]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	460b      	mov	r3, r1
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80061b6:	4b70      	ldr	r3, [pc, #448]	; (8006378 <SDMMC_GetCmdResp1+0x1d0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a70      	ldr	r2, [pc, #448]	; (800637c <SDMMC_GetCmdResp1+0x1d4>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	0a5a      	lsrs	r2, r3, #9
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	61fa      	str	r2, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061d8:	e0c9      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0ef      	beq.n	80061ca <SDMMC_GetCmdResp1+0x22>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ea      	bne.n	80061ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2204      	movs	r2, #4
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006206:	2304      	movs	r3, #4
 8006208:	e0b1      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800621c:	2301      	movs	r3, #1
 800621e:	e0a6      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	22c5      	movs	r2, #197	; 0xc5
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fd7f 	bl	8005d2a <SDIO_GetCommandResponse>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	7afb      	ldrb	r3, [r7, #11]
 8006232:	4293      	cmp	r3, r2
 8006234:	d001      	beq.n	800623a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006236:	2301      	movs	r3, #1
 8006238:	e099      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800623a:	2100      	movs	r1, #0
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff fd81 	bl	8005d44 <SDIO_GetResponse>
 8006242:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4b4e      	ldr	r3, [pc, #312]	; (8006380 <SDMMC_GetCmdResp1+0x1d8>)
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
 8006250:	e08d      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	da02      	bge.n	800625e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800625c:	e087      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006268:	2340      	movs	r3, #64	; 0x40
 800626a:	e080      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006276:	2380      	movs	r3, #128	; 0x80
 8006278:	e079      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006288:	e071      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006298:	e069      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80062a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a8:	e061      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80062b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b8:	e059      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80062c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062c8:	e051      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80062d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062d8:	e049      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80062e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062e8:	e041      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80062f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f8:	e039      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006308:	e031      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006318:	e029      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006328:	e021      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006334:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006338:	e019      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006348:	e011      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006354:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006358:	e009      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006364:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006368:	e001      	b.n	800636e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800636a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000000 	.word	0x20000000
 800637c:	10624dd3 	.word	0x10624dd3
 8006380:	fdffe008 	.word	0xfdffe008

08006384 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <SDMMC_GetCmdResp2+0x88>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1f      	ldr	r2, [pc, #124]	; (8006410 <SDMMC_GetCmdResp2+0x8c>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	0a5b      	lsrs	r3, r3, #9
 8006398:	f241 3288 	movw	r2, #5000	; 0x1388
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1e5a      	subs	r2, r3, #1
 80063a6:	60fa      	str	r2, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063b0:	e026      	b.n	8006400 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0ef      	beq.n	80063a2 <SDMMC_GetCmdResp2+0x1e>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ea      	bne.n	80063a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2204      	movs	r2, #4
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063de:	2304      	movs	r3, #4
 80063e0:	e00e      	b.n	8006400 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e003      	b.n	8006400 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	22c5      	movs	r2, #197	; 0xc5
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20000000 	.word	0x20000000
 8006410:	10624dd3 	.word	0x10624dd3

08006414 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <SDMMC_GetCmdResp3+0x74>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1a      	ldr	r2, [pc, #104]	; (800648c <SDMMC_GetCmdResp3+0x78>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	0a5b      	lsrs	r3, r3, #9
 8006428:	f241 3288 	movw	r2, #5000	; 0x1388
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	60fa      	str	r2, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800643c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006440:	e01b      	b.n	800647a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0ef      	beq.n	8006432 <SDMMC_GetCmdResp3+0x1e>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1ea      	bne.n	8006432 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2204      	movs	r2, #4
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800646e:	2304      	movs	r3, #4
 8006470:	e003      	b.n	800647a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	22c5      	movs	r2, #197	; 0xc5
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000000 	.word	0x20000000
 800648c:	10624dd3 	.word	0x10624dd3

08006490 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	460b      	mov	r3, r1
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800649e:	4b35      	ldr	r3, [pc, #212]	; (8006574 <SDMMC_GetCmdResp6+0xe4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a35      	ldr	r2, [pc, #212]	; (8006578 <SDMMC_GetCmdResp6+0xe8>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	0a5b      	lsrs	r3, r3, #9
 80064aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	61fa      	str	r2, [r7, #28]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064c2:	e052      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0ef      	beq.n	80064b4 <SDMMC_GetCmdResp6+0x24>
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1ea      	bne.n	80064b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2204      	movs	r2, #4
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064f0:	2304      	movs	r3, #4
 80064f2:	e03a      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006506:	2301      	movs	r3, #1
 8006508:	e02f      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff fc0d 	bl	8005d2a <SDIO_GetCommandResponse>
 8006510:	4603      	mov	r3, r0
 8006512:	461a      	mov	r2, r3
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	4293      	cmp	r3, r2
 8006518:	d001      	beq.n	800651e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800651a:	2301      	movs	r3, #1
 800651c:	e025      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	22c5      	movs	r2, #197	; 0xc5
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006524:	2100      	movs	r1, #0
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff fc0c 	bl	8005d44 <SDIO_GetResponse>
 800652c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	0c1b      	lsrs	r3, r3, #16
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006542:	2300      	movs	r3, #0
 8006544:	e011      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006554:	e009      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006564:	e001      	b.n	800656a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000000 	.word	0x20000000
 8006578:	10624dd3 	.word	0x10624dd3

0800657c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006584:	4b22      	ldr	r3, [pc, #136]	; (8006610 <SDMMC_GetCmdResp7+0x94>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a22      	ldr	r2, [pc, #136]	; (8006614 <SDMMC_GetCmdResp7+0x98>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	0a5b      	lsrs	r3, r3, #9
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a8:	e02c      	b.n	8006604 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <SDMMC_GetCmdResp7+0x1e>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ea      	bne.n	800659a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2204      	movs	r2, #4
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065d6:	2304      	movs	r3, #4
 80065d8:	e014      	b.n	8006604 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e009      	b.n	8006604 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2240      	movs	r2, #64	; 0x40
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006602:	2300      	movs	r3, #0
  
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000000 	.word	0x20000000
 8006614:	10624dd3 	.word	0x10624dd3

08006618 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006620:	4b11      	ldr	r3, [pc, #68]	; (8006668 <SDMMC_GetCmdError+0x50>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a11      	ldr	r2, [pc, #68]	; (800666c <SDMMC_GetCmdError+0x54>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	0a5b      	lsrs	r3, r3, #9
 800662c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	60fa      	str	r2, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006644:	e009      	b.n	800665a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f1      	beq.n	8006636 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	22c5      	movs	r2, #197	; 0xc5
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000000 	.word	0x20000000
 800666c:	10624dd3 	.word	0x10624dd3

08006670 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006674:	4904      	ldr	r1, [pc, #16]	; (8006688 <MX_FATFS_Init+0x18>)
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <MX_FATFS_Init+0x1c>)
 8006678:	f000 f9bc 	bl	80069f4 <FATFS_LinkDriver>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <MX_FATFS_Init+0x20>)
 8006682:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006684:	bf00      	nop
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000380 	.word	0x20000380
 800668c:	08009dd0 	.word	0x08009dd0
 8006690:	2000037c 	.word	0x2000037c

08006694 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800669e:	f000 f86b 	bl	8006778 <BSP_SD_IsDetected>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d001      	beq.n	80066ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e005      	b.n	80066b8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80066ac:	4804      	ldr	r0, [pc, #16]	; (80066c0 <BSP_SD_Init+0x2c>)
 80066ae:	f7fd fabb 	bl	8003c28 <HAL_SD_Init>
 80066b2:	4603      	mov	r3, r0
 80066b4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80066b6:	79fb      	ldrb	r3, [r7, #7]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000254 	.word	0x20000254

080066c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	4806      	ldr	r0, [pc, #24]	; (80066fc <BSP_SD_ReadBlocks+0x38>)
 80066e2:	f7fd fb51 	bl	8003d88 <HAL_SD_ReadBlocks>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000254 	.word	0x20000254

08006700 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	4806      	ldr	r0, [pc, #24]	; (8006738 <BSP_SD_WriteBlocks+0x38>)
 800671e:	f7fd fd11 	bl	8004144 <HAL_SD_WriteBlocks>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000254 	.word	0x20000254

0800673c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006740:	4805      	ldr	r0, [pc, #20]	; (8006758 <BSP_SD_GetCardState+0x1c>)
 8006742:	f7fe f855 	bl	80047f0 <HAL_SD_GetCardState>
 8006746:	4603      	mov	r3, r0
 8006748:	2b04      	cmp	r3, #4
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
}
 8006752:	4618      	mov	r0, r3
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000254 	.word	0x20000254

0800675c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4803      	ldr	r0, [pc, #12]	; (8006774 <BSP_SD_GetCardInfo+0x18>)
 8006768:	f7fe f816 	bl	8004798 <HAL_SD_GetCardInfo>
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000254 	.word	0x20000254

08006778 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800677e:	2301      	movs	r3, #1
 8006780:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	b2db      	uxtb	r3, r3
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <SD_CheckStatus+0x38>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80067a4:	f7ff ffca 	bl	800673c <BSP_SD_GetCardState>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d107      	bne.n	80067be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <SD_CheckStatus+0x38>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4b04      	ldr	r3, [pc, #16]	; (80067cc <SD_CheckStatus+0x38>)
 80067bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80067be:	4b03      	ldr	r3, [pc, #12]	; (80067cc <SD_CheckStatus+0x38>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b2db      	uxtb	r3, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000009 	.word	0x20000009

080067d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <SD_initialize+0x38>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80067e0:	f7ff ff58 	bl	8006694 <BSP_SD_Init>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d107      	bne.n	80067fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ffd1 	bl	8006794 <SD_CheckStatus>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <SD_initialize+0x38>)
 80067f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80067fa:	4b03      	ldr	r3, [pc, #12]	; (8006808 <SD_initialize+0x38>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b2db      	uxtb	r3, r3
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000009 	.word	0x20000009

0800680c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff ffbb 	bl	8006794 <SD_CheckStatus>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	68b8      	ldr	r0, [r7, #8]
 8006846:	f7ff ff3d 	bl	80066c4 <BSP_SD_ReadBlocks>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d107      	bne.n	8006860 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006850:	bf00      	nop
 8006852:	f7ff ff73 	bl	800673c <BSP_SD_GetCardState>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1fa      	bne.n	8006852 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800687e:	f04f 33ff 	mov.w	r3, #4294967295
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	68b8      	ldr	r0, [r7, #8]
 8006888:	f7ff ff3a 	bl	8006700 <BSP_SD_WriteBlocks>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006892:	bf00      	nop
 8006894:	f7ff ff52 	bl	800673c <BSP_SD_GetCardState>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1fa      	bne.n	8006894 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08c      	sub	sp, #48	; 0x30
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	603a      	str	r2, [r7, #0]
 80068b6:	71fb      	strb	r3, [r7, #7]
 80068b8:	460b      	mov	r3, r1
 80068ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80068c2:	4b25      	ldr	r3, [pc, #148]	; (8006958 <SD_ioctl+0xac>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <SD_ioctl+0x28>
 80068d0:	2303      	movs	r3, #3
 80068d2:	e03c      	b.n	800694e <SD_ioctl+0xa2>

  switch (cmd)
 80068d4:	79bb      	ldrb	r3, [r7, #6]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d834      	bhi.n	8006944 <SD_ioctl+0x98>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <SD_ioctl+0x34>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068f1 	.word	0x080068f1
 80068e4:	080068f9 	.word	0x080068f9
 80068e8:	08006911 	.word	0x08006911
 80068ec:	0800692b 	.word	0x0800692b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80068f6:	e028      	b.n	800694a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80068f8:	f107 030c 	add.w	r3, r7, #12
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff2d 	bl	800675c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800690e:	e01c      	b.n	800694a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff ff21 	bl	800675c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	b29a      	uxth	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006928:	e00f      	b.n	800694a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff ff14 	bl	800675c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	0a5a      	lsrs	r2, r3, #9
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006942:	e002      	b.n	800694a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006944:	2304      	movs	r3, #4
 8006946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800694a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800694e:	4618      	mov	r0, r3
 8006950:	3730      	adds	r7, #48	; 0x30
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000009 	.word	0x20000009

0800695c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006972:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 8006974:	7a5b      	ldrb	r3, [r3, #9]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d131      	bne.n	80069e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800697c:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 800697e:	7a5b      	ldrb	r3, [r3, #9]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 8006986:	2100      	movs	r1, #0
 8006988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800698a:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 800698c:	7a5b      	ldrb	r3, [r3, #9]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 800699c:	7a5b      	ldrb	r3, [r3, #9]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 80069a4:	4413      	add	r3, r2
 80069a6:	79fa      	ldrb	r2, [r7, #7]
 80069a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 80069ac:	7a5b      	ldrb	r3, [r3, #9]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	b2d1      	uxtb	r1, r2
 80069b4:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <FATFS_LinkDriverEx+0x94>)
 80069b6:	7251      	strb	r1, [r2, #9]
 80069b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80069ba:	7dbb      	ldrb	r3, [r7, #22]
 80069bc:	3330      	adds	r3, #48	; 0x30
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	3301      	adds	r3, #1
 80069c8:	223a      	movs	r2, #58	; 0x3a
 80069ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3302      	adds	r3, #2
 80069d0:	222f      	movs	r2, #47	; 0x2f
 80069d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3303      	adds	r3, #3
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000384 	.word	0x20000384

080069f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069fe:	2200      	movs	r2, #0
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff ffaa 	bl	800695c <FATFS_LinkDriverEx>
 8006a08:	4603      	mov	r3, r0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b086      	sub	sp, #24
 8006a16:	af04      	add	r7, sp, #16
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8006a1e:	230a      	movs	r3, #10
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	2301      	movs	r3, #1
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	1cfb      	adds	r3, r7, #3
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2178      	movs	r1, #120	; 0x78
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fb fe25 	bl	8002680 <HAL_I2C_Mem_Write>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8006a48:	2064      	movs	r0, #100	; 0x64
 8006a4a:	f7fb fa15 	bl	8001e78 <HAL_Delay>
    int status = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8006a52:	21ae      	movs	r1, #174	; 0xae
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ffdc 	bl	8006a12 <ssd1306_WriteCommand>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8006a64:	2120      	movs	r1, #32
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ffd3 	bl	8006a12 <ssd1306_WriteCommand>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006a76:	2110      	movs	r1, #16
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ffca 	bl	8006a12 <ssd1306_WriteCommand>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8006a88:	21b0      	movs	r1, #176	; 0xb0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff ffc1 	bl	8006a12 <ssd1306_WriteCommand>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8006a9a:	21c8      	movs	r1, #200	; 0xc8
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff ffb8 	bl	8006a12 <ssd1306_WriteCommand>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8006aac:	2100      	movs	r1, #0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ffaf 	bl	8006a12 <ssd1306_WriteCommand>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8006abe:	2110      	movs	r1, #16
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ffa6 	bl	8006a12 <ssd1306_WriteCommand>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff ff9d 	bl	8006a12 <ssd1306_WriteCommand>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8006ae2:	2181      	movs	r1, #129	; 0x81
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ff94 	bl	8006a12 <ssd1306_WriteCommand>
 8006aea:	4603      	mov	r3, r0
 8006aec:	461a      	mov	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8006af4:	21ff      	movs	r1, #255	; 0xff
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ff8b 	bl	8006a12 <ssd1306_WriteCommand>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8006b06:	21a1      	movs	r1, #161	; 0xa1
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff82 	bl	8006a12 <ssd1306_WriteCommand>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8006b18:	21a6      	movs	r1, #166	; 0xa6
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff ff79 	bl	8006a12 <ssd1306_WriteCommand>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8006b2a:	21a8      	movs	r1, #168	; 0xa8
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff ff70 	bl	8006a12 <ssd1306_WriteCommand>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461a      	mov	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8006b3c:	213f      	movs	r1, #63	; 0x3f
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff67 	bl	8006a12 <ssd1306_WriteCommand>
 8006b44:	4603      	mov	r3, r0
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006b4e:	21a4      	movs	r1, #164	; 0xa4
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff5e 	bl	8006a12 <ssd1306_WriteCommand>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8006b60:	21d3      	movs	r1, #211	; 0xd3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff ff55 	bl	8006a12 <ssd1306_WriteCommand>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ff4c 	bl	8006a12 <ssd1306_WriteCommand>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8006b84:	21d5      	movs	r1, #213	; 0xd5
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ff43 	bl	8006a12 <ssd1306_WriteCommand>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8006b96:	21f0      	movs	r1, #240	; 0xf0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ff3a 	bl	8006a12 <ssd1306_WriteCommand>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8006ba8:	21d9      	movs	r1, #217	; 0xd9
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff31 	bl	8006a12 <ssd1306_WriteCommand>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8006bba:	2122      	movs	r1, #34	; 0x22
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ff28 	bl	8006a12 <ssd1306_WriteCommand>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8006bcc:	21da      	movs	r1, #218	; 0xda
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff ff1f 	bl	8006a12 <ssd1306_WriteCommand>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8006bde:	2112      	movs	r1, #18
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff ff16 	bl	8006a12 <ssd1306_WriteCommand>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8006bf0:	21db      	movs	r1, #219	; 0xdb
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff ff0d 	bl	8006a12 <ssd1306_WriteCommand>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8006c02:	2120      	movs	r1, #32
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff ff04 	bl	8006a12 <ssd1306_WriteCommand>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8006c14:	218d      	movs	r1, #141	; 0x8d
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff fefb 	bl	8006a12 <ssd1306_WriteCommand>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8006c26:	2114      	movs	r1, #20
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fef2 	bl	8006a12 <ssd1306_WriteCommand>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	461a      	mov	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8006c38:	21af      	movs	r1, #175	; 0xaf
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fee9 	bl	8006a12 <ssd1306_WriteCommand>
 8006c40:	4603      	mov	r3, r0
 8006c42:	461a      	mov	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <ssd1306_Init+0x214>
        return 1;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e00f      	b.n	8006c74 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8006c54:	2000      	movs	r0, #0
 8006c56:	f000 f813 	bl	8006c80 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f834 	bl	8006cc8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <ssd1306_Init+0x23c>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <ssd1306_Init+0x23c>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8006c6c:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <ssd1306_Init+0x23c>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	715a      	strb	r2, [r3, #5]

    return 0;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000790 	.word	0x20000790

08006c80 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e00d      	b.n	8006cac <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <ssd1306_Fill+0x1a>
 8006c96:	2100      	movs	r1, #0
 8006c98:	e000      	b.n	8006c9c <ssd1306_Fill+0x1c>
 8006c9a:	21ff      	movs	r1, #255	; 0xff
 8006c9c:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <ssd1306_Fill+0x44>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	460a      	mov	r2, r1
 8006ca4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb2:	d3ed      	bcc.n	8006c90 <ssd1306_Fill+0x10>
    }
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000390 	.word	0x20000390

08006cc8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	e020      	b.n	8006d18 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	3b50      	subs	r3, #80	; 0x50
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff fe97 	bl	8006a12 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fe93 	bl	8006a12 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8006cec:	2110      	movs	r1, #16
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fe8f 	bl	8006a12 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	4a0b      	ldr	r2, [pc, #44]	; (8006d28 <ssd1306_UpdateScreen+0x60>)
 8006cfa:	4413      	add	r3, r2
 8006cfc:	2264      	movs	r2, #100	; 0x64
 8006cfe:	9202      	str	r2, [sp, #8]
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	9201      	str	r2, [sp, #4]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	2301      	movs	r3, #1
 8006d08:	2240      	movs	r2, #64	; 0x40
 8006d0a:	2178      	movs	r1, #120	; 0x78
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fb fcb7 	bl	8002680 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	3301      	adds	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b07      	cmp	r3, #7
 8006d1c:	d9db      	bls.n	8006cd6 <ssd1306_UpdateScreen+0xe>
    }
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000390 	.word	0x20000390

08006d2c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
 8006d36:	460b      	mov	r3, r1
 8006d38:	71bb      	strb	r3, [r7, #6]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8006d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	db48      	blt.n	8006dd8 <ssd1306_DrawPixel+0xac>
 8006d46:	79bb      	ldrb	r3, [r7, #6]
 8006d48:	2b3f      	cmp	r3, #63	; 0x3f
 8006d4a:	d845      	bhi.n	8006dd8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8006d4c:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <ssd1306_DrawPixel+0xb8>)
 8006d4e:	791b      	ldrb	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8006d54:	797b      	ldrb	r3, [r7, #5]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8006d62:	797b      	ldrb	r3, [r7, #5]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11a      	bne.n	8006d9e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006d68:	79fa      	ldrb	r2, [r7, #7]
 8006d6a:	79bb      	ldrb	r3, [r7, #6]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	b2d8      	uxtb	r0, r3
 8006d70:	4603      	mov	r3, r0
 8006d72:	01db      	lsls	r3, r3, #7
 8006d74:	4413      	add	r3, r2
 8006d76:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <ssd1306_DrawPixel+0xbc>)
 8006d78:	5cd3      	ldrb	r3, [r2, r3]
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	79bb      	ldrb	r3, [r7, #6]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2101      	movs	r1, #1
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	b259      	sxtb	r1, r3
 8006d8e:	79fa      	ldrb	r2, [r7, #7]
 8006d90:	4603      	mov	r3, r0
 8006d92:	01db      	lsls	r3, r3, #7
 8006d94:	4413      	add	r3, r2
 8006d96:	b2c9      	uxtb	r1, r1
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <ssd1306_DrawPixel+0xbc>)
 8006d9a:	54d1      	strb	r1, [r2, r3]
 8006d9c:	e01d      	b.n	8006dda <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	79bb      	ldrb	r3, [r7, #6]
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	b2d8      	uxtb	r0, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	01db      	lsls	r3, r3, #7
 8006daa:	4413      	add	r3, r2
 8006dac:	4a0e      	ldr	r2, [pc, #56]	; (8006de8 <ssd1306_DrawPixel+0xbc>)
 8006dae:	5cd3      	ldrb	r3, [r2, r3]
 8006db0:	b25a      	sxtb	r2, r3
 8006db2:	79bb      	ldrb	r3, [r7, #6]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	2101      	movs	r1, #1
 8006dba:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	b259      	sxtb	r1, r3
 8006dc8:	79fa      	ldrb	r2, [r7, #7]
 8006dca:	4603      	mov	r3, r0
 8006dcc:	01db      	lsls	r3, r3, #7
 8006dce:	4413      	add	r3, r2
 8006dd0:	b2c9      	uxtb	r1, r1
 8006dd2:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <ssd1306_DrawPixel+0xbc>)
 8006dd4:	54d1      	strb	r1, [r2, r3]
 8006dd6:	e000      	b.n	8006dda <ssd1306_DrawPixel+0xae>
        return;
 8006dd8:	bf00      	nop
    }
}
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000790 	.word	0x20000790
 8006de8:	20000390 	.word	0x20000390

08006dec <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b089      	sub	sp, #36	; 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	1d38      	adds	r0, r7, #4
 8006df6:	e880 0006 	stmia.w	r0, {r1, r2}
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	73fb      	strb	r3, [r7, #15]
 8006e00:	4613      	mov	r3, r2
 8006e02:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006e04:	4b38      	ldr	r3, [pc, #224]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	793b      	ldrb	r3, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e10:	dc06      	bgt.n	8006e20 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8006e12:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	461a      	mov	r2, r3
 8006e18:	797b      	ldrb	r3, [r7, #5]
 8006e1a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006e1c:	2b3f      	cmp	r3, #63	; 0x3f
 8006e1e:	dd01      	ble.n	8006e24 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e05d      	b.n	8006ee0 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	e04c      	b.n	8006ec4 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	3b20      	subs	r3, #32
 8006e30:	7979      	ldrb	r1, [r7, #5]
 8006e32:	fb01 f303 	mul.w	r3, r1, r3
 8006e36:	4619      	mov	r1, r3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	440b      	add	r3, r1
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e034      	b.n	8006eb4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d012      	beq.n	8006e80 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006e5a:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4413      	add	r3, r2
 8006e66:	b2d8      	uxtb	r0, r3
 8006e68:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006e6a:	885b      	ldrh	r3, [r3, #2]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	7bba      	ldrb	r2, [r7, #14]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f7ff ff57 	bl	8006d2c <ssd1306_DrawPixel>
 8006e7e:	e016      	b.n	8006eae <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b2d8      	uxtb	r0, r3
 8006e8e:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4413      	add	r3, r2
 8006e9a:	b2d9      	uxtb	r1, r3
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bf0c      	ite	eq
 8006ea2:	2301      	moveq	r3, #1
 8006ea4:	2300      	movne	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f7ff ff3f 	bl	8006d2c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	793b      	ldrb	r3, [r7, #4]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d3c5      	bcc.n	8006e4a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	797b      	ldrb	r3, [r7, #5]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d3ad      	bcc.n	8006e2a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006ed0:	881a      	ldrh	r2, [r3, #0]
 8006ed2:	793b      	ldrb	r3, [r7, #4]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <ssd1306_WriteChar+0xfc>)
 8006edc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3724      	adds	r7, #36	; 0x24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd90      	pop	{r4, r7, pc}
 8006ee8:	20000790 	.word	0x20000790

08006eec <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	1d38      	adds	r0, r7, #4
 8006ef6:	e880 0006 	stmia.w	r0, {r1, r2}
 8006efa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8006efc:	e012      	b.n	8006f24 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	7818      	ldrb	r0, [r3, #0]
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	1d3a      	adds	r2, r7, #4
 8006f06:	ca06      	ldmia	r2, {r1, r2}
 8006f08:	f7ff ff70 	bl	8006dec <ssd1306_WriteChar>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d002      	beq.n	8006f1e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	e008      	b.n	8006f30 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
    while (*str)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e8      	bne.n	8006efe <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	460a      	mov	r2, r1
 8006f42:	71fb      	strb	r3, [r7, #7]
 8006f44:	4613      	mov	r3, r2
 8006f46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <ssd1306_SetCursor+0x2c>)
 8006f4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006f50:	79bb      	ldrb	r3, [r7, #6]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <ssd1306_SetCursor+0x2c>)
 8006f56:	805a      	strh	r2, [r3, #2]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20000790 	.word	0x20000790

08006f68 <__errno>:
 8006f68:	4b01      	ldr	r3, [pc, #4]	; (8006f70 <__errno+0x8>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20000014 	.word	0x20000014

08006f74 <__libc_init_array>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	4d0d      	ldr	r5, [pc, #52]	; (8006fac <__libc_init_array+0x38>)
 8006f78:	4c0d      	ldr	r4, [pc, #52]	; (8006fb0 <__libc_init_array+0x3c>)
 8006f7a:	1b64      	subs	r4, r4, r5
 8006f7c:	10a4      	asrs	r4, r4, #2
 8006f7e:	2600      	movs	r6, #0
 8006f80:	42a6      	cmp	r6, r4
 8006f82:	d109      	bne.n	8006f98 <__libc_init_array+0x24>
 8006f84:	4d0b      	ldr	r5, [pc, #44]	; (8006fb4 <__libc_init_array+0x40>)
 8006f86:	4c0c      	ldr	r4, [pc, #48]	; (8006fb8 <__libc_init_array+0x44>)
 8006f88:	f002 ff02 	bl	8009d90 <_init>
 8006f8c:	1b64      	subs	r4, r4, r5
 8006f8e:	10a4      	asrs	r4, r4, #2
 8006f90:	2600      	movs	r6, #0
 8006f92:	42a6      	cmp	r6, r4
 8006f94:	d105      	bne.n	8006fa2 <__libc_init_array+0x2e>
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9c:	4798      	blx	r3
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7ee      	b.n	8006f80 <__libc_init_array+0xc>
 8006fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa6:	4798      	blx	r3
 8006fa8:	3601      	adds	r6, #1
 8006faa:	e7f2      	b.n	8006f92 <__libc_init_array+0x1e>
 8006fac:	0800a934 	.word	0x0800a934
 8006fb0:	0800a934 	.word	0x0800a934
 8006fb4:	0800a934 	.word	0x0800a934
 8006fb8:	0800a938 	.word	0x0800a938

08006fbc <memset>:
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <__cvt>:
 8006fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	ec55 4b10 	vmov	r4, r5, d0
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	460e      	mov	r6, r1
 8006fd8:	4619      	mov	r1, r3
 8006fda:	462b      	mov	r3, r5
 8006fdc:	bfbb      	ittet	lt
 8006fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fe2:	461d      	movlt	r5, r3
 8006fe4:	2300      	movge	r3, #0
 8006fe6:	232d      	movlt	r3, #45	; 0x2d
 8006fe8:	700b      	strb	r3, [r1, #0]
 8006fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ff0:	4691      	mov	r9, r2
 8006ff2:	f023 0820 	bic.w	r8, r3, #32
 8006ff6:	bfbc      	itt	lt
 8006ff8:	4622      	movlt	r2, r4
 8006ffa:	4614      	movlt	r4, r2
 8006ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007000:	d005      	beq.n	800700e <__cvt+0x42>
 8007002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007006:	d100      	bne.n	800700a <__cvt+0x3e>
 8007008:	3601      	adds	r6, #1
 800700a:	2102      	movs	r1, #2
 800700c:	e000      	b.n	8007010 <__cvt+0x44>
 800700e:	2103      	movs	r1, #3
 8007010:	ab03      	add	r3, sp, #12
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	ab02      	add	r3, sp, #8
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	ec45 4b10 	vmov	d0, r4, r5
 800701c:	4653      	mov	r3, sl
 800701e:	4632      	mov	r2, r6
 8007020:	f000 fcea 	bl	80079f8 <_dtoa_r>
 8007024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007028:	4607      	mov	r7, r0
 800702a:	d102      	bne.n	8007032 <__cvt+0x66>
 800702c:	f019 0f01 	tst.w	r9, #1
 8007030:	d022      	beq.n	8007078 <__cvt+0xac>
 8007032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007036:	eb07 0906 	add.w	r9, r7, r6
 800703a:	d110      	bne.n	800705e <__cvt+0x92>
 800703c:	783b      	ldrb	r3, [r7, #0]
 800703e:	2b30      	cmp	r3, #48	; 0x30
 8007040:	d10a      	bne.n	8007058 <__cvt+0x8c>
 8007042:	2200      	movs	r2, #0
 8007044:	2300      	movs	r3, #0
 8007046:	4620      	mov	r0, r4
 8007048:	4629      	mov	r1, r5
 800704a:	f7f9 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800704e:	b918      	cbnz	r0, 8007058 <__cvt+0x8c>
 8007050:	f1c6 0601 	rsb	r6, r6, #1
 8007054:	f8ca 6000 	str.w	r6, [sl]
 8007058:	f8da 3000 	ldr.w	r3, [sl]
 800705c:	4499      	add	r9, r3
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800706a:	b108      	cbz	r0, 8007070 <__cvt+0xa4>
 800706c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007070:	2230      	movs	r2, #48	; 0x30
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	454b      	cmp	r3, r9
 8007076:	d307      	bcc.n	8007088 <__cvt+0xbc>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800707c:	1bdb      	subs	r3, r3, r7
 800707e:	4638      	mov	r0, r7
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	b004      	add	sp, #16
 8007084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007088:	1c59      	adds	r1, r3, #1
 800708a:	9103      	str	r1, [sp, #12]
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	e7f0      	b.n	8007072 <__cvt+0xa6>

08007090 <__exponent>:
 8007090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007092:	4603      	mov	r3, r0
 8007094:	2900      	cmp	r1, #0
 8007096:	bfb8      	it	lt
 8007098:	4249      	neglt	r1, r1
 800709a:	f803 2b02 	strb.w	r2, [r3], #2
 800709e:	bfb4      	ite	lt
 80070a0:	222d      	movlt	r2, #45	; 0x2d
 80070a2:	222b      	movge	r2, #43	; 0x2b
 80070a4:	2909      	cmp	r1, #9
 80070a6:	7042      	strb	r2, [r0, #1]
 80070a8:	dd2a      	ble.n	8007100 <__exponent+0x70>
 80070aa:	f10d 0407 	add.w	r4, sp, #7
 80070ae:	46a4      	mov	ip, r4
 80070b0:	270a      	movs	r7, #10
 80070b2:	46a6      	mov	lr, r4
 80070b4:	460a      	mov	r2, r1
 80070b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80070ba:	fb07 1516 	mls	r5, r7, r6, r1
 80070be:	3530      	adds	r5, #48	; 0x30
 80070c0:	2a63      	cmp	r2, #99	; 0x63
 80070c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80070c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070ca:	4631      	mov	r1, r6
 80070cc:	dcf1      	bgt.n	80070b2 <__exponent+0x22>
 80070ce:	3130      	adds	r1, #48	; 0x30
 80070d0:	f1ae 0502 	sub.w	r5, lr, #2
 80070d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070d8:	1c44      	adds	r4, r0, #1
 80070da:	4629      	mov	r1, r5
 80070dc:	4561      	cmp	r1, ip
 80070de:	d30a      	bcc.n	80070f6 <__exponent+0x66>
 80070e0:	f10d 0209 	add.w	r2, sp, #9
 80070e4:	eba2 020e 	sub.w	r2, r2, lr
 80070e8:	4565      	cmp	r5, ip
 80070ea:	bf88      	it	hi
 80070ec:	2200      	movhi	r2, #0
 80070ee:	4413      	add	r3, r2
 80070f0:	1a18      	subs	r0, r3, r0
 80070f2:	b003      	add	sp, #12
 80070f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070fe:	e7ed      	b.n	80070dc <__exponent+0x4c>
 8007100:	2330      	movs	r3, #48	; 0x30
 8007102:	3130      	adds	r1, #48	; 0x30
 8007104:	7083      	strb	r3, [r0, #2]
 8007106:	70c1      	strb	r1, [r0, #3]
 8007108:	1d03      	adds	r3, r0, #4
 800710a:	e7f1      	b.n	80070f0 <__exponent+0x60>

0800710c <_printf_float>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	ed2d 8b02 	vpush	{d8}
 8007114:	b08d      	sub	sp, #52	; 0x34
 8007116:	460c      	mov	r4, r1
 8007118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800711c:	4616      	mov	r6, r2
 800711e:	461f      	mov	r7, r3
 8007120:	4605      	mov	r5, r0
 8007122:	f001 fa57 	bl	80085d4 <_localeconv_r>
 8007126:	f8d0 a000 	ldr.w	sl, [r0]
 800712a:	4650      	mov	r0, sl
 800712c:	f7f9 f850 	bl	80001d0 <strlen>
 8007130:	2300      	movs	r3, #0
 8007132:	930a      	str	r3, [sp, #40]	; 0x28
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	9305      	str	r3, [sp, #20]
 8007138:	f8d8 3000 	ldr.w	r3, [r8]
 800713c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007140:	3307      	adds	r3, #7
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	f103 0208 	add.w	r2, r3, #8
 800714a:	f8c8 2000 	str.w	r2, [r8]
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800715a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	f8cd 8018 	str.w	r8, [sp, #24]
 8007164:	ee08 0a10 	vmov	s16, r0
 8007168:	4b9f      	ldr	r3, [pc, #636]	; (80073e8 <_printf_float+0x2dc>)
 800716a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	f7f9 fcdb 	bl	8000b2c <__aeabi_dcmpun>
 8007176:	bb88      	cbnz	r0, 80071dc <_printf_float+0xd0>
 8007178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800717c:	4b9a      	ldr	r3, [pc, #616]	; (80073e8 <_printf_float+0x2dc>)
 800717e:	f04f 32ff 	mov.w	r2, #4294967295
 8007182:	f7f9 fcb5 	bl	8000af0 <__aeabi_dcmple>
 8007186:	bb48      	cbnz	r0, 80071dc <_printf_float+0xd0>
 8007188:	2200      	movs	r2, #0
 800718a:	2300      	movs	r3, #0
 800718c:	4640      	mov	r0, r8
 800718e:	4649      	mov	r1, r9
 8007190:	f7f9 fca4 	bl	8000adc <__aeabi_dcmplt>
 8007194:	b110      	cbz	r0, 800719c <_printf_float+0x90>
 8007196:	232d      	movs	r3, #45	; 0x2d
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719c:	4b93      	ldr	r3, [pc, #588]	; (80073ec <_printf_float+0x2e0>)
 800719e:	4894      	ldr	r0, [pc, #592]	; (80073f0 <_printf_float+0x2e4>)
 80071a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071a4:	bf94      	ite	ls
 80071a6:	4698      	movls	r8, r3
 80071a8:	4680      	movhi	r8, r0
 80071aa:	2303      	movs	r3, #3
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	9b05      	ldr	r3, [sp, #20]
 80071b0:	f023 0204 	bic.w	r2, r3, #4
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	f04f 0900 	mov.w	r9, #0
 80071ba:	9700      	str	r7, [sp, #0]
 80071bc:	4633      	mov	r3, r6
 80071be:	aa0b      	add	r2, sp, #44	; 0x2c
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 f9d8 	bl	8007578 <_printf_common>
 80071c8:	3001      	adds	r0, #1
 80071ca:	f040 8090 	bne.w	80072ee <_printf_float+0x1e2>
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	b00d      	add	sp, #52	; 0x34
 80071d4:	ecbd 8b02 	vpop	{d8}
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	4642      	mov	r2, r8
 80071de:	464b      	mov	r3, r9
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fca2 	bl	8000b2c <__aeabi_dcmpun>
 80071e8:	b140      	cbz	r0, 80071fc <_printf_float+0xf0>
 80071ea:	464b      	mov	r3, r9
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bfbc      	itt	lt
 80071f0:	232d      	movlt	r3, #45	; 0x2d
 80071f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071f6:	487f      	ldr	r0, [pc, #508]	; (80073f4 <_printf_float+0x2e8>)
 80071f8:	4b7f      	ldr	r3, [pc, #508]	; (80073f8 <_printf_float+0x2ec>)
 80071fa:	e7d1      	b.n	80071a0 <_printf_float+0x94>
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007202:	9206      	str	r2, [sp, #24]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	d13f      	bne.n	8007288 <_printf_float+0x17c>
 8007208:	2306      	movs	r3, #6
 800720a:	6063      	str	r3, [r4, #4]
 800720c:	9b05      	ldr	r3, [sp, #20]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007214:	2300      	movs	r3, #0
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	ab0a      	add	r3, sp, #40	; 0x28
 800721a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800721e:	ab09      	add	r3, sp, #36	; 0x24
 8007220:	ec49 8b10 	vmov	d0, r8, r9
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800722c:	4628      	mov	r0, r5
 800722e:	f7ff fecd 	bl	8006fcc <__cvt>
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007236:	2b47      	cmp	r3, #71	; 0x47
 8007238:	4680      	mov	r8, r0
 800723a:	d108      	bne.n	800724e <_printf_float+0x142>
 800723c:	1cc8      	adds	r0, r1, #3
 800723e:	db02      	blt.n	8007246 <_printf_float+0x13a>
 8007240:	6863      	ldr	r3, [r4, #4]
 8007242:	4299      	cmp	r1, r3
 8007244:	dd41      	ble.n	80072ca <_printf_float+0x1be>
 8007246:	f1ab 0b02 	sub.w	fp, fp, #2
 800724a:	fa5f fb8b 	uxtb.w	fp, fp
 800724e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007252:	d820      	bhi.n	8007296 <_printf_float+0x18a>
 8007254:	3901      	subs	r1, #1
 8007256:	465a      	mov	r2, fp
 8007258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800725c:	9109      	str	r1, [sp, #36]	; 0x24
 800725e:	f7ff ff17 	bl	8007090 <__exponent>
 8007262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007264:	1813      	adds	r3, r2, r0
 8007266:	2a01      	cmp	r2, #1
 8007268:	4681      	mov	r9, r0
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	dc02      	bgt.n	8007274 <_printf_float+0x168>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	07d2      	lsls	r2, r2, #31
 8007272:	d501      	bpl.n	8007278 <_printf_float+0x16c>
 8007274:	3301      	adds	r3, #1
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800727c:	2b00      	cmp	r3, #0
 800727e:	d09c      	beq.n	80071ba <_printf_float+0xae>
 8007280:	232d      	movs	r3, #45	; 0x2d
 8007282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007286:	e798      	b.n	80071ba <_printf_float+0xae>
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	2a47      	cmp	r2, #71	; 0x47
 800728c:	d1be      	bne.n	800720c <_printf_float+0x100>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1bc      	bne.n	800720c <_printf_float+0x100>
 8007292:	2301      	movs	r3, #1
 8007294:	e7b9      	b.n	800720a <_printf_float+0xfe>
 8007296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800729a:	d118      	bne.n	80072ce <_printf_float+0x1c2>
 800729c:	2900      	cmp	r1, #0
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	dd0b      	ble.n	80072ba <_printf_float+0x1ae>
 80072a2:	6121      	str	r1, [r4, #16]
 80072a4:	b913      	cbnz	r3, 80072ac <_printf_float+0x1a0>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	07d0      	lsls	r0, r2, #31
 80072aa:	d502      	bpl.n	80072b2 <_printf_float+0x1a6>
 80072ac:	3301      	adds	r3, #1
 80072ae:	440b      	add	r3, r1
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80072b4:	f04f 0900 	mov.w	r9, #0
 80072b8:	e7de      	b.n	8007278 <_printf_float+0x16c>
 80072ba:	b913      	cbnz	r3, 80072c2 <_printf_float+0x1b6>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	07d2      	lsls	r2, r2, #31
 80072c0:	d501      	bpl.n	80072c6 <_printf_float+0x1ba>
 80072c2:	3302      	adds	r3, #2
 80072c4:	e7f4      	b.n	80072b0 <_printf_float+0x1a4>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e7f2      	b.n	80072b0 <_printf_float+0x1a4>
 80072ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d0:	4299      	cmp	r1, r3
 80072d2:	db05      	blt.n	80072e0 <_printf_float+0x1d4>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	6121      	str	r1, [r4, #16]
 80072d8:	07d8      	lsls	r0, r3, #31
 80072da:	d5ea      	bpl.n	80072b2 <_printf_float+0x1a6>
 80072dc:	1c4b      	adds	r3, r1, #1
 80072de:	e7e7      	b.n	80072b0 <_printf_float+0x1a4>
 80072e0:	2900      	cmp	r1, #0
 80072e2:	bfd4      	ite	le
 80072e4:	f1c1 0202 	rsble	r2, r1, #2
 80072e8:	2201      	movgt	r2, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	e7e0      	b.n	80072b0 <_printf_float+0x1a4>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	055a      	lsls	r2, r3, #21
 80072f2:	d407      	bmi.n	8007304 <_printf_float+0x1f8>
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	4642      	mov	r2, r8
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	d12c      	bne.n	800735c <_printf_float+0x250>
 8007302:	e764      	b.n	80071ce <_printf_float+0xc2>
 8007304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007308:	f240 80e0 	bls.w	80074cc <_printf_float+0x3c0>
 800730c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007310:	2200      	movs	r2, #0
 8007312:	2300      	movs	r3, #0
 8007314:	f7f9 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007318:	2800      	cmp	r0, #0
 800731a:	d034      	beq.n	8007386 <_printf_float+0x27a>
 800731c:	4a37      	ldr	r2, [pc, #220]	; (80073fc <_printf_float+0x2f0>)
 800731e:	2301      	movs	r3, #1
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af51 	beq.w	80071ce <_printf_float+0xc2>
 800732c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007330:	429a      	cmp	r2, r3
 8007332:	db02      	blt.n	800733a <_printf_float+0x22e>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07d8      	lsls	r0, r3, #31
 8007338:	d510      	bpl.n	800735c <_printf_float+0x250>
 800733a:	ee18 3a10 	vmov	r3, s16
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f af41 	beq.w	80071ce <_printf_float+0xc2>
 800734c:	f04f 0800 	mov.w	r8, #0
 8007350:	f104 091a 	add.w	r9, r4, #26
 8007354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007356:	3b01      	subs	r3, #1
 8007358:	4543      	cmp	r3, r8
 800735a:	dc09      	bgt.n	8007370 <_printf_float+0x264>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	079b      	lsls	r3, r3, #30
 8007360:	f100 8105 	bmi.w	800756e <_printf_float+0x462>
 8007364:	68e0      	ldr	r0, [r4, #12]
 8007366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007368:	4298      	cmp	r0, r3
 800736a:	bfb8      	it	lt
 800736c:	4618      	movlt	r0, r3
 800736e:	e730      	b.n	80071d2 <_printf_float+0xc6>
 8007370:	2301      	movs	r3, #1
 8007372:	464a      	mov	r2, r9
 8007374:	4631      	mov	r1, r6
 8007376:	4628      	mov	r0, r5
 8007378:	47b8      	blx	r7
 800737a:	3001      	adds	r0, #1
 800737c:	f43f af27 	beq.w	80071ce <_printf_float+0xc2>
 8007380:	f108 0801 	add.w	r8, r8, #1
 8007384:	e7e6      	b.n	8007354 <_printf_float+0x248>
 8007386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	dc39      	bgt.n	8007400 <_printf_float+0x2f4>
 800738c:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <_printf_float+0x2f0>)
 800738e:	2301      	movs	r3, #1
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f af19 	beq.w	80071ce <_printf_float+0xc2>
 800739c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a0:	4313      	orrs	r3, r2
 80073a2:	d102      	bne.n	80073aa <_printf_float+0x29e>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d5d8      	bpl.n	800735c <_printf_float+0x250>
 80073aa:	ee18 3a10 	vmov	r3, s16
 80073ae:	4652      	mov	r2, sl
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f af09 	beq.w	80071ce <_printf_float+0xc2>
 80073bc:	f04f 0900 	mov.w	r9, #0
 80073c0:	f104 0a1a 	add.w	sl, r4, #26
 80073c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c6:	425b      	negs	r3, r3
 80073c8:	454b      	cmp	r3, r9
 80073ca:	dc01      	bgt.n	80073d0 <_printf_float+0x2c4>
 80073cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ce:	e792      	b.n	80072f6 <_printf_float+0x1ea>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4652      	mov	r2, sl
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f aef7 	beq.w	80071ce <_printf_float+0xc2>
 80073e0:	f109 0901 	add.w	r9, r9, #1
 80073e4:	e7ee      	b.n	80073c4 <_printf_float+0x2b8>
 80073e6:	bf00      	nop
 80073e8:	7fefffff 	.word	0x7fefffff
 80073ec:	0800a554 	.word	0x0800a554
 80073f0:	0800a558 	.word	0x0800a558
 80073f4:	0800a560 	.word	0x0800a560
 80073f8:	0800a55c 	.word	0x0800a55c
 80073fc:	0800a564 	.word	0x0800a564
 8007400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007404:	429a      	cmp	r2, r3
 8007406:	bfa8      	it	ge
 8007408:	461a      	movge	r2, r3
 800740a:	2a00      	cmp	r2, #0
 800740c:	4691      	mov	r9, r2
 800740e:	dc37      	bgt.n	8007480 <_printf_float+0x374>
 8007410:	f04f 0b00 	mov.w	fp, #0
 8007414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007418:	f104 021a 	add.w	r2, r4, #26
 800741c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800741e:	9305      	str	r3, [sp, #20]
 8007420:	eba3 0309 	sub.w	r3, r3, r9
 8007424:	455b      	cmp	r3, fp
 8007426:	dc33      	bgt.n	8007490 <_printf_float+0x384>
 8007428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800742c:	429a      	cmp	r2, r3
 800742e:	db3b      	blt.n	80074a8 <_printf_float+0x39c>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	07da      	lsls	r2, r3, #31
 8007434:	d438      	bmi.n	80074a8 <_printf_float+0x39c>
 8007436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007438:	9a05      	ldr	r2, [sp, #20]
 800743a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800743c:	1a9a      	subs	r2, r3, r2
 800743e:	eba3 0901 	sub.w	r9, r3, r1
 8007442:	4591      	cmp	r9, r2
 8007444:	bfa8      	it	ge
 8007446:	4691      	movge	r9, r2
 8007448:	f1b9 0f00 	cmp.w	r9, #0
 800744c:	dc35      	bgt.n	80074ba <_printf_float+0x3ae>
 800744e:	f04f 0800 	mov.w	r8, #0
 8007452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007456:	f104 0a1a 	add.w	sl, r4, #26
 800745a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	eba3 0309 	sub.w	r3, r3, r9
 8007464:	4543      	cmp	r3, r8
 8007466:	f77f af79 	ble.w	800735c <_printf_float+0x250>
 800746a:	2301      	movs	r3, #1
 800746c:	4652      	mov	r2, sl
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f aeaa 	beq.w	80071ce <_printf_float+0xc2>
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	e7ec      	b.n	800745a <_printf_float+0x34e>
 8007480:	4613      	mov	r3, r2
 8007482:	4631      	mov	r1, r6
 8007484:	4642      	mov	r2, r8
 8007486:	4628      	mov	r0, r5
 8007488:	47b8      	blx	r7
 800748a:	3001      	adds	r0, #1
 800748c:	d1c0      	bne.n	8007410 <_printf_float+0x304>
 800748e:	e69e      	b.n	80071ce <_printf_float+0xc2>
 8007490:	2301      	movs	r3, #1
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	9205      	str	r2, [sp, #20]
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	f43f ae97 	beq.w	80071ce <_printf_float+0xc2>
 80074a0:	9a05      	ldr	r2, [sp, #20]
 80074a2:	f10b 0b01 	add.w	fp, fp, #1
 80074a6:	e7b9      	b.n	800741c <_printf_float+0x310>
 80074a8:	ee18 3a10 	vmov	r3, s16
 80074ac:	4652      	mov	r2, sl
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d1be      	bne.n	8007436 <_printf_float+0x32a>
 80074b8:	e689      	b.n	80071ce <_printf_float+0xc2>
 80074ba:	9a05      	ldr	r2, [sp, #20]
 80074bc:	464b      	mov	r3, r9
 80074be:	4442      	add	r2, r8
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	d1c1      	bne.n	800744e <_printf_float+0x342>
 80074ca:	e680      	b.n	80071ce <_printf_float+0xc2>
 80074cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ce:	2a01      	cmp	r2, #1
 80074d0:	dc01      	bgt.n	80074d6 <_printf_float+0x3ca>
 80074d2:	07db      	lsls	r3, r3, #31
 80074d4:	d538      	bpl.n	8007548 <_printf_float+0x43c>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4642      	mov	r2, r8
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	f43f ae74 	beq.w	80071ce <_printf_float+0xc2>
 80074e6:	ee18 3a10 	vmov	r3, s16
 80074ea:	4652      	mov	r2, sl
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f ae6b 	beq.w	80071ce <_printf_float+0xc2>
 80074f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074fc:	2200      	movs	r2, #0
 80074fe:	2300      	movs	r3, #0
 8007500:	f7f9 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007504:	b9d8      	cbnz	r0, 800753e <_printf_float+0x432>
 8007506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007508:	f108 0201 	add.w	r2, r8, #1
 800750c:	3b01      	subs	r3, #1
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	d10e      	bne.n	8007536 <_printf_float+0x42a>
 8007518:	e659      	b.n	80071ce <_printf_float+0xc2>
 800751a:	2301      	movs	r3, #1
 800751c:	4652      	mov	r2, sl
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	f43f ae52 	beq.w	80071ce <_printf_float+0xc2>
 800752a:	f108 0801 	add.w	r8, r8, #1
 800752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007530:	3b01      	subs	r3, #1
 8007532:	4543      	cmp	r3, r8
 8007534:	dcf1      	bgt.n	800751a <_printf_float+0x40e>
 8007536:	464b      	mov	r3, r9
 8007538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800753c:	e6dc      	b.n	80072f8 <_printf_float+0x1ec>
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	f104 0a1a 	add.w	sl, r4, #26
 8007546:	e7f2      	b.n	800752e <_printf_float+0x422>
 8007548:	2301      	movs	r3, #1
 800754a:	4642      	mov	r2, r8
 800754c:	e7df      	b.n	800750e <_printf_float+0x402>
 800754e:	2301      	movs	r3, #1
 8007550:	464a      	mov	r2, r9
 8007552:	4631      	mov	r1, r6
 8007554:	4628      	mov	r0, r5
 8007556:	47b8      	blx	r7
 8007558:	3001      	adds	r0, #1
 800755a:	f43f ae38 	beq.w	80071ce <_printf_float+0xc2>
 800755e:	f108 0801 	add.w	r8, r8, #1
 8007562:	68e3      	ldr	r3, [r4, #12]
 8007564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007566:	1a5b      	subs	r3, r3, r1
 8007568:	4543      	cmp	r3, r8
 800756a:	dcf0      	bgt.n	800754e <_printf_float+0x442>
 800756c:	e6fa      	b.n	8007364 <_printf_float+0x258>
 800756e:	f04f 0800 	mov.w	r8, #0
 8007572:	f104 0919 	add.w	r9, r4, #25
 8007576:	e7f4      	b.n	8007562 <_printf_float+0x456>

08007578 <_printf_common>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	4616      	mov	r6, r2
 800757e:	4699      	mov	r9, r3
 8007580:	688a      	ldr	r2, [r1, #8]
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007588:	4293      	cmp	r3, r2
 800758a:	bfb8      	it	lt
 800758c:	4613      	movlt	r3, r2
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007594:	4607      	mov	r7, r0
 8007596:	460c      	mov	r4, r1
 8007598:	b10a      	cbz	r2, 800759e <_printf_common+0x26>
 800759a:	3301      	adds	r3, #1
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	0699      	lsls	r1, r3, #26
 80075a2:	bf42      	ittt	mi
 80075a4:	6833      	ldrmi	r3, [r6, #0]
 80075a6:	3302      	addmi	r3, #2
 80075a8:	6033      	strmi	r3, [r6, #0]
 80075aa:	6825      	ldr	r5, [r4, #0]
 80075ac:	f015 0506 	ands.w	r5, r5, #6
 80075b0:	d106      	bne.n	80075c0 <_printf_common+0x48>
 80075b2:	f104 0a19 	add.w	sl, r4, #25
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	6832      	ldr	r2, [r6, #0]
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc26      	bgt.n	800760e <_printf_common+0x96>
 80075c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075c4:	1e13      	subs	r3, r2, #0
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	bf18      	it	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	0692      	lsls	r2, r2, #26
 80075ce:	d42b      	bmi.n	8007628 <_printf_common+0xb0>
 80075d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075d4:	4649      	mov	r1, r9
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	3001      	adds	r0, #1
 80075dc:	d01e      	beq.n	800761c <_printf_common+0xa4>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	68e5      	ldr	r5, [r4, #12]
 80075e2:	6832      	ldr	r2, [r6, #0]
 80075e4:	f003 0306 	and.w	r3, r3, #6
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	bf08      	it	eq
 80075ec:	1aad      	subeq	r5, r5, r2
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	bf0c      	ite	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	2500      	movne	r5, #0
 80075fa:	4293      	cmp	r3, r2
 80075fc:	bfc4      	itt	gt
 80075fe:	1a9b      	subgt	r3, r3, r2
 8007600:	18ed      	addgt	r5, r5, r3
 8007602:	2600      	movs	r6, #0
 8007604:	341a      	adds	r4, #26
 8007606:	42b5      	cmp	r5, r6
 8007608:	d11a      	bne.n	8007640 <_printf_common+0xc8>
 800760a:	2000      	movs	r0, #0
 800760c:	e008      	b.n	8007620 <_printf_common+0xa8>
 800760e:	2301      	movs	r3, #1
 8007610:	4652      	mov	r2, sl
 8007612:	4649      	mov	r1, r9
 8007614:	4638      	mov	r0, r7
 8007616:	47c0      	blx	r8
 8007618:	3001      	adds	r0, #1
 800761a:	d103      	bne.n	8007624 <_printf_common+0xac>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007624:	3501      	adds	r5, #1
 8007626:	e7c6      	b.n	80075b6 <_printf_common+0x3e>
 8007628:	18e1      	adds	r1, r4, r3
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	2030      	movs	r0, #48	; 0x30
 800762e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007632:	4422      	add	r2, r4
 8007634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800763c:	3302      	adds	r3, #2
 800763e:	e7c7      	b.n	80075d0 <_printf_common+0x58>
 8007640:	2301      	movs	r3, #1
 8007642:	4622      	mov	r2, r4
 8007644:	4649      	mov	r1, r9
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	3001      	adds	r0, #1
 800764c:	d0e6      	beq.n	800761c <_printf_common+0xa4>
 800764e:	3601      	adds	r6, #1
 8007650:	e7d9      	b.n	8007606 <_printf_common+0x8e>
	...

08007654 <_printf_i>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	7e0f      	ldrb	r7, [r1, #24]
 800765a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800765c:	2f78      	cmp	r7, #120	; 0x78
 800765e:	4691      	mov	r9, r2
 8007660:	4680      	mov	r8, r0
 8007662:	460c      	mov	r4, r1
 8007664:	469a      	mov	sl, r3
 8007666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800766a:	d807      	bhi.n	800767c <_printf_i+0x28>
 800766c:	2f62      	cmp	r7, #98	; 0x62
 800766e:	d80a      	bhi.n	8007686 <_printf_i+0x32>
 8007670:	2f00      	cmp	r7, #0
 8007672:	f000 80d8 	beq.w	8007826 <_printf_i+0x1d2>
 8007676:	2f58      	cmp	r7, #88	; 0x58
 8007678:	f000 80a3 	beq.w	80077c2 <_printf_i+0x16e>
 800767c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007684:	e03a      	b.n	80076fc <_printf_i+0xa8>
 8007686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800768a:	2b15      	cmp	r3, #21
 800768c:	d8f6      	bhi.n	800767c <_printf_i+0x28>
 800768e:	a101      	add	r1, pc, #4	; (adr r1, 8007694 <_printf_i+0x40>)
 8007690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007694:	080076ed 	.word	0x080076ed
 8007698:	08007701 	.word	0x08007701
 800769c:	0800767d 	.word	0x0800767d
 80076a0:	0800767d 	.word	0x0800767d
 80076a4:	0800767d 	.word	0x0800767d
 80076a8:	0800767d 	.word	0x0800767d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800767d 	.word	0x0800767d
 80076b4:	0800767d 	.word	0x0800767d
 80076b8:	0800767d 	.word	0x0800767d
 80076bc:	0800767d 	.word	0x0800767d
 80076c0:	0800780d 	.word	0x0800780d
 80076c4:	08007731 	.word	0x08007731
 80076c8:	080077ef 	.word	0x080077ef
 80076cc:	0800767d 	.word	0x0800767d
 80076d0:	0800767d 	.word	0x0800767d
 80076d4:	0800782f 	.word	0x0800782f
 80076d8:	0800767d 	.word	0x0800767d
 80076dc:	08007731 	.word	0x08007731
 80076e0:	0800767d 	.word	0x0800767d
 80076e4:	0800767d 	.word	0x0800767d
 80076e8:	080077f7 	.word	0x080077f7
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	602a      	str	r2, [r5, #0]
 80076f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0a3      	b.n	8007848 <_printf_i+0x1f4>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	6829      	ldr	r1, [r5, #0]
 8007704:	0606      	lsls	r6, r0, #24
 8007706:	f101 0304 	add.w	r3, r1, #4
 800770a:	d50a      	bpl.n	8007722 <_printf_i+0xce>
 800770c:	680e      	ldr	r6, [r1, #0]
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	2e00      	cmp	r6, #0
 8007712:	da03      	bge.n	800771c <_printf_i+0xc8>
 8007714:	232d      	movs	r3, #45	; 0x2d
 8007716:	4276      	negs	r6, r6
 8007718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800771c:	485e      	ldr	r0, [pc, #376]	; (8007898 <_printf_i+0x244>)
 800771e:	230a      	movs	r3, #10
 8007720:	e019      	b.n	8007756 <_printf_i+0x102>
 8007722:	680e      	ldr	r6, [r1, #0]
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800772a:	bf18      	it	ne
 800772c:	b236      	sxthne	r6, r6
 800772e:	e7ef      	b.n	8007710 <_printf_i+0xbc>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	1d19      	adds	r1, r3, #4
 8007736:	6029      	str	r1, [r5, #0]
 8007738:	0601      	lsls	r1, r0, #24
 800773a:	d501      	bpl.n	8007740 <_printf_i+0xec>
 800773c:	681e      	ldr	r6, [r3, #0]
 800773e:	e002      	b.n	8007746 <_printf_i+0xf2>
 8007740:	0646      	lsls	r6, r0, #25
 8007742:	d5fb      	bpl.n	800773c <_printf_i+0xe8>
 8007744:	881e      	ldrh	r6, [r3, #0]
 8007746:	4854      	ldr	r0, [pc, #336]	; (8007898 <_printf_i+0x244>)
 8007748:	2f6f      	cmp	r7, #111	; 0x6f
 800774a:	bf0c      	ite	eq
 800774c:	2308      	moveq	r3, #8
 800774e:	230a      	movne	r3, #10
 8007750:	2100      	movs	r1, #0
 8007752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007756:	6865      	ldr	r5, [r4, #4]
 8007758:	60a5      	str	r5, [r4, #8]
 800775a:	2d00      	cmp	r5, #0
 800775c:	bfa2      	ittt	ge
 800775e:	6821      	ldrge	r1, [r4, #0]
 8007760:	f021 0104 	bicge.w	r1, r1, #4
 8007764:	6021      	strge	r1, [r4, #0]
 8007766:	b90e      	cbnz	r6, 800776c <_printf_i+0x118>
 8007768:	2d00      	cmp	r5, #0
 800776a:	d04d      	beq.n	8007808 <_printf_i+0x1b4>
 800776c:	4615      	mov	r5, r2
 800776e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007772:	fb03 6711 	mls	r7, r3, r1, r6
 8007776:	5dc7      	ldrb	r7, [r0, r7]
 8007778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800777c:	4637      	mov	r7, r6
 800777e:	42bb      	cmp	r3, r7
 8007780:	460e      	mov	r6, r1
 8007782:	d9f4      	bls.n	800776e <_printf_i+0x11a>
 8007784:	2b08      	cmp	r3, #8
 8007786:	d10b      	bne.n	80077a0 <_printf_i+0x14c>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	07de      	lsls	r6, r3, #31
 800778c:	d508      	bpl.n	80077a0 <_printf_i+0x14c>
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	6861      	ldr	r1, [r4, #4]
 8007792:	4299      	cmp	r1, r3
 8007794:	bfde      	ittt	le
 8007796:	2330      	movle	r3, #48	; 0x30
 8007798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800779c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077a0:	1b52      	subs	r2, r2, r5
 80077a2:	6122      	str	r2, [r4, #16]
 80077a4:	f8cd a000 	str.w	sl, [sp]
 80077a8:	464b      	mov	r3, r9
 80077aa:	aa03      	add	r2, sp, #12
 80077ac:	4621      	mov	r1, r4
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7ff fee2 	bl	8007578 <_printf_common>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d14c      	bne.n	8007852 <_printf_i+0x1fe>
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	b004      	add	sp, #16
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	4835      	ldr	r0, [pc, #212]	; (8007898 <_printf_i+0x244>)
 80077c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077c8:	6829      	ldr	r1, [r5, #0]
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80077d0:	6029      	str	r1, [r5, #0]
 80077d2:	061d      	lsls	r5, r3, #24
 80077d4:	d514      	bpl.n	8007800 <_printf_i+0x1ac>
 80077d6:	07df      	lsls	r7, r3, #31
 80077d8:	bf44      	itt	mi
 80077da:	f043 0320 	orrmi.w	r3, r3, #32
 80077de:	6023      	strmi	r3, [r4, #0]
 80077e0:	b91e      	cbnz	r6, 80077ea <_printf_i+0x196>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	f023 0320 	bic.w	r3, r3, #32
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	2310      	movs	r3, #16
 80077ec:	e7b0      	b.n	8007750 <_printf_i+0xfc>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	f043 0320 	orr.w	r3, r3, #32
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	2378      	movs	r3, #120	; 0x78
 80077f8:	4828      	ldr	r0, [pc, #160]	; (800789c <_printf_i+0x248>)
 80077fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077fe:	e7e3      	b.n	80077c8 <_printf_i+0x174>
 8007800:	0659      	lsls	r1, r3, #25
 8007802:	bf48      	it	mi
 8007804:	b2b6      	uxthmi	r6, r6
 8007806:	e7e6      	b.n	80077d6 <_printf_i+0x182>
 8007808:	4615      	mov	r5, r2
 800780a:	e7bb      	b.n	8007784 <_printf_i+0x130>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	6826      	ldr	r6, [r4, #0]
 8007810:	6961      	ldr	r1, [r4, #20]
 8007812:	1d18      	adds	r0, r3, #4
 8007814:	6028      	str	r0, [r5, #0]
 8007816:	0635      	lsls	r5, r6, #24
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	d501      	bpl.n	8007820 <_printf_i+0x1cc>
 800781c:	6019      	str	r1, [r3, #0]
 800781e:	e002      	b.n	8007826 <_printf_i+0x1d2>
 8007820:	0670      	lsls	r0, r6, #25
 8007822:	d5fb      	bpl.n	800781c <_printf_i+0x1c8>
 8007824:	8019      	strh	r1, [r3, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	6123      	str	r3, [r4, #16]
 800782a:	4615      	mov	r5, r2
 800782c:	e7ba      	b.n	80077a4 <_printf_i+0x150>
 800782e:	682b      	ldr	r3, [r5, #0]
 8007830:	1d1a      	adds	r2, r3, #4
 8007832:	602a      	str	r2, [r5, #0]
 8007834:	681d      	ldr	r5, [r3, #0]
 8007836:	6862      	ldr	r2, [r4, #4]
 8007838:	2100      	movs	r1, #0
 800783a:	4628      	mov	r0, r5
 800783c:	f7f8 fcd0 	bl	80001e0 <memchr>
 8007840:	b108      	cbz	r0, 8007846 <_printf_i+0x1f2>
 8007842:	1b40      	subs	r0, r0, r5
 8007844:	6060      	str	r0, [r4, #4]
 8007846:	6863      	ldr	r3, [r4, #4]
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	2300      	movs	r3, #0
 800784c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007850:	e7a8      	b.n	80077a4 <_printf_i+0x150>
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	462a      	mov	r2, r5
 8007856:	4649      	mov	r1, r9
 8007858:	4640      	mov	r0, r8
 800785a:	47d0      	blx	sl
 800785c:	3001      	adds	r0, #1
 800785e:	d0ab      	beq.n	80077b8 <_printf_i+0x164>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	079b      	lsls	r3, r3, #30
 8007864:	d413      	bmi.n	800788e <_printf_i+0x23a>
 8007866:	68e0      	ldr	r0, [r4, #12]
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	4298      	cmp	r0, r3
 800786c:	bfb8      	it	lt
 800786e:	4618      	movlt	r0, r3
 8007870:	e7a4      	b.n	80077bc <_printf_i+0x168>
 8007872:	2301      	movs	r3, #1
 8007874:	4632      	mov	r2, r6
 8007876:	4649      	mov	r1, r9
 8007878:	4640      	mov	r0, r8
 800787a:	47d0      	blx	sl
 800787c:	3001      	adds	r0, #1
 800787e:	d09b      	beq.n	80077b8 <_printf_i+0x164>
 8007880:	3501      	adds	r5, #1
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	9903      	ldr	r1, [sp, #12]
 8007886:	1a5b      	subs	r3, r3, r1
 8007888:	42ab      	cmp	r3, r5
 800788a:	dcf2      	bgt.n	8007872 <_printf_i+0x21e>
 800788c:	e7eb      	b.n	8007866 <_printf_i+0x212>
 800788e:	2500      	movs	r5, #0
 8007890:	f104 0619 	add.w	r6, r4, #25
 8007894:	e7f5      	b.n	8007882 <_printf_i+0x22e>
 8007896:	bf00      	nop
 8007898:	0800a566 	.word	0x0800a566
 800789c:	0800a577 	.word	0x0800a577

080078a0 <siprintf>:
 80078a0:	b40e      	push	{r1, r2, r3}
 80078a2:	b500      	push	{lr}
 80078a4:	b09c      	sub	sp, #112	; 0x70
 80078a6:	ab1d      	add	r3, sp, #116	; 0x74
 80078a8:	9002      	str	r0, [sp, #8]
 80078aa:	9006      	str	r0, [sp, #24]
 80078ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078b0:	4809      	ldr	r0, [pc, #36]	; (80078d8 <siprintf+0x38>)
 80078b2:	9107      	str	r1, [sp, #28]
 80078b4:	9104      	str	r1, [sp, #16]
 80078b6:	4909      	ldr	r1, [pc, #36]	; (80078dc <siprintf+0x3c>)
 80078b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078bc:	9105      	str	r1, [sp, #20]
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	a902      	add	r1, sp, #8
 80078c4:	f001 fb76 	bl	8008fb4 <_svfiprintf_r>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	b01c      	add	sp, #112	; 0x70
 80078d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d4:	b003      	add	sp, #12
 80078d6:	4770      	bx	lr
 80078d8:	20000014 	.word	0x20000014
 80078dc:	ffff0208 	.word	0xffff0208

080078e0 <quorem>:
 80078e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	6903      	ldr	r3, [r0, #16]
 80078e6:	690c      	ldr	r4, [r1, #16]
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	4607      	mov	r7, r0
 80078ec:	f2c0 8081 	blt.w	80079f2 <quorem+0x112>
 80078f0:	3c01      	subs	r4, #1
 80078f2:	f101 0814 	add.w	r8, r1, #20
 80078f6:	f100 0514 	add.w	r5, r0, #20
 80078fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007908:	3301      	adds	r3, #1
 800790a:	429a      	cmp	r2, r3
 800790c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007914:	fbb2 f6f3 	udiv	r6, r2, r3
 8007918:	d331      	bcc.n	800797e <quorem+0x9e>
 800791a:	f04f 0e00 	mov.w	lr, #0
 800791e:	4640      	mov	r0, r8
 8007920:	46ac      	mov	ip, r5
 8007922:	46f2      	mov	sl, lr
 8007924:	f850 2b04 	ldr.w	r2, [r0], #4
 8007928:	b293      	uxth	r3, r2
 800792a:	fb06 e303 	mla	r3, r6, r3, lr
 800792e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007932:	b29b      	uxth	r3, r3
 8007934:	ebaa 0303 	sub.w	r3, sl, r3
 8007938:	f8dc a000 	ldr.w	sl, [ip]
 800793c:	0c12      	lsrs	r2, r2, #16
 800793e:	fa13 f38a 	uxtah	r3, r3, sl
 8007942:	fb06 e202 	mla	r2, r6, r2, lr
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800794e:	b292      	uxth	r2, r2
 8007950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007958:	f8bd 3000 	ldrh.w	r3, [sp]
 800795c:	4581      	cmp	r9, r0
 800795e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007962:	f84c 3b04 	str.w	r3, [ip], #4
 8007966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800796a:	d2db      	bcs.n	8007924 <quorem+0x44>
 800796c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007970:	b92b      	cbnz	r3, 800797e <quorem+0x9e>
 8007972:	9b01      	ldr	r3, [sp, #4]
 8007974:	3b04      	subs	r3, #4
 8007976:	429d      	cmp	r5, r3
 8007978:	461a      	mov	r2, r3
 800797a:	d32e      	bcc.n	80079da <quorem+0xfa>
 800797c:	613c      	str	r4, [r7, #16]
 800797e:	4638      	mov	r0, r7
 8007980:	f001 f8c4 	bl	8008b0c <__mcmp>
 8007984:	2800      	cmp	r0, #0
 8007986:	db24      	blt.n	80079d2 <quorem+0xf2>
 8007988:	3601      	adds	r6, #1
 800798a:	4628      	mov	r0, r5
 800798c:	f04f 0c00 	mov.w	ip, #0
 8007990:	f858 2b04 	ldr.w	r2, [r8], #4
 8007994:	f8d0 e000 	ldr.w	lr, [r0]
 8007998:	b293      	uxth	r3, r2
 800799a:	ebac 0303 	sub.w	r3, ip, r3
 800799e:	0c12      	lsrs	r2, r2, #16
 80079a0:	fa13 f38e 	uxtah	r3, r3, lr
 80079a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079b2:	45c1      	cmp	r9, r8
 80079b4:	f840 3b04 	str.w	r3, [r0], #4
 80079b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079bc:	d2e8      	bcs.n	8007990 <quorem+0xb0>
 80079be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079c6:	b922      	cbnz	r2, 80079d2 <quorem+0xf2>
 80079c8:	3b04      	subs	r3, #4
 80079ca:	429d      	cmp	r5, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	d30a      	bcc.n	80079e6 <quorem+0x106>
 80079d0:	613c      	str	r4, [r7, #16]
 80079d2:	4630      	mov	r0, r6
 80079d4:	b003      	add	sp, #12
 80079d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	3b04      	subs	r3, #4
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d1cc      	bne.n	800797c <quorem+0x9c>
 80079e2:	3c01      	subs	r4, #1
 80079e4:	e7c7      	b.n	8007976 <quorem+0x96>
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	3b04      	subs	r3, #4
 80079ea:	2a00      	cmp	r2, #0
 80079ec:	d1f0      	bne.n	80079d0 <quorem+0xf0>
 80079ee:	3c01      	subs	r4, #1
 80079f0:	e7eb      	b.n	80079ca <quorem+0xea>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e7ee      	b.n	80079d4 <quorem+0xf4>
	...

080079f8 <_dtoa_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	ed2d 8b04 	vpush	{d8-d9}
 8007a00:	ec57 6b10 	vmov	r6, r7, d0
 8007a04:	b093      	sub	sp, #76	; 0x4c
 8007a06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a0c:	9106      	str	r1, [sp, #24]
 8007a0e:	ee10 aa10 	vmov	sl, s0
 8007a12:	4604      	mov	r4, r0
 8007a14:	9209      	str	r2, [sp, #36]	; 0x24
 8007a16:	930c      	str	r3, [sp, #48]	; 0x30
 8007a18:	46bb      	mov	fp, r7
 8007a1a:	b975      	cbnz	r5, 8007a3a <_dtoa_r+0x42>
 8007a1c:	2010      	movs	r0, #16
 8007a1e:	f000 fddd 	bl	80085dc <malloc>
 8007a22:	4602      	mov	r2, r0
 8007a24:	6260      	str	r0, [r4, #36]	; 0x24
 8007a26:	b920      	cbnz	r0, 8007a32 <_dtoa_r+0x3a>
 8007a28:	4ba7      	ldr	r3, [pc, #668]	; (8007cc8 <_dtoa_r+0x2d0>)
 8007a2a:	21ea      	movs	r1, #234	; 0xea
 8007a2c:	48a7      	ldr	r0, [pc, #668]	; (8007ccc <_dtoa_r+0x2d4>)
 8007a2e:	f001 fbd1 	bl	80091d4 <__assert_func>
 8007a32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a36:	6005      	str	r5, [r0, #0]
 8007a38:	60c5      	str	r5, [r0, #12]
 8007a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	b151      	cbz	r1, 8007a56 <_dtoa_r+0x5e>
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	604a      	str	r2, [r1, #4]
 8007a44:	2301      	movs	r3, #1
 8007a46:	4093      	lsls	r3, r2
 8007a48:	608b      	str	r3, [r1, #8]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fe1c 	bl	8008688 <_Bfree>
 8007a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	1e3b      	subs	r3, r7, #0
 8007a58:	bfaa      	itet	ge
 8007a5a:	2300      	movge	r3, #0
 8007a5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007a60:	f8c8 3000 	strge.w	r3, [r8]
 8007a64:	4b9a      	ldr	r3, [pc, #616]	; (8007cd0 <_dtoa_r+0x2d8>)
 8007a66:	bfbc      	itt	lt
 8007a68:	2201      	movlt	r2, #1
 8007a6a:	f8c8 2000 	strlt.w	r2, [r8]
 8007a6e:	ea33 030b 	bics.w	r3, r3, fp
 8007a72:	d11b      	bne.n	8007aac <_dtoa_r+0xb4>
 8007a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a76:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a80:	4333      	orrs	r3, r6
 8007a82:	f000 8592 	beq.w	80085aa <_dtoa_r+0xbb2>
 8007a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a88:	b963      	cbnz	r3, 8007aa4 <_dtoa_r+0xac>
 8007a8a:	4b92      	ldr	r3, [pc, #584]	; (8007cd4 <_dtoa_r+0x2dc>)
 8007a8c:	e022      	b.n	8007ad4 <_dtoa_r+0xdc>
 8007a8e:	4b92      	ldr	r3, [pc, #584]	; (8007cd8 <_dtoa_r+0x2e0>)
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	3308      	adds	r3, #8
 8007a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	9801      	ldr	r0, [sp, #4]
 8007a9a:	b013      	add	sp, #76	; 0x4c
 8007a9c:	ecbd 8b04 	vpop	{d8-d9}
 8007aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa4:	4b8b      	ldr	r3, [pc, #556]	; (8007cd4 <_dtoa_r+0x2dc>)
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	3303      	adds	r3, #3
 8007aaa:	e7f3      	b.n	8007a94 <_dtoa_r+0x9c>
 8007aac:	2200      	movs	r2, #0
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	f7f9 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ab8:	ec4b ab19 	vmov	d9, sl, fp
 8007abc:	4680      	mov	r8, r0
 8007abe:	b158      	cbz	r0, 8007ad8 <_dtoa_r+0xe0>
 8007ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 856b 	beq.w	80085a4 <_dtoa_r+0xbac>
 8007ace:	4883      	ldr	r0, [pc, #524]	; (8007cdc <_dtoa_r+0x2e4>)
 8007ad0:	6018      	str	r0, [r3, #0]
 8007ad2:	1e43      	subs	r3, r0, #1
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	e7df      	b.n	8007a98 <_dtoa_r+0xa0>
 8007ad8:	ec4b ab10 	vmov	d0, sl, fp
 8007adc:	aa10      	add	r2, sp, #64	; 0x40
 8007ade:	a911      	add	r1, sp, #68	; 0x44
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f001 f8b9 	bl	8008c58 <__d2b>
 8007ae6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007aea:	ee08 0a10 	vmov	s16, r0
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	f000 8084 	beq.w	8007bfc <_dtoa_r+0x204>
 8007af4:	ee19 3a90 	vmov	r3, s19
 8007af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007afc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b00:	4656      	mov	r6, sl
 8007b02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b0e:	4b74      	ldr	r3, [pc, #464]	; (8007ce0 <_dtoa_r+0x2e8>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	4630      	mov	r0, r6
 8007b14:	4639      	mov	r1, r7
 8007b16:	f7f8 fbb7 	bl	8000288 <__aeabi_dsub>
 8007b1a:	a365      	add	r3, pc, #404	; (adr r3, 8007cb0 <_dtoa_r+0x2b8>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	a364      	add	r3, pc, #400	; (adr r3, 8007cb8 <_dtoa_r+0x2c0>)
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	f7f8 fbaf 	bl	800028c <__adddf3>
 8007b2e:	4606      	mov	r6, r0
 8007b30:	4628      	mov	r0, r5
 8007b32:	460f      	mov	r7, r1
 8007b34:	f7f8 fcf6 	bl	8000524 <__aeabi_i2d>
 8007b38:	a361      	add	r3, pc, #388	; (adr r3, 8007cc0 <_dtoa_r+0x2c8>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f7f8 fd5b 	bl	80005f8 <__aeabi_dmul>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 fb9f 	bl	800028c <__adddf3>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460f      	mov	r7, r1
 8007b52:	f7f9 f801 	bl	8000b58 <__aeabi_d2iz>
 8007b56:	2200      	movs	r2, #0
 8007b58:	9000      	str	r0, [sp, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8007b64:	b150      	cbz	r0, 8007b7c <_dtoa_r+0x184>
 8007b66:	9800      	ldr	r0, [sp, #0]
 8007b68:	f7f8 fcdc 	bl	8000524 <__aeabi_i2d>
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	463b      	mov	r3, r7
 8007b70:	f7f8 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b74:	b910      	cbnz	r0, 8007b7c <_dtoa_r+0x184>
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	9b00      	ldr	r3, [sp, #0]
 8007b7e:	2b16      	cmp	r3, #22
 8007b80:	d85a      	bhi.n	8007c38 <_dtoa_r+0x240>
 8007b82:	9a00      	ldr	r2, [sp, #0]
 8007b84:	4b57      	ldr	r3, [pc, #348]	; (8007ce4 <_dtoa_r+0x2ec>)
 8007b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	ec51 0b19 	vmov	r0, r1, d9
 8007b92:	f7f8 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d050      	beq.n	8007c3c <_dtoa_r+0x244>
 8007b9a:	9b00      	ldr	r3, [sp, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ba6:	1b5d      	subs	r5, r3, r5
 8007ba8:	1e6b      	subs	r3, r5, #1
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	bf45      	ittet	mi
 8007bae:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bb2:	9304      	strmi	r3, [sp, #16]
 8007bb4:	2300      	movpl	r3, #0
 8007bb6:	2300      	movmi	r3, #0
 8007bb8:	bf4c      	ite	mi
 8007bba:	9305      	strmi	r3, [sp, #20]
 8007bbc:	9304      	strpl	r3, [sp, #16]
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db3d      	blt.n	8007c40 <_dtoa_r+0x248>
 8007bc4:	9b05      	ldr	r3, [sp, #20]
 8007bc6:	9a00      	ldr	r2, [sp, #0]
 8007bc8:	920a      	str	r2, [sp, #40]	; 0x28
 8007bca:	4413      	add	r3, r2
 8007bcc:	9305      	str	r3, [sp, #20]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	9b06      	ldr	r3, [sp, #24]
 8007bd4:	2b09      	cmp	r3, #9
 8007bd6:	f200 8089 	bhi.w	8007cec <_dtoa_r+0x2f4>
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	bfc4      	itt	gt
 8007bde:	3b04      	subgt	r3, #4
 8007be0:	9306      	strgt	r3, [sp, #24]
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	f1a3 0302 	sub.w	r3, r3, #2
 8007be8:	bfcc      	ite	gt
 8007bea:	2500      	movgt	r5, #0
 8007bec:	2501      	movle	r5, #1
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	f200 8087 	bhi.w	8007d02 <_dtoa_r+0x30a>
 8007bf4:	e8df f003 	tbb	[pc, r3]
 8007bf8:	59383a2d 	.word	0x59383a2d
 8007bfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c00:	441d      	add	r5, r3
 8007c02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	bfc1      	itttt	gt
 8007c0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c12:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c1a:	bfda      	itte	le
 8007c1c:	f1c3 0320 	rsble	r3, r3, #32
 8007c20:	fa06 f003 	lslle.w	r0, r6, r3
 8007c24:	4318      	orrgt	r0, r3
 8007c26:	f7f8 fc6d 	bl	8000504 <__aeabi_ui2d>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c32:	3d01      	subs	r5, #1
 8007c34:	930e      	str	r3, [sp, #56]	; 0x38
 8007c36:	e76a      	b.n	8007b0e <_dtoa_r+0x116>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e7b2      	b.n	8007ba2 <_dtoa_r+0x1aa>
 8007c3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c3e:	e7b1      	b.n	8007ba4 <_dtoa_r+0x1ac>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	9a00      	ldr	r2, [sp, #0]
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	4253      	negs	r3, r2
 8007c4a:	9307      	str	r3, [sp, #28]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c50:	e7bf      	b.n	8007bd2 <_dtoa_r+0x1da>
 8007c52:	2300      	movs	r3, #0
 8007c54:	9308      	str	r3, [sp, #32]
 8007c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dc55      	bgt.n	8007d08 <_dtoa_r+0x310>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c62:	461a      	mov	r2, r3
 8007c64:	9209      	str	r2, [sp, #36]	; 0x24
 8007c66:	e00c      	b.n	8007c82 <_dtoa_r+0x28a>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e7f3      	b.n	8007c54 <_dtoa_r+0x25c>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c70:	9308      	str	r3, [sp, #32]
 8007c72:	9b00      	ldr	r3, [sp, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	9302      	str	r3, [sp, #8]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	9303      	str	r3, [sp, #12]
 8007c7e:	bfb8      	it	lt
 8007c80:	2301      	movlt	r3, #1
 8007c82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007c84:	2200      	movs	r2, #0
 8007c86:	6042      	str	r2, [r0, #4]
 8007c88:	2204      	movs	r2, #4
 8007c8a:	f102 0614 	add.w	r6, r2, #20
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	6841      	ldr	r1, [r0, #4]
 8007c92:	d93d      	bls.n	8007d10 <_dtoa_r+0x318>
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fcb7 	bl	8008608 <_Balloc>
 8007c9a:	9001      	str	r0, [sp, #4]
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d13b      	bne.n	8007d18 <_dtoa_r+0x320>
 8007ca0:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <_dtoa_r+0x2f0>)
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ca8:	e6c0      	b.n	8007a2c <_dtoa_r+0x34>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7df      	b.n	8007c6e <_dtoa_r+0x276>
 8007cae:	bf00      	nop
 8007cb0:	636f4361 	.word	0x636f4361
 8007cb4:	3fd287a7 	.word	0x3fd287a7
 8007cb8:	8b60c8b3 	.word	0x8b60c8b3
 8007cbc:	3fc68a28 	.word	0x3fc68a28
 8007cc0:	509f79fb 	.word	0x509f79fb
 8007cc4:	3fd34413 	.word	0x3fd34413
 8007cc8:	0800a595 	.word	0x0800a595
 8007ccc:	0800a5ac 	.word	0x0800a5ac
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	0800a591 	.word	0x0800a591
 8007cd8:	0800a588 	.word	0x0800a588
 8007cdc:	0800a565 	.word	0x0800a565
 8007ce0:	3ff80000 	.word	0x3ff80000
 8007ce4:	0800a6a0 	.word	0x0800a6a0
 8007ce8:	0800a607 	.word	0x0800a607
 8007cec:	2501      	movs	r5, #1
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9306      	str	r3, [sp, #24]
 8007cf2:	9508      	str	r5, [sp, #32]
 8007cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2312      	movs	r3, #18
 8007d00:	e7b0      	b.n	8007c64 <_dtoa_r+0x26c>
 8007d02:	2301      	movs	r3, #1
 8007d04:	9308      	str	r3, [sp, #32]
 8007d06:	e7f5      	b.n	8007cf4 <_dtoa_r+0x2fc>
 8007d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d0e:	e7b8      	b.n	8007c82 <_dtoa_r+0x28a>
 8007d10:	3101      	adds	r1, #1
 8007d12:	6041      	str	r1, [r0, #4]
 8007d14:	0052      	lsls	r2, r2, #1
 8007d16:	e7b8      	b.n	8007c8a <_dtoa_r+0x292>
 8007d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d1a:	9a01      	ldr	r2, [sp, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	2b0e      	cmp	r3, #14
 8007d22:	f200 809d 	bhi.w	8007e60 <_dtoa_r+0x468>
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	f000 809a 	beq.w	8007e60 <_dtoa_r+0x468>
 8007d2c:	9b00      	ldr	r3, [sp, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd32      	ble.n	8007d98 <_dtoa_r+0x3a0>
 8007d32:	4ab7      	ldr	r2, [pc, #732]	; (8008010 <_dtoa_r+0x618>)
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d40:	9b00      	ldr	r3, [sp, #0]
 8007d42:	05d8      	lsls	r0, r3, #23
 8007d44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d48:	d516      	bpl.n	8007d78 <_dtoa_r+0x380>
 8007d4a:	4bb2      	ldr	r3, [pc, #712]	; (8008014 <_dtoa_r+0x61c>)
 8007d4c:	ec51 0b19 	vmov	r0, r1, d9
 8007d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d54:	f7f8 fd7a 	bl	800084c <__aeabi_ddiv>
 8007d58:	f007 070f 	and.w	r7, r7, #15
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	468b      	mov	fp, r1
 8007d60:	2503      	movs	r5, #3
 8007d62:	4eac      	ldr	r6, [pc, #688]	; (8008014 <_dtoa_r+0x61c>)
 8007d64:	b957      	cbnz	r7, 8007d7c <_dtoa_r+0x384>
 8007d66:	4642      	mov	r2, r8
 8007d68:	464b      	mov	r3, r9
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	f7f8 fd6d 	bl	800084c <__aeabi_ddiv>
 8007d72:	4682      	mov	sl, r0
 8007d74:	468b      	mov	fp, r1
 8007d76:	e028      	b.n	8007dca <_dtoa_r+0x3d2>
 8007d78:	2502      	movs	r5, #2
 8007d7a:	e7f2      	b.n	8007d62 <_dtoa_r+0x36a>
 8007d7c:	07f9      	lsls	r1, r7, #31
 8007d7e:	d508      	bpl.n	8007d92 <_dtoa_r+0x39a>
 8007d80:	4640      	mov	r0, r8
 8007d82:	4649      	mov	r1, r9
 8007d84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4689      	mov	r9, r1
 8007d92:	107f      	asrs	r7, r7, #1
 8007d94:	3608      	adds	r6, #8
 8007d96:	e7e5      	b.n	8007d64 <_dtoa_r+0x36c>
 8007d98:	f000 809b 	beq.w	8007ed2 <_dtoa_r+0x4da>
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	4f9d      	ldr	r7, [pc, #628]	; (8008014 <_dtoa_r+0x61c>)
 8007da0:	425e      	negs	r6, r3
 8007da2:	4b9b      	ldr	r3, [pc, #620]	; (8008010 <_dtoa_r+0x618>)
 8007da4:	f006 020f 	and.w	r2, r6, #15
 8007da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	ec51 0b19 	vmov	r0, r1, d9
 8007db4:	f7f8 fc20 	bl	80005f8 <__aeabi_dmul>
 8007db8:	1136      	asrs	r6, r6, #4
 8007dba:	4682      	mov	sl, r0
 8007dbc:	468b      	mov	fp, r1
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2502      	movs	r5, #2
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d17a      	bne.n	8007ebc <_dtoa_r+0x4c4>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1d3      	bne.n	8007d72 <_dtoa_r+0x37a>
 8007dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8082 	beq.w	8007ed6 <_dtoa_r+0x4de>
 8007dd2:	4b91      	ldr	r3, [pc, #580]	; (8008018 <_dtoa_r+0x620>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4650      	mov	r0, sl
 8007dd8:	4659      	mov	r1, fp
 8007dda:	f7f8 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d079      	beq.n	8007ed6 <_dtoa_r+0x4de>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d076      	beq.n	8007ed6 <_dtoa_r+0x4de>
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dd36      	ble.n	8007e5c <_dtoa_r+0x464>
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	4650      	mov	r0, sl
 8007df2:	4659      	mov	r1, fp
 8007df4:	1e5f      	subs	r7, r3, #1
 8007df6:	2200      	movs	r2, #0
 8007df8:	4b88      	ldr	r3, [pc, #544]	; (800801c <_dtoa_r+0x624>)
 8007dfa:	f7f8 fbfd 	bl	80005f8 <__aeabi_dmul>
 8007dfe:	9e02      	ldr	r6, [sp, #8]
 8007e00:	4682      	mov	sl, r0
 8007e02:	468b      	mov	fp, r1
 8007e04:	3501      	adds	r5, #1
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7f8 fb8c 	bl	8000524 <__aeabi_i2d>
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	465b      	mov	r3, fp
 8007e10:	f7f8 fbf2 	bl	80005f8 <__aeabi_dmul>
 8007e14:	4b82      	ldr	r3, [pc, #520]	; (8008020 <_dtoa_r+0x628>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	f7f8 fa38 	bl	800028c <__adddf3>
 8007e1c:	46d0      	mov	r8, sl
 8007e1e:	46d9      	mov	r9, fp
 8007e20:	4682      	mov	sl, r0
 8007e22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	d158      	bne.n	8007edc <_dtoa_r+0x4e4>
 8007e2a:	4b7e      	ldr	r3, [pc, #504]	; (8008024 <_dtoa_r+0x62c>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4649      	mov	r1, r9
 8007e32:	f7f8 fa29 	bl	8000288 <__aeabi_dsub>
 8007e36:	4652      	mov	r2, sl
 8007e38:	465b      	mov	r3, fp
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	f7f8 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f040 8295 	bne.w	8008372 <_dtoa_r+0x97a>
 8007e48:	4652      	mov	r2, sl
 8007e4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fe43 	bl	8000adc <__aeabi_dcmplt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f040 8289 	bne.w	800836e <_dtoa_r+0x976>
 8007e5c:	ec5b ab19 	vmov	sl, fp, d9
 8007e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f2c0 8148 	blt.w	80080f8 <_dtoa_r+0x700>
 8007e68:	9a00      	ldr	r2, [sp, #0]
 8007e6a:	2a0e      	cmp	r2, #14
 8007e6c:	f300 8144 	bgt.w	80080f8 <_dtoa_r+0x700>
 8007e70:	4b67      	ldr	r3, [pc, #412]	; (8008010 <_dtoa_r+0x618>)
 8007e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f280 80d5 	bge.w	800802c <_dtoa_r+0x634>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f300 80d1 	bgt.w	800802c <_dtoa_r+0x634>
 8007e8a:	f040 826f 	bne.w	800836c <_dtoa_r+0x974>
 8007e8e:	4b65      	ldr	r3, [pc, #404]	; (8008024 <_dtoa_r+0x62c>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	f7f8 fbaf 	bl	80005f8 <__aeabi_dmul>
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	465b      	mov	r3, fp
 8007e9e:	f7f8 fe31 	bl	8000b04 <__aeabi_dcmpge>
 8007ea2:	9e03      	ldr	r6, [sp, #12]
 8007ea4:	4637      	mov	r7, r6
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f040 8245 	bne.w	8008336 <_dtoa_r+0x93e>
 8007eac:	9d01      	ldr	r5, [sp, #4]
 8007eae:	2331      	movs	r3, #49	; 0x31
 8007eb0:	f805 3b01 	strb.w	r3, [r5], #1
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	e240      	b.n	800833e <_dtoa_r+0x946>
 8007ebc:	07f2      	lsls	r2, r6, #31
 8007ebe:	d505      	bpl.n	8007ecc <_dtoa_r+0x4d4>
 8007ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec4:	f7f8 fb98 	bl	80005f8 <__aeabi_dmul>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	2301      	movs	r3, #1
 8007ecc:	1076      	asrs	r6, r6, #1
 8007ece:	3708      	adds	r7, #8
 8007ed0:	e777      	b.n	8007dc2 <_dtoa_r+0x3ca>
 8007ed2:	2502      	movs	r5, #2
 8007ed4:	e779      	b.n	8007dca <_dtoa_r+0x3d2>
 8007ed6:	9f00      	ldr	r7, [sp, #0]
 8007ed8:	9e03      	ldr	r6, [sp, #12]
 8007eda:	e794      	b.n	8007e06 <_dtoa_r+0x40e>
 8007edc:	9901      	ldr	r1, [sp, #4]
 8007ede:	4b4c      	ldr	r3, [pc, #304]	; (8008010 <_dtoa_r+0x618>)
 8007ee0:	4431      	add	r1, r6
 8007ee2:	910d      	str	r1, [sp, #52]	; 0x34
 8007ee4:	9908      	ldr	r1, [sp, #32]
 8007ee6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007eea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d043      	beq.n	8007f7a <_dtoa_r+0x582>
 8007ef2:	494d      	ldr	r1, [pc, #308]	; (8008028 <_dtoa_r+0x630>)
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f7f8 fca9 	bl	800084c <__aeabi_ddiv>
 8007efa:	4652      	mov	r2, sl
 8007efc:	465b      	mov	r3, fp
 8007efe:	f7f8 f9c3 	bl	8000288 <__aeabi_dsub>
 8007f02:	9d01      	ldr	r5, [sp, #4]
 8007f04:	4682      	mov	sl, r0
 8007f06:	468b      	mov	fp, r1
 8007f08:	4649      	mov	r1, r9
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7f8 fe24 	bl	8000b58 <__aeabi_d2iz>
 8007f10:	4606      	mov	r6, r0
 8007f12:	f7f8 fb07 	bl	8000524 <__aeabi_i2d>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	f7f8 f9b3 	bl	8000288 <__aeabi_dsub>
 8007f22:	3630      	adds	r6, #48	; 0x30
 8007f24:	f805 6b01 	strb.w	r6, [r5], #1
 8007f28:	4652      	mov	r2, sl
 8007f2a:	465b      	mov	r3, fp
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	4689      	mov	r9, r1
 8007f30:	f7f8 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d163      	bne.n	8008000 <_dtoa_r+0x608>
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	4936      	ldr	r1, [pc, #216]	; (8008018 <_dtoa_r+0x620>)
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f7f8 f9a2 	bl	8000288 <__aeabi_dsub>
 8007f44:	4652      	mov	r2, sl
 8007f46:	465b      	mov	r3, fp
 8007f48:	f7f8 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f040 80b5 	bne.w	80080bc <_dtoa_r+0x6c4>
 8007f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f54:	429d      	cmp	r5, r3
 8007f56:	d081      	beq.n	8007e5c <_dtoa_r+0x464>
 8007f58:	4b30      	ldr	r3, [pc, #192]	; (800801c <_dtoa_r+0x624>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	4659      	mov	r1, fp
 8007f60:	f7f8 fb4a 	bl	80005f8 <__aeabi_dmul>
 8007f64:	4b2d      	ldr	r3, [pc, #180]	; (800801c <_dtoa_r+0x624>)
 8007f66:	4682      	mov	sl, r0
 8007f68:	468b      	mov	fp, r1
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f7f8 fb42 	bl	80005f8 <__aeabi_dmul>
 8007f74:	4680      	mov	r8, r0
 8007f76:	4689      	mov	r9, r1
 8007f78:	e7c6      	b.n	8007f08 <_dtoa_r+0x510>
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	4659      	mov	r1, fp
 8007f7e:	f7f8 fb3b 	bl	80005f8 <__aeabi_dmul>
 8007f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f84:	9d01      	ldr	r5, [sp, #4]
 8007f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f88:	4682      	mov	sl, r0
 8007f8a:	468b      	mov	fp, r1
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f7f8 fde2 	bl	8000b58 <__aeabi_d2iz>
 8007f94:	4606      	mov	r6, r0
 8007f96:	f7f8 fac5 	bl	8000524 <__aeabi_i2d>
 8007f9a:	3630      	adds	r6, #48	; 0x30
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 f970 	bl	8000288 <__aeabi_dsub>
 8007fa8:	f805 6b01 	strb.w	r6, [r5], #1
 8007fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	4689      	mov	r9, r1
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	d124      	bne.n	8008004 <_dtoa_r+0x60c>
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <_dtoa_r+0x630>)
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	f7f8 f964 	bl	800028c <__adddf3>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7f8 fda4 	bl	8000b18 <__aeabi_dcmpgt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d173      	bne.n	80080bc <_dtoa_r+0x6c4>
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	465b      	mov	r3, fp
 8007fd8:	4913      	ldr	r1, [pc, #76]	; (8008028 <_dtoa_r+0x630>)
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f7f8 f954 	bl	8000288 <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	f7f8 fd78 	bl	8000adc <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f43f af35 	beq.w	8007e5c <_dtoa_r+0x464>
 8007ff2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ff4:	1e6b      	subs	r3, r5, #1
 8007ff6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ff8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ffc:	2b30      	cmp	r3, #48	; 0x30
 8007ffe:	d0f8      	beq.n	8007ff2 <_dtoa_r+0x5fa>
 8008000:	9700      	str	r7, [sp, #0]
 8008002:	e049      	b.n	8008098 <_dtoa_r+0x6a0>
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <_dtoa_r+0x624>)
 8008006:	f7f8 faf7 	bl	80005f8 <__aeabi_dmul>
 800800a:	4680      	mov	r8, r0
 800800c:	4689      	mov	r9, r1
 800800e:	e7bd      	b.n	8007f8c <_dtoa_r+0x594>
 8008010:	0800a6a0 	.word	0x0800a6a0
 8008014:	0800a678 	.word	0x0800a678
 8008018:	3ff00000 	.word	0x3ff00000
 800801c:	40240000 	.word	0x40240000
 8008020:	401c0000 	.word	0x401c0000
 8008024:	40140000 	.word	0x40140000
 8008028:	3fe00000 	.word	0x3fe00000
 800802c:	9d01      	ldr	r5, [sp, #4]
 800802e:	4656      	mov	r6, sl
 8008030:	465f      	mov	r7, fp
 8008032:	4642      	mov	r2, r8
 8008034:	464b      	mov	r3, r9
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	f7f8 fc07 	bl	800084c <__aeabi_ddiv>
 800803e:	f7f8 fd8b 	bl	8000b58 <__aeabi_d2iz>
 8008042:	4682      	mov	sl, r0
 8008044:	f7f8 fa6e 	bl	8000524 <__aeabi_i2d>
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	f7f8 fad4 	bl	80005f8 <__aeabi_dmul>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800805c:	f7f8 f914 	bl	8000288 <__aeabi_dsub>
 8008060:	f805 6b01 	strb.w	r6, [r5], #1
 8008064:	9e01      	ldr	r6, [sp, #4]
 8008066:	9f03      	ldr	r7, [sp, #12]
 8008068:	1bae      	subs	r6, r5, r6
 800806a:	42b7      	cmp	r7, r6
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	d135      	bne.n	80080de <_dtoa_r+0x6e6>
 8008072:	f7f8 f90b 	bl	800028c <__adddf3>
 8008076:	4642      	mov	r2, r8
 8008078:	464b      	mov	r3, r9
 800807a:	4606      	mov	r6, r0
 800807c:	460f      	mov	r7, r1
 800807e:	f7f8 fd4b 	bl	8000b18 <__aeabi_dcmpgt>
 8008082:	b9d0      	cbnz	r0, 80080ba <_dtoa_r+0x6c2>
 8008084:	4642      	mov	r2, r8
 8008086:	464b      	mov	r3, r9
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008090:	b110      	cbz	r0, 8008098 <_dtoa_r+0x6a0>
 8008092:	f01a 0f01 	tst.w	sl, #1
 8008096:	d110      	bne.n	80080ba <_dtoa_r+0x6c2>
 8008098:	4620      	mov	r0, r4
 800809a:	ee18 1a10 	vmov	r1, s16
 800809e:	f000 faf3 	bl	8008688 <_Bfree>
 80080a2:	2300      	movs	r3, #0
 80080a4:	9800      	ldr	r0, [sp, #0]
 80080a6:	702b      	strb	r3, [r5, #0]
 80080a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080aa:	3001      	adds	r0, #1
 80080ac:	6018      	str	r0, [r3, #0]
 80080ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f43f acf1 	beq.w	8007a98 <_dtoa_r+0xa0>
 80080b6:	601d      	str	r5, [r3, #0]
 80080b8:	e4ee      	b.n	8007a98 <_dtoa_r+0xa0>
 80080ba:	9f00      	ldr	r7, [sp, #0]
 80080bc:	462b      	mov	r3, r5
 80080be:	461d      	mov	r5, r3
 80080c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080c4:	2a39      	cmp	r2, #57	; 0x39
 80080c6:	d106      	bne.n	80080d6 <_dtoa_r+0x6de>
 80080c8:	9a01      	ldr	r2, [sp, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d1f7      	bne.n	80080be <_dtoa_r+0x6c6>
 80080ce:	9901      	ldr	r1, [sp, #4]
 80080d0:	2230      	movs	r2, #48	; 0x30
 80080d2:	3701      	adds	r7, #1
 80080d4:	700a      	strb	r2, [r1, #0]
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	3201      	adds	r2, #1
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e790      	b.n	8008000 <_dtoa_r+0x608>
 80080de:	4ba6      	ldr	r3, [pc, #664]	; (8008378 <_dtoa_r+0x980>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	f7f8 fa89 	bl	80005f8 <__aeabi_dmul>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4606      	mov	r6, r0
 80080ec:	460f      	mov	r7, r1
 80080ee:	f7f8 fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d09d      	beq.n	8008032 <_dtoa_r+0x63a>
 80080f6:	e7cf      	b.n	8008098 <_dtoa_r+0x6a0>
 80080f8:	9a08      	ldr	r2, [sp, #32]
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	f000 80d7 	beq.w	80082ae <_dtoa_r+0x8b6>
 8008100:	9a06      	ldr	r2, [sp, #24]
 8008102:	2a01      	cmp	r2, #1
 8008104:	f300 80ba 	bgt.w	800827c <_dtoa_r+0x884>
 8008108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800810a:	2a00      	cmp	r2, #0
 800810c:	f000 80b2 	beq.w	8008274 <_dtoa_r+0x87c>
 8008110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008114:	9e07      	ldr	r6, [sp, #28]
 8008116:	9d04      	ldr	r5, [sp, #16]
 8008118:	9a04      	ldr	r2, [sp, #16]
 800811a:	441a      	add	r2, r3
 800811c:	9204      	str	r2, [sp, #16]
 800811e:	9a05      	ldr	r2, [sp, #20]
 8008120:	2101      	movs	r1, #1
 8008122:	441a      	add	r2, r3
 8008124:	4620      	mov	r0, r4
 8008126:	9205      	str	r2, [sp, #20]
 8008128:	f000 fb66 	bl	80087f8 <__i2b>
 800812c:	4607      	mov	r7, r0
 800812e:	2d00      	cmp	r5, #0
 8008130:	dd0c      	ble.n	800814c <_dtoa_r+0x754>
 8008132:	9b05      	ldr	r3, [sp, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dd09      	ble.n	800814c <_dtoa_r+0x754>
 8008138:	42ab      	cmp	r3, r5
 800813a:	9a04      	ldr	r2, [sp, #16]
 800813c:	bfa8      	it	ge
 800813e:	462b      	movge	r3, r5
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	9204      	str	r2, [sp, #16]
 8008144:	9a05      	ldr	r2, [sp, #20]
 8008146:	1aed      	subs	r5, r5, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	b31b      	cbz	r3, 8008198 <_dtoa_r+0x7a0>
 8008150:	9b08      	ldr	r3, [sp, #32]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 80af 	beq.w	80082b6 <_dtoa_r+0x8be>
 8008158:	2e00      	cmp	r6, #0
 800815a:	dd13      	ble.n	8008184 <_dtoa_r+0x78c>
 800815c:	4639      	mov	r1, r7
 800815e:	4632      	mov	r2, r6
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fc09 	bl	8008978 <__pow5mult>
 8008166:	ee18 2a10 	vmov	r2, s16
 800816a:	4601      	mov	r1, r0
 800816c:	4607      	mov	r7, r0
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fb58 	bl	8008824 <__multiply>
 8008174:	ee18 1a10 	vmov	r1, s16
 8008178:	4680      	mov	r8, r0
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fa84 	bl	8008688 <_Bfree>
 8008180:	ee08 8a10 	vmov	s16, r8
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	1b9a      	subs	r2, r3, r6
 8008188:	d006      	beq.n	8008198 <_dtoa_r+0x7a0>
 800818a:	ee18 1a10 	vmov	r1, s16
 800818e:	4620      	mov	r0, r4
 8008190:	f000 fbf2 	bl	8008978 <__pow5mult>
 8008194:	ee08 0a10 	vmov	s16, r0
 8008198:	2101      	movs	r1, #1
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fb2c 	bl	80087f8 <__i2b>
 80081a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	4606      	mov	r6, r0
 80081a6:	f340 8088 	ble.w	80082ba <_dtoa_r+0x8c2>
 80081aa:	461a      	mov	r2, r3
 80081ac:	4601      	mov	r1, r0
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 fbe2 	bl	8008978 <__pow5mult>
 80081b4:	9b06      	ldr	r3, [sp, #24]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	4606      	mov	r6, r0
 80081ba:	f340 8081 	ble.w	80082c0 <_dtoa_r+0x8c8>
 80081be:	f04f 0800 	mov.w	r8, #0
 80081c2:	6933      	ldr	r3, [r6, #16]
 80081c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081c8:	6918      	ldr	r0, [r3, #16]
 80081ca:	f000 fac5 	bl	8008758 <__hi0bits>
 80081ce:	f1c0 0020 	rsb	r0, r0, #32
 80081d2:	9b05      	ldr	r3, [sp, #20]
 80081d4:	4418      	add	r0, r3
 80081d6:	f010 001f 	ands.w	r0, r0, #31
 80081da:	f000 8092 	beq.w	8008302 <_dtoa_r+0x90a>
 80081de:	f1c0 0320 	rsb	r3, r0, #32
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	f340 808a 	ble.w	80082fc <_dtoa_r+0x904>
 80081e8:	f1c0 001c 	rsb	r0, r0, #28
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	4403      	add	r3, r0
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	4403      	add	r3, r0
 80081f6:	4405      	add	r5, r0
 80081f8:	9305      	str	r3, [sp, #20]
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dd07      	ble.n	8008210 <_dtoa_r+0x818>
 8008200:	ee18 1a10 	vmov	r1, s16
 8008204:	461a      	mov	r2, r3
 8008206:	4620      	mov	r0, r4
 8008208:	f000 fc10 	bl	8008a2c <__lshift>
 800820c:	ee08 0a10 	vmov	s16, r0
 8008210:	9b05      	ldr	r3, [sp, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	dd05      	ble.n	8008222 <_dtoa_r+0x82a>
 8008216:	4631      	mov	r1, r6
 8008218:	461a      	mov	r2, r3
 800821a:	4620      	mov	r0, r4
 800821c:	f000 fc06 	bl	8008a2c <__lshift>
 8008220:	4606      	mov	r6, r0
 8008222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d06e      	beq.n	8008306 <_dtoa_r+0x90e>
 8008228:	ee18 0a10 	vmov	r0, s16
 800822c:	4631      	mov	r1, r6
 800822e:	f000 fc6d 	bl	8008b0c <__mcmp>
 8008232:	2800      	cmp	r0, #0
 8008234:	da67      	bge.n	8008306 <_dtoa_r+0x90e>
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	3b01      	subs	r3, #1
 800823a:	ee18 1a10 	vmov	r1, s16
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	220a      	movs	r2, #10
 8008242:	2300      	movs	r3, #0
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fa41 	bl	80086cc <__multadd>
 800824a:	9b08      	ldr	r3, [sp, #32]
 800824c:	ee08 0a10 	vmov	s16, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 81b1 	beq.w	80085b8 <_dtoa_r+0xbc0>
 8008256:	2300      	movs	r3, #0
 8008258:	4639      	mov	r1, r7
 800825a:	220a      	movs	r2, #10
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fa35 	bl	80086cc <__multadd>
 8008262:	9b02      	ldr	r3, [sp, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	4607      	mov	r7, r0
 8008268:	f300 808e 	bgt.w	8008388 <_dtoa_r+0x990>
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	2b02      	cmp	r3, #2
 8008270:	dc51      	bgt.n	8008316 <_dtoa_r+0x91e>
 8008272:	e089      	b.n	8008388 <_dtoa_r+0x990>
 8008274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800827a:	e74b      	b.n	8008114 <_dtoa_r+0x71c>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1e5e      	subs	r6, r3, #1
 8008280:	9b07      	ldr	r3, [sp, #28]
 8008282:	42b3      	cmp	r3, r6
 8008284:	bfbf      	itttt	lt
 8008286:	9b07      	ldrlt	r3, [sp, #28]
 8008288:	9607      	strlt	r6, [sp, #28]
 800828a:	1af2      	sublt	r2, r6, r3
 800828c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800828e:	bfb6      	itet	lt
 8008290:	189b      	addlt	r3, r3, r2
 8008292:	1b9e      	subge	r6, r3, r6
 8008294:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	bfb8      	it	lt
 800829a:	2600      	movlt	r6, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	bfb7      	itett	lt
 80082a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082a8:	1a9d      	sublt	r5, r3, r2
 80082aa:	2300      	movlt	r3, #0
 80082ac:	e734      	b.n	8008118 <_dtoa_r+0x720>
 80082ae:	9e07      	ldr	r6, [sp, #28]
 80082b0:	9d04      	ldr	r5, [sp, #16]
 80082b2:	9f08      	ldr	r7, [sp, #32]
 80082b4:	e73b      	b.n	800812e <_dtoa_r+0x736>
 80082b6:	9a07      	ldr	r2, [sp, #28]
 80082b8:	e767      	b.n	800818a <_dtoa_r+0x792>
 80082ba:	9b06      	ldr	r3, [sp, #24]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	dc18      	bgt.n	80082f2 <_dtoa_r+0x8fa>
 80082c0:	f1ba 0f00 	cmp.w	sl, #0
 80082c4:	d115      	bne.n	80082f2 <_dtoa_r+0x8fa>
 80082c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082ca:	b993      	cbnz	r3, 80082f2 <_dtoa_r+0x8fa>
 80082cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082d0:	0d1b      	lsrs	r3, r3, #20
 80082d2:	051b      	lsls	r3, r3, #20
 80082d4:	b183      	cbz	r3, 80082f8 <_dtoa_r+0x900>
 80082d6:	9b04      	ldr	r3, [sp, #16]
 80082d8:	3301      	adds	r3, #1
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	9b05      	ldr	r3, [sp, #20]
 80082de:	3301      	adds	r3, #1
 80082e0:	9305      	str	r3, [sp, #20]
 80082e2:	f04f 0801 	mov.w	r8, #1
 80082e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f47f af6a 	bne.w	80081c2 <_dtoa_r+0x7ca>
 80082ee:	2001      	movs	r0, #1
 80082f0:	e76f      	b.n	80081d2 <_dtoa_r+0x7da>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	e7f6      	b.n	80082e6 <_dtoa_r+0x8ee>
 80082f8:	4698      	mov	r8, r3
 80082fa:	e7f4      	b.n	80082e6 <_dtoa_r+0x8ee>
 80082fc:	f43f af7d 	beq.w	80081fa <_dtoa_r+0x802>
 8008300:	4618      	mov	r0, r3
 8008302:	301c      	adds	r0, #28
 8008304:	e772      	b.n	80081ec <_dtoa_r+0x7f4>
 8008306:	9b03      	ldr	r3, [sp, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc37      	bgt.n	800837c <_dtoa_r+0x984>
 800830c:	9b06      	ldr	r3, [sp, #24]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dd34      	ble.n	800837c <_dtoa_r+0x984>
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	9302      	str	r3, [sp, #8]
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	b96b      	cbnz	r3, 8008336 <_dtoa_r+0x93e>
 800831a:	4631      	mov	r1, r6
 800831c:	2205      	movs	r2, #5
 800831e:	4620      	mov	r0, r4
 8008320:	f000 f9d4 	bl	80086cc <__multadd>
 8008324:	4601      	mov	r1, r0
 8008326:	4606      	mov	r6, r0
 8008328:	ee18 0a10 	vmov	r0, s16
 800832c:	f000 fbee 	bl	8008b0c <__mcmp>
 8008330:	2800      	cmp	r0, #0
 8008332:	f73f adbb 	bgt.w	8007eac <_dtoa_r+0x4b4>
 8008336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008338:	9d01      	ldr	r5, [sp, #4]
 800833a:	43db      	mvns	r3, r3
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	4631      	mov	r1, r6
 8008344:	4620      	mov	r0, r4
 8008346:	f000 f99f 	bl	8008688 <_Bfree>
 800834a:	2f00      	cmp	r7, #0
 800834c:	f43f aea4 	beq.w	8008098 <_dtoa_r+0x6a0>
 8008350:	f1b8 0f00 	cmp.w	r8, #0
 8008354:	d005      	beq.n	8008362 <_dtoa_r+0x96a>
 8008356:	45b8      	cmp	r8, r7
 8008358:	d003      	beq.n	8008362 <_dtoa_r+0x96a>
 800835a:	4641      	mov	r1, r8
 800835c:	4620      	mov	r0, r4
 800835e:	f000 f993 	bl	8008688 <_Bfree>
 8008362:	4639      	mov	r1, r7
 8008364:	4620      	mov	r0, r4
 8008366:	f000 f98f 	bl	8008688 <_Bfree>
 800836a:	e695      	b.n	8008098 <_dtoa_r+0x6a0>
 800836c:	2600      	movs	r6, #0
 800836e:	4637      	mov	r7, r6
 8008370:	e7e1      	b.n	8008336 <_dtoa_r+0x93e>
 8008372:	9700      	str	r7, [sp, #0]
 8008374:	4637      	mov	r7, r6
 8008376:	e599      	b.n	8007eac <_dtoa_r+0x4b4>
 8008378:	40240000 	.word	0x40240000
 800837c:	9b08      	ldr	r3, [sp, #32]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 80ca 	beq.w	8008518 <_dtoa_r+0xb20>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	2d00      	cmp	r5, #0
 800838a:	dd05      	ble.n	8008398 <_dtoa_r+0x9a0>
 800838c:	4639      	mov	r1, r7
 800838e:	462a      	mov	r2, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fb4b 	bl	8008a2c <__lshift>
 8008396:	4607      	mov	r7, r0
 8008398:	f1b8 0f00 	cmp.w	r8, #0
 800839c:	d05b      	beq.n	8008456 <_dtoa_r+0xa5e>
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 f931 	bl	8008608 <_Balloc>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b928      	cbnz	r0, 80083b6 <_dtoa_r+0x9be>
 80083aa:	4b87      	ldr	r3, [pc, #540]	; (80085c8 <_dtoa_r+0xbd0>)
 80083ac:	4602      	mov	r2, r0
 80083ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083b2:	f7ff bb3b 	b.w	8007a2c <_dtoa_r+0x34>
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	3202      	adds	r2, #2
 80083ba:	0092      	lsls	r2, r2, #2
 80083bc:	f107 010c 	add.w	r1, r7, #12
 80083c0:	300c      	adds	r0, #12
 80083c2:	f000 f913 	bl	80085ec <memcpy>
 80083c6:	2201      	movs	r2, #1
 80083c8:	4629      	mov	r1, r5
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fb2e 	bl	8008a2c <__lshift>
 80083d0:	9b01      	ldr	r3, [sp, #4]
 80083d2:	f103 0901 	add.w	r9, r3, #1
 80083d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	f00a 0301 	and.w	r3, sl, #1
 80083e2:	46b8      	mov	r8, r7
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	4607      	mov	r7, r0
 80083e8:	4631      	mov	r1, r6
 80083ea:	ee18 0a10 	vmov	r0, s16
 80083ee:	f7ff fa77 	bl	80078e0 <quorem>
 80083f2:	4641      	mov	r1, r8
 80083f4:	9002      	str	r0, [sp, #8]
 80083f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80083fa:	ee18 0a10 	vmov	r0, s16
 80083fe:	f000 fb85 	bl	8008b0c <__mcmp>
 8008402:	463a      	mov	r2, r7
 8008404:	9003      	str	r0, [sp, #12]
 8008406:	4631      	mov	r1, r6
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fb9b 	bl	8008b44 <__mdiff>
 800840e:	68c2      	ldr	r2, [r0, #12]
 8008410:	f109 3bff 	add.w	fp, r9, #4294967295
 8008414:	4605      	mov	r5, r0
 8008416:	bb02      	cbnz	r2, 800845a <_dtoa_r+0xa62>
 8008418:	4601      	mov	r1, r0
 800841a:	ee18 0a10 	vmov	r0, s16
 800841e:	f000 fb75 	bl	8008b0c <__mcmp>
 8008422:	4602      	mov	r2, r0
 8008424:	4629      	mov	r1, r5
 8008426:	4620      	mov	r0, r4
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	f000 f92d 	bl	8008688 <_Bfree>
 800842e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008432:	ea43 0102 	orr.w	r1, r3, r2
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	430b      	orrs	r3, r1
 800843a:	464d      	mov	r5, r9
 800843c:	d10f      	bne.n	800845e <_dtoa_r+0xa66>
 800843e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008442:	d02a      	beq.n	800849a <_dtoa_r+0xaa2>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	dd02      	ble.n	8008450 <_dtoa_r+0xa58>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008450:	f88b a000 	strb.w	sl, [fp]
 8008454:	e775      	b.n	8008342 <_dtoa_r+0x94a>
 8008456:	4638      	mov	r0, r7
 8008458:	e7ba      	b.n	80083d0 <_dtoa_r+0x9d8>
 800845a:	2201      	movs	r2, #1
 800845c:	e7e2      	b.n	8008424 <_dtoa_r+0xa2c>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	db04      	blt.n	800846e <_dtoa_r+0xa76>
 8008464:	9906      	ldr	r1, [sp, #24]
 8008466:	430b      	orrs	r3, r1
 8008468:	9904      	ldr	r1, [sp, #16]
 800846a:	430b      	orrs	r3, r1
 800846c:	d122      	bne.n	80084b4 <_dtoa_r+0xabc>
 800846e:	2a00      	cmp	r2, #0
 8008470:	ddee      	ble.n	8008450 <_dtoa_r+0xa58>
 8008472:	ee18 1a10 	vmov	r1, s16
 8008476:	2201      	movs	r2, #1
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fad7 	bl	8008a2c <__lshift>
 800847e:	4631      	mov	r1, r6
 8008480:	ee08 0a10 	vmov	s16, r0
 8008484:	f000 fb42 	bl	8008b0c <__mcmp>
 8008488:	2800      	cmp	r0, #0
 800848a:	dc03      	bgt.n	8008494 <_dtoa_r+0xa9c>
 800848c:	d1e0      	bne.n	8008450 <_dtoa_r+0xa58>
 800848e:	f01a 0f01 	tst.w	sl, #1
 8008492:	d0dd      	beq.n	8008450 <_dtoa_r+0xa58>
 8008494:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008498:	d1d7      	bne.n	800844a <_dtoa_r+0xa52>
 800849a:	2339      	movs	r3, #57	; 0x39
 800849c:	f88b 3000 	strb.w	r3, [fp]
 80084a0:	462b      	mov	r3, r5
 80084a2:	461d      	mov	r5, r3
 80084a4:	3b01      	subs	r3, #1
 80084a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084aa:	2a39      	cmp	r2, #57	; 0x39
 80084ac:	d071      	beq.n	8008592 <_dtoa_r+0xb9a>
 80084ae:	3201      	adds	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	e746      	b.n	8008342 <_dtoa_r+0x94a>
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	dd07      	ble.n	80084c8 <_dtoa_r+0xad0>
 80084b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084bc:	d0ed      	beq.n	800849a <_dtoa_r+0xaa2>
 80084be:	f10a 0301 	add.w	r3, sl, #1
 80084c2:	f88b 3000 	strb.w	r3, [fp]
 80084c6:	e73c      	b.n	8008342 <_dtoa_r+0x94a>
 80084c8:	9b05      	ldr	r3, [sp, #20]
 80084ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80084ce:	4599      	cmp	r9, r3
 80084d0:	d047      	beq.n	8008562 <_dtoa_r+0xb6a>
 80084d2:	ee18 1a10 	vmov	r1, s16
 80084d6:	2300      	movs	r3, #0
 80084d8:	220a      	movs	r2, #10
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 f8f6 	bl	80086cc <__multadd>
 80084e0:	45b8      	cmp	r8, r7
 80084e2:	ee08 0a10 	vmov	s16, r0
 80084e6:	f04f 0300 	mov.w	r3, #0
 80084ea:	f04f 020a 	mov.w	r2, #10
 80084ee:	4641      	mov	r1, r8
 80084f0:	4620      	mov	r0, r4
 80084f2:	d106      	bne.n	8008502 <_dtoa_r+0xb0a>
 80084f4:	f000 f8ea 	bl	80086cc <__multadd>
 80084f8:	4680      	mov	r8, r0
 80084fa:	4607      	mov	r7, r0
 80084fc:	f109 0901 	add.w	r9, r9, #1
 8008500:	e772      	b.n	80083e8 <_dtoa_r+0x9f0>
 8008502:	f000 f8e3 	bl	80086cc <__multadd>
 8008506:	4639      	mov	r1, r7
 8008508:	4680      	mov	r8, r0
 800850a:	2300      	movs	r3, #0
 800850c:	220a      	movs	r2, #10
 800850e:	4620      	mov	r0, r4
 8008510:	f000 f8dc 	bl	80086cc <__multadd>
 8008514:	4607      	mov	r7, r0
 8008516:	e7f1      	b.n	80084fc <_dtoa_r+0xb04>
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	9302      	str	r3, [sp, #8]
 800851c:	9d01      	ldr	r5, [sp, #4]
 800851e:	ee18 0a10 	vmov	r0, s16
 8008522:	4631      	mov	r1, r6
 8008524:	f7ff f9dc 	bl	80078e0 <quorem>
 8008528:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	f805 ab01 	strb.w	sl, [r5], #1
 8008532:	1aea      	subs	r2, r5, r3
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	4293      	cmp	r3, r2
 8008538:	dd09      	ble.n	800854e <_dtoa_r+0xb56>
 800853a:	ee18 1a10 	vmov	r1, s16
 800853e:	2300      	movs	r3, #0
 8008540:	220a      	movs	r2, #10
 8008542:	4620      	mov	r0, r4
 8008544:	f000 f8c2 	bl	80086cc <__multadd>
 8008548:	ee08 0a10 	vmov	s16, r0
 800854c:	e7e7      	b.n	800851e <_dtoa_r+0xb26>
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfc8      	it	gt
 8008554:	461d      	movgt	r5, r3
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	bfd8      	it	le
 800855a:	2501      	movle	r5, #1
 800855c:	441d      	add	r5, r3
 800855e:	f04f 0800 	mov.w	r8, #0
 8008562:	ee18 1a10 	vmov	r1, s16
 8008566:	2201      	movs	r2, #1
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fa5f 	bl	8008a2c <__lshift>
 800856e:	4631      	mov	r1, r6
 8008570:	ee08 0a10 	vmov	s16, r0
 8008574:	f000 faca 	bl	8008b0c <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	dc91      	bgt.n	80084a0 <_dtoa_r+0xaa8>
 800857c:	d102      	bne.n	8008584 <_dtoa_r+0xb8c>
 800857e:	f01a 0f01 	tst.w	sl, #1
 8008582:	d18d      	bne.n	80084a0 <_dtoa_r+0xaa8>
 8008584:	462b      	mov	r3, r5
 8008586:	461d      	mov	r5, r3
 8008588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800858c:	2a30      	cmp	r2, #48	; 0x30
 800858e:	d0fa      	beq.n	8008586 <_dtoa_r+0xb8e>
 8008590:	e6d7      	b.n	8008342 <_dtoa_r+0x94a>
 8008592:	9a01      	ldr	r2, [sp, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d184      	bne.n	80084a2 <_dtoa_r+0xaaa>
 8008598:	9b00      	ldr	r3, [sp, #0]
 800859a:	3301      	adds	r3, #1
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	2331      	movs	r3, #49	; 0x31
 80085a0:	7013      	strb	r3, [r2, #0]
 80085a2:	e6ce      	b.n	8008342 <_dtoa_r+0x94a>
 80085a4:	4b09      	ldr	r3, [pc, #36]	; (80085cc <_dtoa_r+0xbd4>)
 80085a6:	f7ff ba95 	b.w	8007ad4 <_dtoa_r+0xdc>
 80085aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f47f aa6e 	bne.w	8007a8e <_dtoa_r+0x96>
 80085b2:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <_dtoa_r+0xbd8>)
 80085b4:	f7ff ba8e 	b.w	8007ad4 <_dtoa_r+0xdc>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dcae      	bgt.n	800851c <_dtoa_r+0xb24>
 80085be:	9b06      	ldr	r3, [sp, #24]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	f73f aea8 	bgt.w	8008316 <_dtoa_r+0x91e>
 80085c6:	e7a9      	b.n	800851c <_dtoa_r+0xb24>
 80085c8:	0800a607 	.word	0x0800a607
 80085cc:	0800a564 	.word	0x0800a564
 80085d0:	0800a588 	.word	0x0800a588

080085d4 <_localeconv_r>:
 80085d4:	4800      	ldr	r0, [pc, #0]	; (80085d8 <_localeconv_r+0x4>)
 80085d6:	4770      	bx	lr
 80085d8:	20000168 	.word	0x20000168

080085dc <malloc>:
 80085dc:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <malloc+0xc>)
 80085de:	4601      	mov	r1, r0
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	f000 bc17 	b.w	8008e14 <_malloc_r>
 80085e6:	bf00      	nop
 80085e8:	20000014 	.word	0x20000014

080085ec <memcpy>:
 80085ec:	440a      	add	r2, r1
 80085ee:	4291      	cmp	r1, r2
 80085f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f4:	d100      	bne.n	80085f8 <memcpy+0xc>
 80085f6:	4770      	bx	lr
 80085f8:	b510      	push	{r4, lr}
 80085fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008602:	4291      	cmp	r1, r2
 8008604:	d1f9      	bne.n	80085fa <memcpy+0xe>
 8008606:	bd10      	pop	{r4, pc}

08008608 <_Balloc>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	b976      	cbnz	r6, 8008630 <_Balloc+0x28>
 8008612:	2010      	movs	r0, #16
 8008614:	f7ff ffe2 	bl	80085dc <malloc>
 8008618:	4602      	mov	r2, r0
 800861a:	6260      	str	r0, [r4, #36]	; 0x24
 800861c:	b920      	cbnz	r0, 8008628 <_Balloc+0x20>
 800861e:	4b18      	ldr	r3, [pc, #96]	; (8008680 <_Balloc+0x78>)
 8008620:	4818      	ldr	r0, [pc, #96]	; (8008684 <_Balloc+0x7c>)
 8008622:	2166      	movs	r1, #102	; 0x66
 8008624:	f000 fdd6 	bl	80091d4 <__assert_func>
 8008628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800862c:	6006      	str	r6, [r0, #0]
 800862e:	60c6      	str	r6, [r0, #12]
 8008630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008632:	68f3      	ldr	r3, [r6, #12]
 8008634:	b183      	cbz	r3, 8008658 <_Balloc+0x50>
 8008636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800863e:	b9b8      	cbnz	r0, 8008670 <_Balloc+0x68>
 8008640:	2101      	movs	r1, #1
 8008642:	fa01 f605 	lsl.w	r6, r1, r5
 8008646:	1d72      	adds	r2, r6, #5
 8008648:	0092      	lsls	r2, r2, #2
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fb60 	bl	8008d10 <_calloc_r>
 8008650:	b160      	cbz	r0, 800866c <_Balloc+0x64>
 8008652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008656:	e00e      	b.n	8008676 <_Balloc+0x6e>
 8008658:	2221      	movs	r2, #33	; 0x21
 800865a:	2104      	movs	r1, #4
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fb57 	bl	8008d10 <_calloc_r>
 8008662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008664:	60f0      	str	r0, [r6, #12]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e4      	bne.n	8008636 <_Balloc+0x2e>
 800866c:	2000      	movs	r0, #0
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	6802      	ldr	r2, [r0, #0]
 8008672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008676:	2300      	movs	r3, #0
 8008678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800867c:	e7f7      	b.n	800866e <_Balloc+0x66>
 800867e:	bf00      	nop
 8008680:	0800a595 	.word	0x0800a595
 8008684:	0800a618 	.word	0x0800a618

08008688 <_Bfree>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b976      	cbnz	r6, 80086b0 <_Bfree+0x28>
 8008692:	2010      	movs	r0, #16
 8008694:	f7ff ffa2 	bl	80085dc <malloc>
 8008698:	4602      	mov	r2, r0
 800869a:	6268      	str	r0, [r5, #36]	; 0x24
 800869c:	b920      	cbnz	r0, 80086a8 <_Bfree+0x20>
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <_Bfree+0x3c>)
 80086a0:	4809      	ldr	r0, [pc, #36]	; (80086c8 <_Bfree+0x40>)
 80086a2:	218a      	movs	r1, #138	; 0x8a
 80086a4:	f000 fd96 	bl	80091d4 <__assert_func>
 80086a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ac:	6006      	str	r6, [r0, #0]
 80086ae:	60c6      	str	r6, [r0, #12]
 80086b0:	b13c      	cbz	r4, 80086c2 <_Bfree+0x3a>
 80086b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086b4:	6862      	ldr	r2, [r4, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086bc:	6021      	str	r1, [r4, #0]
 80086be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	0800a595 	.word	0x0800a595
 80086c8:	0800a618 	.word	0x0800a618

080086cc <__multadd>:
 80086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d0:	690d      	ldr	r5, [r1, #16]
 80086d2:	4607      	mov	r7, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	461e      	mov	r6, r3
 80086d8:	f101 0c14 	add.w	ip, r1, #20
 80086dc:	2000      	movs	r0, #0
 80086de:	f8dc 3000 	ldr.w	r3, [ip]
 80086e2:	b299      	uxth	r1, r3
 80086e4:	fb02 6101 	mla	r1, r2, r1, r6
 80086e8:	0c1e      	lsrs	r6, r3, #16
 80086ea:	0c0b      	lsrs	r3, r1, #16
 80086ec:	fb02 3306 	mla	r3, r2, r6, r3
 80086f0:	b289      	uxth	r1, r1
 80086f2:	3001      	adds	r0, #1
 80086f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f8:	4285      	cmp	r5, r0
 80086fa:	f84c 1b04 	str.w	r1, [ip], #4
 80086fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008702:	dcec      	bgt.n	80086de <__multadd+0x12>
 8008704:	b30e      	cbz	r6, 800874a <__multadd+0x7e>
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc19      	bgt.n	8008740 <__multadd+0x74>
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4638      	mov	r0, r7
 8008710:	3101      	adds	r1, #1
 8008712:	f7ff ff79 	bl	8008608 <_Balloc>
 8008716:	4680      	mov	r8, r0
 8008718:	b928      	cbnz	r0, 8008726 <__multadd+0x5a>
 800871a:	4602      	mov	r2, r0
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <__multadd+0x84>)
 800871e:	480d      	ldr	r0, [pc, #52]	; (8008754 <__multadd+0x88>)
 8008720:	21b5      	movs	r1, #181	; 0xb5
 8008722:	f000 fd57 	bl	80091d4 <__assert_func>
 8008726:	6922      	ldr	r2, [r4, #16]
 8008728:	3202      	adds	r2, #2
 800872a:	f104 010c 	add.w	r1, r4, #12
 800872e:	0092      	lsls	r2, r2, #2
 8008730:	300c      	adds	r0, #12
 8008732:	f7ff ff5b 	bl	80085ec <memcpy>
 8008736:	4621      	mov	r1, r4
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa5 	bl	8008688 <_Bfree>
 800873e:	4644      	mov	r4, r8
 8008740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008744:	3501      	adds	r5, #1
 8008746:	615e      	str	r6, [r3, #20]
 8008748:	6125      	str	r5, [r4, #16]
 800874a:	4620      	mov	r0, r4
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	0800a607 	.word	0x0800a607
 8008754:	0800a618 	.word	0x0800a618

08008758 <__hi0bits>:
 8008758:	0c03      	lsrs	r3, r0, #16
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	b9d3      	cbnz	r3, 8008794 <__hi0bits+0x3c>
 800875e:	0400      	lsls	r0, r0, #16
 8008760:	2310      	movs	r3, #16
 8008762:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008766:	bf04      	itt	eq
 8008768:	0200      	lsleq	r0, r0, #8
 800876a:	3308      	addeq	r3, #8
 800876c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008770:	bf04      	itt	eq
 8008772:	0100      	lsleq	r0, r0, #4
 8008774:	3304      	addeq	r3, #4
 8008776:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800877a:	bf04      	itt	eq
 800877c:	0080      	lsleq	r0, r0, #2
 800877e:	3302      	addeq	r3, #2
 8008780:	2800      	cmp	r0, #0
 8008782:	db05      	blt.n	8008790 <__hi0bits+0x38>
 8008784:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008788:	f103 0301 	add.w	r3, r3, #1
 800878c:	bf08      	it	eq
 800878e:	2320      	moveq	r3, #32
 8008790:	4618      	mov	r0, r3
 8008792:	4770      	bx	lr
 8008794:	2300      	movs	r3, #0
 8008796:	e7e4      	b.n	8008762 <__hi0bits+0xa>

08008798 <__lo0bits>:
 8008798:	6803      	ldr	r3, [r0, #0]
 800879a:	f013 0207 	ands.w	r2, r3, #7
 800879e:	4601      	mov	r1, r0
 80087a0:	d00b      	beq.n	80087ba <__lo0bits+0x22>
 80087a2:	07da      	lsls	r2, r3, #31
 80087a4:	d423      	bmi.n	80087ee <__lo0bits+0x56>
 80087a6:	0798      	lsls	r0, r3, #30
 80087a8:	bf49      	itett	mi
 80087aa:	085b      	lsrmi	r3, r3, #1
 80087ac:	089b      	lsrpl	r3, r3, #2
 80087ae:	2001      	movmi	r0, #1
 80087b0:	600b      	strmi	r3, [r1, #0]
 80087b2:	bf5c      	itt	pl
 80087b4:	600b      	strpl	r3, [r1, #0]
 80087b6:	2002      	movpl	r0, #2
 80087b8:	4770      	bx	lr
 80087ba:	b298      	uxth	r0, r3
 80087bc:	b9a8      	cbnz	r0, 80087ea <__lo0bits+0x52>
 80087be:	0c1b      	lsrs	r3, r3, #16
 80087c0:	2010      	movs	r0, #16
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	b90a      	cbnz	r2, 80087ca <__lo0bits+0x32>
 80087c6:	3008      	adds	r0, #8
 80087c8:	0a1b      	lsrs	r3, r3, #8
 80087ca:	071a      	lsls	r2, r3, #28
 80087cc:	bf04      	itt	eq
 80087ce:	091b      	lsreq	r3, r3, #4
 80087d0:	3004      	addeq	r0, #4
 80087d2:	079a      	lsls	r2, r3, #30
 80087d4:	bf04      	itt	eq
 80087d6:	089b      	lsreq	r3, r3, #2
 80087d8:	3002      	addeq	r0, #2
 80087da:	07da      	lsls	r2, r3, #31
 80087dc:	d403      	bmi.n	80087e6 <__lo0bits+0x4e>
 80087de:	085b      	lsrs	r3, r3, #1
 80087e0:	f100 0001 	add.w	r0, r0, #1
 80087e4:	d005      	beq.n	80087f2 <__lo0bits+0x5a>
 80087e6:	600b      	str	r3, [r1, #0]
 80087e8:	4770      	bx	lr
 80087ea:	4610      	mov	r0, r2
 80087ec:	e7e9      	b.n	80087c2 <__lo0bits+0x2a>
 80087ee:	2000      	movs	r0, #0
 80087f0:	4770      	bx	lr
 80087f2:	2020      	movs	r0, #32
 80087f4:	4770      	bx	lr
	...

080087f8 <__i2b>:
 80087f8:	b510      	push	{r4, lr}
 80087fa:	460c      	mov	r4, r1
 80087fc:	2101      	movs	r1, #1
 80087fe:	f7ff ff03 	bl	8008608 <_Balloc>
 8008802:	4602      	mov	r2, r0
 8008804:	b928      	cbnz	r0, 8008812 <__i2b+0x1a>
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <__i2b+0x24>)
 8008808:	4805      	ldr	r0, [pc, #20]	; (8008820 <__i2b+0x28>)
 800880a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800880e:	f000 fce1 	bl	80091d4 <__assert_func>
 8008812:	2301      	movs	r3, #1
 8008814:	6144      	str	r4, [r0, #20]
 8008816:	6103      	str	r3, [r0, #16]
 8008818:	bd10      	pop	{r4, pc}
 800881a:	bf00      	nop
 800881c:	0800a607 	.word	0x0800a607
 8008820:	0800a618 	.word	0x0800a618

08008824 <__multiply>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	4691      	mov	r9, r2
 800882a:	690a      	ldr	r2, [r1, #16]
 800882c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008830:	429a      	cmp	r2, r3
 8008832:	bfb8      	it	lt
 8008834:	460b      	movlt	r3, r1
 8008836:	460c      	mov	r4, r1
 8008838:	bfbc      	itt	lt
 800883a:	464c      	movlt	r4, r9
 800883c:	4699      	movlt	r9, r3
 800883e:	6927      	ldr	r7, [r4, #16]
 8008840:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	6861      	ldr	r1, [r4, #4]
 8008848:	eb07 060a 	add.w	r6, r7, sl
 800884c:	42b3      	cmp	r3, r6
 800884e:	b085      	sub	sp, #20
 8008850:	bfb8      	it	lt
 8008852:	3101      	addlt	r1, #1
 8008854:	f7ff fed8 	bl	8008608 <_Balloc>
 8008858:	b930      	cbnz	r0, 8008868 <__multiply+0x44>
 800885a:	4602      	mov	r2, r0
 800885c:	4b44      	ldr	r3, [pc, #272]	; (8008970 <__multiply+0x14c>)
 800885e:	4845      	ldr	r0, [pc, #276]	; (8008974 <__multiply+0x150>)
 8008860:	f240 115d 	movw	r1, #349	; 0x15d
 8008864:	f000 fcb6 	bl	80091d4 <__assert_func>
 8008868:	f100 0514 	add.w	r5, r0, #20
 800886c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008870:	462b      	mov	r3, r5
 8008872:	2200      	movs	r2, #0
 8008874:	4543      	cmp	r3, r8
 8008876:	d321      	bcc.n	80088bc <__multiply+0x98>
 8008878:	f104 0314 	add.w	r3, r4, #20
 800887c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008880:	f109 0314 	add.w	r3, r9, #20
 8008884:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008888:	9202      	str	r2, [sp, #8]
 800888a:	1b3a      	subs	r2, r7, r4
 800888c:	3a15      	subs	r2, #21
 800888e:	f022 0203 	bic.w	r2, r2, #3
 8008892:	3204      	adds	r2, #4
 8008894:	f104 0115 	add.w	r1, r4, #21
 8008898:	428f      	cmp	r7, r1
 800889a:	bf38      	it	cc
 800889c:	2204      	movcc	r2, #4
 800889e:	9201      	str	r2, [sp, #4]
 80088a0:	9a02      	ldr	r2, [sp, #8]
 80088a2:	9303      	str	r3, [sp, #12]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d80c      	bhi.n	80088c2 <__multiply+0x9e>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	dd03      	ble.n	80088b4 <__multiply+0x90>
 80088ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05a      	beq.n	800896a <__multiply+0x146>
 80088b4:	6106      	str	r6, [r0, #16]
 80088b6:	b005      	add	sp, #20
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	f843 2b04 	str.w	r2, [r3], #4
 80088c0:	e7d8      	b.n	8008874 <__multiply+0x50>
 80088c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80088c6:	f1ba 0f00 	cmp.w	sl, #0
 80088ca:	d024      	beq.n	8008916 <__multiply+0xf2>
 80088cc:	f104 0e14 	add.w	lr, r4, #20
 80088d0:	46a9      	mov	r9, r5
 80088d2:	f04f 0c00 	mov.w	ip, #0
 80088d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088da:	f8d9 1000 	ldr.w	r1, [r9]
 80088de:	fa1f fb82 	uxth.w	fp, r2
 80088e2:	b289      	uxth	r1, r1
 80088e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80088e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088ec:	f8d9 2000 	ldr.w	r2, [r9]
 80088f0:	4461      	add	r1, ip
 80088f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80088fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088fe:	b289      	uxth	r1, r1
 8008900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008904:	4577      	cmp	r7, lr
 8008906:	f849 1b04 	str.w	r1, [r9], #4
 800890a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800890e:	d8e2      	bhi.n	80088d6 <__multiply+0xb2>
 8008910:	9a01      	ldr	r2, [sp, #4]
 8008912:	f845 c002 	str.w	ip, [r5, r2]
 8008916:	9a03      	ldr	r2, [sp, #12]
 8008918:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800891c:	3304      	adds	r3, #4
 800891e:	f1b9 0f00 	cmp.w	r9, #0
 8008922:	d020      	beq.n	8008966 <__multiply+0x142>
 8008924:	6829      	ldr	r1, [r5, #0]
 8008926:	f104 0c14 	add.w	ip, r4, #20
 800892a:	46ae      	mov	lr, r5
 800892c:	f04f 0a00 	mov.w	sl, #0
 8008930:	f8bc b000 	ldrh.w	fp, [ip]
 8008934:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008938:	fb09 220b 	mla	r2, r9, fp, r2
 800893c:	4492      	add	sl, r2
 800893e:	b289      	uxth	r1, r1
 8008940:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008944:	f84e 1b04 	str.w	r1, [lr], #4
 8008948:	f85c 2b04 	ldr.w	r2, [ip], #4
 800894c:	f8be 1000 	ldrh.w	r1, [lr]
 8008950:	0c12      	lsrs	r2, r2, #16
 8008952:	fb09 1102 	mla	r1, r9, r2, r1
 8008956:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800895a:	4567      	cmp	r7, ip
 800895c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008960:	d8e6      	bhi.n	8008930 <__multiply+0x10c>
 8008962:	9a01      	ldr	r2, [sp, #4]
 8008964:	50a9      	str	r1, [r5, r2]
 8008966:	3504      	adds	r5, #4
 8008968:	e79a      	b.n	80088a0 <__multiply+0x7c>
 800896a:	3e01      	subs	r6, #1
 800896c:	e79c      	b.n	80088a8 <__multiply+0x84>
 800896e:	bf00      	nop
 8008970:	0800a607 	.word	0x0800a607
 8008974:	0800a618 	.word	0x0800a618

08008978 <__pow5mult>:
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	4615      	mov	r5, r2
 800897e:	f012 0203 	ands.w	r2, r2, #3
 8008982:	4606      	mov	r6, r0
 8008984:	460f      	mov	r7, r1
 8008986:	d007      	beq.n	8008998 <__pow5mult+0x20>
 8008988:	4c25      	ldr	r4, [pc, #148]	; (8008a20 <__pow5mult+0xa8>)
 800898a:	3a01      	subs	r2, #1
 800898c:	2300      	movs	r3, #0
 800898e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008992:	f7ff fe9b 	bl	80086cc <__multadd>
 8008996:	4607      	mov	r7, r0
 8008998:	10ad      	asrs	r5, r5, #2
 800899a:	d03d      	beq.n	8008a18 <__pow5mult+0xa0>
 800899c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800899e:	b97c      	cbnz	r4, 80089c0 <__pow5mult+0x48>
 80089a0:	2010      	movs	r0, #16
 80089a2:	f7ff fe1b 	bl	80085dc <malloc>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6270      	str	r0, [r6, #36]	; 0x24
 80089aa:	b928      	cbnz	r0, 80089b8 <__pow5mult+0x40>
 80089ac:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <__pow5mult+0xac>)
 80089ae:	481e      	ldr	r0, [pc, #120]	; (8008a28 <__pow5mult+0xb0>)
 80089b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089b4:	f000 fc0e 	bl	80091d4 <__assert_func>
 80089b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089bc:	6004      	str	r4, [r0, #0]
 80089be:	60c4      	str	r4, [r0, #12]
 80089c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089c8:	b94c      	cbnz	r4, 80089de <__pow5mult+0x66>
 80089ca:	f240 2171 	movw	r1, #625	; 0x271
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ff12 	bl	80087f8 <__i2b>
 80089d4:	2300      	movs	r3, #0
 80089d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80089da:	4604      	mov	r4, r0
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	f04f 0900 	mov.w	r9, #0
 80089e2:	07eb      	lsls	r3, r5, #31
 80089e4:	d50a      	bpl.n	80089fc <__pow5mult+0x84>
 80089e6:	4639      	mov	r1, r7
 80089e8:	4622      	mov	r2, r4
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff ff1a 	bl	8008824 <__multiply>
 80089f0:	4639      	mov	r1, r7
 80089f2:	4680      	mov	r8, r0
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff fe47 	bl	8008688 <_Bfree>
 80089fa:	4647      	mov	r7, r8
 80089fc:	106d      	asrs	r5, r5, #1
 80089fe:	d00b      	beq.n	8008a18 <__pow5mult+0xa0>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	b938      	cbnz	r0, 8008a14 <__pow5mult+0x9c>
 8008a04:	4622      	mov	r2, r4
 8008a06:	4621      	mov	r1, r4
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7ff ff0b 	bl	8008824 <__multiply>
 8008a0e:	6020      	str	r0, [r4, #0]
 8008a10:	f8c0 9000 	str.w	r9, [r0]
 8008a14:	4604      	mov	r4, r0
 8008a16:	e7e4      	b.n	80089e2 <__pow5mult+0x6a>
 8008a18:	4638      	mov	r0, r7
 8008a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1e:	bf00      	nop
 8008a20:	0800a768 	.word	0x0800a768
 8008a24:	0800a595 	.word	0x0800a595
 8008a28:	0800a618 	.word	0x0800a618

08008a2c <__lshift>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	6849      	ldr	r1, [r1, #4]
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a3a:	68a3      	ldr	r3, [r4, #8]
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	4691      	mov	r9, r2
 8008a40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a44:	f108 0601 	add.w	r6, r8, #1
 8008a48:	42b3      	cmp	r3, r6
 8008a4a:	db0b      	blt.n	8008a64 <__lshift+0x38>
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	f7ff fddb 	bl	8008608 <_Balloc>
 8008a52:	4605      	mov	r5, r0
 8008a54:	b948      	cbnz	r0, 8008a6a <__lshift+0x3e>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b2a      	ldr	r3, [pc, #168]	; (8008b04 <__lshift+0xd8>)
 8008a5a:	482b      	ldr	r0, [pc, #172]	; (8008b08 <__lshift+0xdc>)
 8008a5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a60:	f000 fbb8 	bl	80091d4 <__assert_func>
 8008a64:	3101      	adds	r1, #1
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	e7ee      	b.n	8008a48 <__lshift+0x1c>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f100 0114 	add.w	r1, r0, #20
 8008a70:	f100 0210 	add.w	r2, r0, #16
 8008a74:	4618      	mov	r0, r3
 8008a76:	4553      	cmp	r3, sl
 8008a78:	db37      	blt.n	8008aea <__lshift+0xbe>
 8008a7a:	6920      	ldr	r0, [r4, #16]
 8008a7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a80:	f104 0314 	add.w	r3, r4, #20
 8008a84:	f019 091f 	ands.w	r9, r9, #31
 8008a88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a90:	d02f      	beq.n	8008af2 <__lshift+0xc6>
 8008a92:	f1c9 0e20 	rsb	lr, r9, #32
 8008a96:	468a      	mov	sl, r1
 8008a98:	f04f 0c00 	mov.w	ip, #0
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	fa02 f209 	lsl.w	r2, r2, r9
 8008aa2:	ea42 020c 	orr.w	r2, r2, ip
 8008aa6:	f84a 2b04 	str.w	r2, [sl], #4
 8008aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aae:	4298      	cmp	r0, r3
 8008ab0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ab4:	d8f2      	bhi.n	8008a9c <__lshift+0x70>
 8008ab6:	1b03      	subs	r3, r0, r4
 8008ab8:	3b15      	subs	r3, #21
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	3304      	adds	r3, #4
 8008ac0:	f104 0215 	add.w	r2, r4, #21
 8008ac4:	4290      	cmp	r0, r2
 8008ac6:	bf38      	it	cc
 8008ac8:	2304      	movcc	r3, #4
 8008aca:	f841 c003 	str.w	ip, [r1, r3]
 8008ace:	f1bc 0f00 	cmp.w	ip, #0
 8008ad2:	d001      	beq.n	8008ad8 <__lshift+0xac>
 8008ad4:	f108 0602 	add.w	r6, r8, #2
 8008ad8:	3e01      	subs	r6, #1
 8008ada:	4638      	mov	r0, r7
 8008adc:	612e      	str	r6, [r5, #16]
 8008ade:	4621      	mov	r1, r4
 8008ae0:	f7ff fdd2 	bl	8008688 <_Bfree>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aea:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aee:	3301      	adds	r3, #1
 8008af0:	e7c1      	b.n	8008a76 <__lshift+0x4a>
 8008af2:	3904      	subs	r1, #4
 8008af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008afc:	4298      	cmp	r0, r3
 8008afe:	d8f9      	bhi.n	8008af4 <__lshift+0xc8>
 8008b00:	e7ea      	b.n	8008ad8 <__lshift+0xac>
 8008b02:	bf00      	nop
 8008b04:	0800a607 	.word	0x0800a607
 8008b08:	0800a618 	.word	0x0800a618

08008b0c <__mcmp>:
 8008b0c:	b530      	push	{r4, r5, lr}
 8008b0e:	6902      	ldr	r2, [r0, #16]
 8008b10:	690c      	ldr	r4, [r1, #16]
 8008b12:	1b12      	subs	r2, r2, r4
 8008b14:	d10e      	bne.n	8008b34 <__mcmp+0x28>
 8008b16:	f100 0314 	add.w	r3, r0, #20
 8008b1a:	3114      	adds	r1, #20
 8008b1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b2c:	42a5      	cmp	r5, r4
 8008b2e:	d003      	beq.n	8008b38 <__mcmp+0x2c>
 8008b30:	d305      	bcc.n	8008b3e <__mcmp+0x32>
 8008b32:	2201      	movs	r2, #1
 8008b34:	4610      	mov	r0, r2
 8008b36:	bd30      	pop	{r4, r5, pc}
 8008b38:	4283      	cmp	r3, r0
 8008b3a:	d3f3      	bcc.n	8008b24 <__mcmp+0x18>
 8008b3c:	e7fa      	b.n	8008b34 <__mcmp+0x28>
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	e7f7      	b.n	8008b34 <__mcmp+0x28>

08008b44 <__mdiff>:
 8008b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	460c      	mov	r4, r1
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4690      	mov	r8, r2
 8008b52:	f7ff ffdb 	bl	8008b0c <__mcmp>
 8008b56:	1e05      	subs	r5, r0, #0
 8008b58:	d110      	bne.n	8008b7c <__mdiff+0x38>
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff fd53 	bl	8008608 <_Balloc>
 8008b62:	b930      	cbnz	r0, 8008b72 <__mdiff+0x2e>
 8008b64:	4b3a      	ldr	r3, [pc, #232]	; (8008c50 <__mdiff+0x10c>)
 8008b66:	4602      	mov	r2, r0
 8008b68:	f240 2132 	movw	r1, #562	; 0x232
 8008b6c:	4839      	ldr	r0, [pc, #228]	; (8008c54 <__mdiff+0x110>)
 8008b6e:	f000 fb31 	bl	80091d4 <__assert_func>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	bfa4      	itt	ge
 8008b7e:	4643      	movge	r3, r8
 8008b80:	46a0      	movge	r8, r4
 8008b82:	4630      	mov	r0, r6
 8008b84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b88:	bfa6      	itte	ge
 8008b8a:	461c      	movge	r4, r3
 8008b8c:	2500      	movge	r5, #0
 8008b8e:	2501      	movlt	r5, #1
 8008b90:	f7ff fd3a 	bl	8008608 <_Balloc>
 8008b94:	b920      	cbnz	r0, 8008ba0 <__mdiff+0x5c>
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <__mdiff+0x10c>)
 8008b98:	4602      	mov	r2, r0
 8008b9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b9e:	e7e5      	b.n	8008b6c <__mdiff+0x28>
 8008ba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ba4:	6926      	ldr	r6, [r4, #16]
 8008ba6:	60c5      	str	r5, [r0, #12]
 8008ba8:	f104 0914 	add.w	r9, r4, #20
 8008bac:	f108 0514 	add.w	r5, r8, #20
 8008bb0:	f100 0e14 	add.w	lr, r0, #20
 8008bb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bbc:	f108 0210 	add.w	r2, r8, #16
 8008bc0:	46f2      	mov	sl, lr
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bcc:	fa1f f883 	uxth.w	r8, r3
 8008bd0:	fa11 f18b 	uxtah	r1, r1, fp
 8008bd4:	0c1b      	lsrs	r3, r3, #16
 8008bd6:	eba1 0808 	sub.w	r8, r1, r8
 8008bda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008be2:	fa1f f888 	uxth.w	r8, r8
 8008be6:	1419      	asrs	r1, r3, #16
 8008be8:	454e      	cmp	r6, r9
 8008bea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bee:	f84a 3b04 	str.w	r3, [sl], #4
 8008bf2:	d8e7      	bhi.n	8008bc4 <__mdiff+0x80>
 8008bf4:	1b33      	subs	r3, r6, r4
 8008bf6:	3b15      	subs	r3, #21
 8008bf8:	f023 0303 	bic.w	r3, r3, #3
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	3415      	adds	r4, #21
 8008c00:	42a6      	cmp	r6, r4
 8008c02:	bf38      	it	cc
 8008c04:	2304      	movcc	r3, #4
 8008c06:	441d      	add	r5, r3
 8008c08:	4473      	add	r3, lr
 8008c0a:	469e      	mov	lr, r3
 8008c0c:	462e      	mov	r6, r5
 8008c0e:	4566      	cmp	r6, ip
 8008c10:	d30e      	bcc.n	8008c30 <__mdiff+0xec>
 8008c12:	f10c 0203 	add.w	r2, ip, #3
 8008c16:	1b52      	subs	r2, r2, r5
 8008c18:	f022 0203 	bic.w	r2, r2, #3
 8008c1c:	3d03      	subs	r5, #3
 8008c1e:	45ac      	cmp	ip, r5
 8008c20:	bf38      	it	cc
 8008c22:	2200      	movcc	r2, #0
 8008c24:	441a      	add	r2, r3
 8008c26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c2a:	b17b      	cbz	r3, 8008c4c <__mdiff+0x108>
 8008c2c:	6107      	str	r7, [r0, #16]
 8008c2e:	e7a3      	b.n	8008b78 <__mdiff+0x34>
 8008c30:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c34:	fa11 f288 	uxtah	r2, r1, r8
 8008c38:	1414      	asrs	r4, r2, #16
 8008c3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c3e:	b292      	uxth	r2, r2
 8008c40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c44:	f84e 2b04 	str.w	r2, [lr], #4
 8008c48:	1421      	asrs	r1, r4, #16
 8008c4a:	e7e0      	b.n	8008c0e <__mdiff+0xca>
 8008c4c:	3f01      	subs	r7, #1
 8008c4e:	e7ea      	b.n	8008c26 <__mdiff+0xe2>
 8008c50:	0800a607 	.word	0x0800a607
 8008c54:	0800a618 	.word	0x0800a618

08008c58 <__d2b>:
 8008c58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	2101      	movs	r1, #1
 8008c60:	ec57 6b10 	vmov	r6, r7, d0
 8008c64:	4690      	mov	r8, r2
 8008c66:	f7ff fccf 	bl	8008608 <_Balloc>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b930      	cbnz	r0, 8008c7c <__d2b+0x24>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b25      	ldr	r3, [pc, #148]	; (8008d08 <__d2b+0xb0>)
 8008c72:	4826      	ldr	r0, [pc, #152]	; (8008d0c <__d2b+0xb4>)
 8008c74:	f240 310a 	movw	r1, #778	; 0x30a
 8008c78:	f000 faac 	bl	80091d4 <__assert_func>
 8008c7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c84:	bb35      	cbnz	r5, 8008cd4 <__d2b+0x7c>
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	d028      	beq.n	8008cde <__d2b+0x86>
 8008c8c:	4668      	mov	r0, sp
 8008c8e:	9600      	str	r6, [sp, #0]
 8008c90:	f7ff fd82 	bl	8008798 <__lo0bits>
 8008c94:	9900      	ldr	r1, [sp, #0]
 8008c96:	b300      	cbz	r0, 8008cda <__d2b+0x82>
 8008c98:	9a01      	ldr	r2, [sp, #4]
 8008c9a:	f1c0 0320 	rsb	r3, r0, #32
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	40c2      	lsrs	r2, r0
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	9201      	str	r2, [sp, #4]
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	61a3      	str	r3, [r4, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bf14      	ite	ne
 8008cb2:	2202      	movne	r2, #2
 8008cb4:	2201      	moveq	r2, #1
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	b1d5      	cbz	r5, 8008cf0 <__d2b+0x98>
 8008cba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cbe:	4405      	add	r5, r0
 8008cc0:	f8c9 5000 	str.w	r5, [r9]
 8008cc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cc8:	f8c8 0000 	str.w	r0, [r8]
 8008ccc:	4620      	mov	r0, r4
 8008cce:	b003      	add	sp, #12
 8008cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd8:	e7d5      	b.n	8008c86 <__d2b+0x2e>
 8008cda:	6161      	str	r1, [r4, #20]
 8008cdc:	e7e5      	b.n	8008caa <__d2b+0x52>
 8008cde:	a801      	add	r0, sp, #4
 8008ce0:	f7ff fd5a 	bl	8008798 <__lo0bits>
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	6122      	str	r2, [r4, #16]
 8008cec:	3020      	adds	r0, #32
 8008cee:	e7e3      	b.n	8008cb8 <__d2b+0x60>
 8008cf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf8:	f8c9 0000 	str.w	r0, [r9]
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f7ff fd2b 	bl	8008758 <__hi0bits>
 8008d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d06:	e7df      	b.n	8008cc8 <__d2b+0x70>
 8008d08:	0800a607 	.word	0x0800a607
 8008d0c:	0800a618 	.word	0x0800a618

08008d10 <_calloc_r>:
 8008d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d12:	fba1 2402 	umull	r2, r4, r1, r2
 8008d16:	b94c      	cbnz	r4, 8008d2c <_calloc_r+0x1c>
 8008d18:	4611      	mov	r1, r2
 8008d1a:	9201      	str	r2, [sp, #4]
 8008d1c:	f000 f87a 	bl	8008e14 <_malloc_r>
 8008d20:	9a01      	ldr	r2, [sp, #4]
 8008d22:	4605      	mov	r5, r0
 8008d24:	b930      	cbnz	r0, 8008d34 <_calloc_r+0x24>
 8008d26:	4628      	mov	r0, r5
 8008d28:	b003      	add	sp, #12
 8008d2a:	bd30      	pop	{r4, r5, pc}
 8008d2c:	220c      	movs	r2, #12
 8008d2e:	6002      	str	r2, [r0, #0]
 8008d30:	2500      	movs	r5, #0
 8008d32:	e7f8      	b.n	8008d26 <_calloc_r+0x16>
 8008d34:	4621      	mov	r1, r4
 8008d36:	f7fe f941 	bl	8006fbc <memset>
 8008d3a:	e7f4      	b.n	8008d26 <_calloc_r+0x16>

08008d3c <_free_r>:
 8008d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d044      	beq.n	8008dcc <_free_r+0x90>
 8008d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d46:	9001      	str	r0, [sp, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d4e:	bfb8      	it	lt
 8008d50:	18e4      	addlt	r4, r4, r3
 8008d52:	f000 fa9b 	bl	800928c <__malloc_lock>
 8008d56:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <_free_r+0x94>)
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	6813      	ldr	r3, [r2, #0]
 8008d5c:	b933      	cbnz	r3, 8008d6c <_free_r+0x30>
 8008d5e:	6063      	str	r3, [r4, #4]
 8008d60:	6014      	str	r4, [r2, #0]
 8008d62:	b003      	add	sp, #12
 8008d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d68:	f000 ba96 	b.w	8009298 <__malloc_unlock>
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	d908      	bls.n	8008d82 <_free_r+0x46>
 8008d70:	6825      	ldr	r5, [r4, #0]
 8008d72:	1961      	adds	r1, r4, r5
 8008d74:	428b      	cmp	r3, r1
 8008d76:	bf01      	itttt	eq
 8008d78:	6819      	ldreq	r1, [r3, #0]
 8008d7a:	685b      	ldreq	r3, [r3, #4]
 8008d7c:	1949      	addeq	r1, r1, r5
 8008d7e:	6021      	streq	r1, [r4, #0]
 8008d80:	e7ed      	b.n	8008d5e <_free_r+0x22>
 8008d82:	461a      	mov	r2, r3
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b10b      	cbz	r3, 8008d8c <_free_r+0x50>
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d9fa      	bls.n	8008d82 <_free_r+0x46>
 8008d8c:	6811      	ldr	r1, [r2, #0]
 8008d8e:	1855      	adds	r5, r2, r1
 8008d90:	42a5      	cmp	r5, r4
 8008d92:	d10b      	bne.n	8008dac <_free_r+0x70>
 8008d94:	6824      	ldr	r4, [r4, #0]
 8008d96:	4421      	add	r1, r4
 8008d98:	1854      	adds	r4, r2, r1
 8008d9a:	42a3      	cmp	r3, r4
 8008d9c:	6011      	str	r1, [r2, #0]
 8008d9e:	d1e0      	bne.n	8008d62 <_free_r+0x26>
 8008da0:	681c      	ldr	r4, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	6053      	str	r3, [r2, #4]
 8008da6:	4421      	add	r1, r4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	e7da      	b.n	8008d62 <_free_r+0x26>
 8008dac:	d902      	bls.n	8008db4 <_free_r+0x78>
 8008dae:	230c      	movs	r3, #12
 8008db0:	6003      	str	r3, [r0, #0]
 8008db2:	e7d6      	b.n	8008d62 <_free_r+0x26>
 8008db4:	6825      	ldr	r5, [r4, #0]
 8008db6:	1961      	adds	r1, r4, r5
 8008db8:	428b      	cmp	r3, r1
 8008dba:	bf04      	itt	eq
 8008dbc:	6819      	ldreq	r1, [r3, #0]
 8008dbe:	685b      	ldreq	r3, [r3, #4]
 8008dc0:	6063      	str	r3, [r4, #4]
 8008dc2:	bf04      	itt	eq
 8008dc4:	1949      	addeq	r1, r1, r5
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	6054      	str	r4, [r2, #4]
 8008dca:	e7ca      	b.n	8008d62 <_free_r+0x26>
 8008dcc:	b003      	add	sp, #12
 8008dce:	bd30      	pop	{r4, r5, pc}
 8008dd0:	20000798 	.word	0x20000798

08008dd4 <sbrk_aligned>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4e0e      	ldr	r6, [pc, #56]	; (8008e10 <sbrk_aligned+0x3c>)
 8008dd8:	460c      	mov	r4, r1
 8008dda:	6831      	ldr	r1, [r6, #0]
 8008ddc:	4605      	mov	r5, r0
 8008dde:	b911      	cbnz	r1, 8008de6 <sbrk_aligned+0x12>
 8008de0:	f000 f9e8 	bl	80091b4 <_sbrk_r>
 8008de4:	6030      	str	r0, [r6, #0]
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 f9e3 	bl	80091b4 <_sbrk_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d00a      	beq.n	8008e08 <sbrk_aligned+0x34>
 8008df2:	1cc4      	adds	r4, r0, #3
 8008df4:	f024 0403 	bic.w	r4, r4, #3
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d007      	beq.n	8008e0c <sbrk_aligned+0x38>
 8008dfc:	1a21      	subs	r1, r4, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 f9d8 	bl	80091b4 <_sbrk_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	d101      	bne.n	8008e0c <sbrk_aligned+0x38>
 8008e08:	f04f 34ff 	mov.w	r4, #4294967295
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	2000079c 	.word	0x2000079c

08008e14 <_malloc_r>:
 8008e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e18:	1ccd      	adds	r5, r1, #3
 8008e1a:	f025 0503 	bic.w	r5, r5, #3
 8008e1e:	3508      	adds	r5, #8
 8008e20:	2d0c      	cmp	r5, #12
 8008e22:	bf38      	it	cc
 8008e24:	250c      	movcc	r5, #12
 8008e26:	2d00      	cmp	r5, #0
 8008e28:	4607      	mov	r7, r0
 8008e2a:	db01      	blt.n	8008e30 <_malloc_r+0x1c>
 8008e2c:	42a9      	cmp	r1, r5
 8008e2e:	d905      	bls.n	8008e3c <_malloc_r+0x28>
 8008e30:	230c      	movs	r3, #12
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	2600      	movs	r6, #0
 8008e36:	4630      	mov	r0, r6
 8008e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3c:	4e2e      	ldr	r6, [pc, #184]	; (8008ef8 <_malloc_r+0xe4>)
 8008e3e:	f000 fa25 	bl	800928c <__malloc_lock>
 8008e42:	6833      	ldr	r3, [r6, #0]
 8008e44:	461c      	mov	r4, r3
 8008e46:	bb34      	cbnz	r4, 8008e96 <_malloc_r+0x82>
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7ff ffc2 	bl	8008dd4 <sbrk_aligned>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	4604      	mov	r4, r0
 8008e54:	d14d      	bne.n	8008ef2 <_malloc_r+0xde>
 8008e56:	6834      	ldr	r4, [r6, #0]
 8008e58:	4626      	mov	r6, r4
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	d140      	bne.n	8008ee0 <_malloc_r+0xcc>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	4631      	mov	r1, r6
 8008e62:	4638      	mov	r0, r7
 8008e64:	eb04 0803 	add.w	r8, r4, r3
 8008e68:	f000 f9a4 	bl	80091b4 <_sbrk_r>
 8008e6c:	4580      	cmp	r8, r0
 8008e6e:	d13a      	bne.n	8008ee6 <_malloc_r+0xd2>
 8008e70:	6821      	ldr	r1, [r4, #0]
 8008e72:	3503      	adds	r5, #3
 8008e74:	1a6d      	subs	r5, r5, r1
 8008e76:	f025 0503 	bic.w	r5, r5, #3
 8008e7a:	3508      	adds	r5, #8
 8008e7c:	2d0c      	cmp	r5, #12
 8008e7e:	bf38      	it	cc
 8008e80:	250c      	movcc	r5, #12
 8008e82:	4629      	mov	r1, r5
 8008e84:	4638      	mov	r0, r7
 8008e86:	f7ff ffa5 	bl	8008dd4 <sbrk_aligned>
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d02b      	beq.n	8008ee6 <_malloc_r+0xd2>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	442b      	add	r3, r5
 8008e92:	6023      	str	r3, [r4, #0]
 8008e94:	e00e      	b.n	8008eb4 <_malloc_r+0xa0>
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	1b52      	subs	r2, r2, r5
 8008e9a:	d41e      	bmi.n	8008eda <_malloc_r+0xc6>
 8008e9c:	2a0b      	cmp	r2, #11
 8008e9e:	d916      	bls.n	8008ece <_malloc_r+0xba>
 8008ea0:	1961      	adds	r1, r4, r5
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	6025      	str	r5, [r4, #0]
 8008ea6:	bf18      	it	ne
 8008ea8:	6059      	strne	r1, [r3, #4]
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	bf08      	it	eq
 8008eae:	6031      	streq	r1, [r6, #0]
 8008eb0:	5162      	str	r2, [r4, r5]
 8008eb2:	604b      	str	r3, [r1, #4]
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	f104 060b 	add.w	r6, r4, #11
 8008eba:	f000 f9ed 	bl	8009298 <__malloc_unlock>
 8008ebe:	f026 0607 	bic.w	r6, r6, #7
 8008ec2:	1d23      	adds	r3, r4, #4
 8008ec4:	1af2      	subs	r2, r6, r3
 8008ec6:	d0b6      	beq.n	8008e36 <_malloc_r+0x22>
 8008ec8:	1b9b      	subs	r3, r3, r6
 8008eca:	50a3      	str	r3, [r4, r2]
 8008ecc:	e7b3      	b.n	8008e36 <_malloc_r+0x22>
 8008ece:	6862      	ldr	r2, [r4, #4]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	bf0c      	ite	eq
 8008ed4:	6032      	streq	r2, [r6, #0]
 8008ed6:	605a      	strne	r2, [r3, #4]
 8008ed8:	e7ec      	b.n	8008eb4 <_malloc_r+0xa0>
 8008eda:	4623      	mov	r3, r4
 8008edc:	6864      	ldr	r4, [r4, #4]
 8008ede:	e7b2      	b.n	8008e46 <_malloc_r+0x32>
 8008ee0:	4634      	mov	r4, r6
 8008ee2:	6876      	ldr	r6, [r6, #4]
 8008ee4:	e7b9      	b.n	8008e5a <_malloc_r+0x46>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	603b      	str	r3, [r7, #0]
 8008eea:	4638      	mov	r0, r7
 8008eec:	f000 f9d4 	bl	8009298 <__malloc_unlock>
 8008ef0:	e7a1      	b.n	8008e36 <_malloc_r+0x22>
 8008ef2:	6025      	str	r5, [r4, #0]
 8008ef4:	e7de      	b.n	8008eb4 <_malloc_r+0xa0>
 8008ef6:	bf00      	nop
 8008ef8:	20000798 	.word	0x20000798

08008efc <__ssputs_r>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	688e      	ldr	r6, [r1, #8]
 8008f02:	429e      	cmp	r6, r3
 8008f04:	4682      	mov	sl, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	4690      	mov	r8, r2
 8008f0a:	461f      	mov	r7, r3
 8008f0c:	d838      	bhi.n	8008f80 <__ssputs_r+0x84>
 8008f0e:	898a      	ldrh	r2, [r1, #12]
 8008f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f14:	d032      	beq.n	8008f7c <__ssputs_r+0x80>
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	6909      	ldr	r1, [r1, #16]
 8008f1a:	eba5 0901 	sub.w	r9, r5, r1
 8008f1e:	6965      	ldr	r5, [r4, #20]
 8008f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f28:	3301      	adds	r3, #1
 8008f2a:	444b      	add	r3, r9
 8008f2c:	106d      	asrs	r5, r5, #1
 8008f2e:	429d      	cmp	r5, r3
 8008f30:	bf38      	it	cc
 8008f32:	461d      	movcc	r5, r3
 8008f34:	0553      	lsls	r3, r2, #21
 8008f36:	d531      	bpl.n	8008f9c <__ssputs_r+0xa0>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7ff ff6b 	bl	8008e14 <_malloc_r>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	b950      	cbnz	r0, 8008f58 <__ssputs_r+0x5c>
 8008f42:	230c      	movs	r3, #12
 8008f44:	f8ca 3000 	str.w	r3, [sl]
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	6921      	ldr	r1, [r4, #16]
 8008f5a:	464a      	mov	r2, r9
 8008f5c:	f7ff fb46 	bl	80085ec <memcpy>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	6126      	str	r6, [r4, #16]
 8008f6e:	6165      	str	r5, [r4, #20]
 8008f70:	444e      	add	r6, r9
 8008f72:	eba5 0509 	sub.w	r5, r5, r9
 8008f76:	6026      	str	r6, [r4, #0]
 8008f78:	60a5      	str	r5, [r4, #8]
 8008f7a:	463e      	mov	r6, r7
 8008f7c:	42be      	cmp	r6, r7
 8008f7e:	d900      	bls.n	8008f82 <__ssputs_r+0x86>
 8008f80:	463e      	mov	r6, r7
 8008f82:	6820      	ldr	r0, [r4, #0]
 8008f84:	4632      	mov	r2, r6
 8008f86:	4641      	mov	r1, r8
 8008f88:	f000 f966 	bl	8009258 <memmove>
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	1b9b      	subs	r3, r3, r6
 8008f90:	60a3      	str	r3, [r4, #8]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	4433      	add	r3, r6
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e7db      	b.n	8008f54 <__ssputs_r+0x58>
 8008f9c:	462a      	mov	r2, r5
 8008f9e:	f000 f981 	bl	80092a4 <_realloc_r>
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d1e1      	bne.n	8008f6c <__ssputs_r+0x70>
 8008fa8:	6921      	ldr	r1, [r4, #16]
 8008faa:	4650      	mov	r0, sl
 8008fac:	f7ff fec6 	bl	8008d3c <_free_r>
 8008fb0:	e7c7      	b.n	8008f42 <__ssputs_r+0x46>
	...

08008fb4 <_svfiprintf_r>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4698      	mov	r8, r3
 8008fba:	898b      	ldrh	r3, [r1, #12]
 8008fbc:	061b      	lsls	r3, r3, #24
 8008fbe:	b09d      	sub	sp, #116	; 0x74
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	d50e      	bpl.n	8008fe6 <_svfiprintf_r+0x32>
 8008fc8:	690b      	ldr	r3, [r1, #16]
 8008fca:	b963      	cbnz	r3, 8008fe6 <_svfiprintf_r+0x32>
 8008fcc:	2140      	movs	r1, #64	; 0x40
 8008fce:	f7ff ff21 	bl	8008e14 <_malloc_r>
 8008fd2:	6028      	str	r0, [r5, #0]
 8008fd4:	6128      	str	r0, [r5, #16]
 8008fd6:	b920      	cbnz	r0, 8008fe2 <_svfiprintf_r+0x2e>
 8008fd8:	230c      	movs	r3, #12
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	e0d1      	b.n	8009186 <_svfiprintf_r+0x1d2>
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	616b      	str	r3, [r5, #20]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fea:	2320      	movs	r3, #32
 8008fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff4:	2330      	movs	r3, #48	; 0x30
 8008ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091a0 <_svfiprintf_r+0x1ec>
 8008ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ffe:	f04f 0901 	mov.w	r9, #1
 8009002:	4623      	mov	r3, r4
 8009004:	469a      	mov	sl, r3
 8009006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900a:	b10a      	cbz	r2, 8009010 <_svfiprintf_r+0x5c>
 800900c:	2a25      	cmp	r2, #37	; 0x25
 800900e:	d1f9      	bne.n	8009004 <_svfiprintf_r+0x50>
 8009010:	ebba 0b04 	subs.w	fp, sl, r4
 8009014:	d00b      	beq.n	800902e <_svfiprintf_r+0x7a>
 8009016:	465b      	mov	r3, fp
 8009018:	4622      	mov	r2, r4
 800901a:	4629      	mov	r1, r5
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff ff6d 	bl	8008efc <__ssputs_r>
 8009022:	3001      	adds	r0, #1
 8009024:	f000 80aa 	beq.w	800917c <_svfiprintf_r+0x1c8>
 8009028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800902a:	445a      	add	r2, fp
 800902c:	9209      	str	r2, [sp, #36]	; 0x24
 800902e:	f89a 3000 	ldrb.w	r3, [sl]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80a2 	beq.w	800917c <_svfiprintf_r+0x1c8>
 8009038:	2300      	movs	r3, #0
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009042:	f10a 0a01 	add.w	sl, sl, #1
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	9307      	str	r3, [sp, #28]
 800904a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800904e:	931a      	str	r3, [sp, #104]	; 0x68
 8009050:	4654      	mov	r4, sl
 8009052:	2205      	movs	r2, #5
 8009054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009058:	4851      	ldr	r0, [pc, #324]	; (80091a0 <_svfiprintf_r+0x1ec>)
 800905a:	f7f7 f8c1 	bl	80001e0 <memchr>
 800905e:	9a04      	ldr	r2, [sp, #16]
 8009060:	b9d8      	cbnz	r0, 800909a <_svfiprintf_r+0xe6>
 8009062:	06d0      	lsls	r0, r2, #27
 8009064:	bf44      	itt	mi
 8009066:	2320      	movmi	r3, #32
 8009068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906c:	0711      	lsls	r1, r2, #28
 800906e:	bf44      	itt	mi
 8009070:	232b      	movmi	r3, #43	; 0x2b
 8009072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009076:	f89a 3000 	ldrb.w	r3, [sl]
 800907a:	2b2a      	cmp	r3, #42	; 0x2a
 800907c:	d015      	beq.n	80090aa <_svfiprintf_r+0xf6>
 800907e:	9a07      	ldr	r2, [sp, #28]
 8009080:	4654      	mov	r4, sl
 8009082:	2000      	movs	r0, #0
 8009084:	f04f 0c0a 	mov.w	ip, #10
 8009088:	4621      	mov	r1, r4
 800908a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908e:	3b30      	subs	r3, #48	; 0x30
 8009090:	2b09      	cmp	r3, #9
 8009092:	d94e      	bls.n	8009132 <_svfiprintf_r+0x17e>
 8009094:	b1b0      	cbz	r0, 80090c4 <_svfiprintf_r+0x110>
 8009096:	9207      	str	r2, [sp, #28]
 8009098:	e014      	b.n	80090c4 <_svfiprintf_r+0x110>
 800909a:	eba0 0308 	sub.w	r3, r0, r8
 800909e:	fa09 f303 	lsl.w	r3, r9, r3
 80090a2:	4313      	orrs	r3, r2
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	46a2      	mov	sl, r4
 80090a8:	e7d2      	b.n	8009050 <_svfiprintf_r+0x9c>
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	1d19      	adds	r1, r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	9103      	str	r1, [sp, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bfbb      	ittet	lt
 80090b6:	425b      	neglt	r3, r3
 80090b8:	f042 0202 	orrlt.w	r2, r2, #2
 80090bc:	9307      	strge	r3, [sp, #28]
 80090be:	9307      	strlt	r3, [sp, #28]
 80090c0:	bfb8      	it	lt
 80090c2:	9204      	strlt	r2, [sp, #16]
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b2e      	cmp	r3, #46	; 0x2e
 80090c8:	d10c      	bne.n	80090e4 <_svfiprintf_r+0x130>
 80090ca:	7863      	ldrb	r3, [r4, #1]
 80090cc:	2b2a      	cmp	r3, #42	; 0x2a
 80090ce:	d135      	bne.n	800913c <_svfiprintf_r+0x188>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9203      	str	r2, [sp, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfb8      	it	lt
 80090dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090e0:	3402      	adds	r4, #2
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091b0 <_svfiprintf_r+0x1fc>
 80090e8:	7821      	ldrb	r1, [r4, #0]
 80090ea:	2203      	movs	r2, #3
 80090ec:	4650      	mov	r0, sl
 80090ee:	f7f7 f877 	bl	80001e0 <memchr>
 80090f2:	b140      	cbz	r0, 8009106 <_svfiprintf_r+0x152>
 80090f4:	2340      	movs	r3, #64	; 0x40
 80090f6:	eba0 000a 	sub.w	r0, r0, sl
 80090fa:	fa03 f000 	lsl.w	r0, r3, r0
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	4303      	orrs	r3, r0
 8009102:	3401      	adds	r4, #1
 8009104:	9304      	str	r3, [sp, #16]
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	4826      	ldr	r0, [pc, #152]	; (80091a4 <_svfiprintf_r+0x1f0>)
 800910c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009110:	2206      	movs	r2, #6
 8009112:	f7f7 f865 	bl	80001e0 <memchr>
 8009116:	2800      	cmp	r0, #0
 8009118:	d038      	beq.n	800918c <_svfiprintf_r+0x1d8>
 800911a:	4b23      	ldr	r3, [pc, #140]	; (80091a8 <_svfiprintf_r+0x1f4>)
 800911c:	bb1b      	cbnz	r3, 8009166 <_svfiprintf_r+0x1b2>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	3307      	adds	r3, #7
 8009122:	f023 0307 	bic.w	r3, r3, #7
 8009126:	3308      	adds	r3, #8
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912c:	4433      	add	r3, r6
 800912e:	9309      	str	r3, [sp, #36]	; 0x24
 8009130:	e767      	b.n	8009002 <_svfiprintf_r+0x4e>
 8009132:	fb0c 3202 	mla	r2, ip, r2, r3
 8009136:	460c      	mov	r4, r1
 8009138:	2001      	movs	r0, #1
 800913a:	e7a5      	b.n	8009088 <_svfiprintf_r+0xd4>
 800913c:	2300      	movs	r3, #0
 800913e:	3401      	adds	r4, #1
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	4619      	mov	r1, r3
 8009144:	f04f 0c0a 	mov.w	ip, #10
 8009148:	4620      	mov	r0, r4
 800914a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914e:	3a30      	subs	r2, #48	; 0x30
 8009150:	2a09      	cmp	r2, #9
 8009152:	d903      	bls.n	800915c <_svfiprintf_r+0x1a8>
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0c5      	beq.n	80090e4 <_svfiprintf_r+0x130>
 8009158:	9105      	str	r1, [sp, #20]
 800915a:	e7c3      	b.n	80090e4 <_svfiprintf_r+0x130>
 800915c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009160:	4604      	mov	r4, r0
 8009162:	2301      	movs	r3, #1
 8009164:	e7f0      	b.n	8009148 <_svfiprintf_r+0x194>
 8009166:	ab03      	add	r3, sp, #12
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	462a      	mov	r2, r5
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <_svfiprintf_r+0x1f8>)
 800916e:	a904      	add	r1, sp, #16
 8009170:	4638      	mov	r0, r7
 8009172:	f7fd ffcb 	bl	800710c <_printf_float>
 8009176:	1c42      	adds	r2, r0, #1
 8009178:	4606      	mov	r6, r0
 800917a:	d1d6      	bne.n	800912a <_svfiprintf_r+0x176>
 800917c:	89ab      	ldrh	r3, [r5, #12]
 800917e:	065b      	lsls	r3, r3, #25
 8009180:	f53f af2c 	bmi.w	8008fdc <_svfiprintf_r+0x28>
 8009184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009186:	b01d      	add	sp, #116	; 0x74
 8009188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918c:	ab03      	add	r3, sp, #12
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	462a      	mov	r2, r5
 8009192:	4b06      	ldr	r3, [pc, #24]	; (80091ac <_svfiprintf_r+0x1f8>)
 8009194:	a904      	add	r1, sp, #16
 8009196:	4638      	mov	r0, r7
 8009198:	f7fe fa5c 	bl	8007654 <_printf_i>
 800919c:	e7eb      	b.n	8009176 <_svfiprintf_r+0x1c2>
 800919e:	bf00      	nop
 80091a0:	0800a774 	.word	0x0800a774
 80091a4:	0800a77e 	.word	0x0800a77e
 80091a8:	0800710d 	.word	0x0800710d
 80091ac:	08008efd 	.word	0x08008efd
 80091b0:	0800a77a 	.word	0x0800a77a

080091b4 <_sbrk_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d06      	ldr	r5, [pc, #24]	; (80091d0 <_sbrk_r+0x1c>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f7f8 fd76 	bl	8001cb0 <_sbrk>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_sbrk_r+0x1a>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_sbrk_r+0x1a>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	200007a0 	.word	0x200007a0

080091d4 <__assert_func>:
 80091d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091d6:	4614      	mov	r4, r2
 80091d8:	461a      	mov	r2, r3
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <__assert_func+0x2c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4605      	mov	r5, r0
 80091e0:	68d8      	ldr	r0, [r3, #12]
 80091e2:	b14c      	cbz	r4, 80091f8 <__assert_func+0x24>
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <__assert_func+0x30>)
 80091e6:	9100      	str	r1, [sp, #0]
 80091e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091ec:	4906      	ldr	r1, [pc, #24]	; (8009208 <__assert_func+0x34>)
 80091ee:	462b      	mov	r3, r5
 80091f0:	f000 f80e 	bl	8009210 <fiprintf>
 80091f4:	f000 faac 	bl	8009750 <abort>
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <__assert_func+0x38>)
 80091fa:	461c      	mov	r4, r3
 80091fc:	e7f3      	b.n	80091e6 <__assert_func+0x12>
 80091fe:	bf00      	nop
 8009200:	20000014 	.word	0x20000014
 8009204:	0800a785 	.word	0x0800a785
 8009208:	0800a792 	.word	0x0800a792
 800920c:	0800a7c0 	.word	0x0800a7c0

08009210 <fiprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b503      	push	{r0, r1, lr}
 8009214:	4601      	mov	r1, r0
 8009216:	ab03      	add	r3, sp, #12
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <fiprintf+0x20>)
 800921a:	f853 2b04 	ldr.w	r2, [r3], #4
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f000 f897 	bl	8009354 <_vfiprintf_r>
 8009226:	b002      	add	sp, #8
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	20000014 	.word	0x20000014

08009234 <__ascii_mbtowc>:
 8009234:	b082      	sub	sp, #8
 8009236:	b901      	cbnz	r1, 800923a <__ascii_mbtowc+0x6>
 8009238:	a901      	add	r1, sp, #4
 800923a:	b142      	cbz	r2, 800924e <__ascii_mbtowc+0x1a>
 800923c:	b14b      	cbz	r3, 8009252 <__ascii_mbtowc+0x1e>
 800923e:	7813      	ldrb	r3, [r2, #0]
 8009240:	600b      	str	r3, [r1, #0]
 8009242:	7812      	ldrb	r2, [r2, #0]
 8009244:	1e10      	subs	r0, r2, #0
 8009246:	bf18      	it	ne
 8009248:	2001      	movne	r0, #1
 800924a:	b002      	add	sp, #8
 800924c:	4770      	bx	lr
 800924e:	4610      	mov	r0, r2
 8009250:	e7fb      	b.n	800924a <__ascii_mbtowc+0x16>
 8009252:	f06f 0001 	mvn.w	r0, #1
 8009256:	e7f8      	b.n	800924a <__ascii_mbtowc+0x16>

08009258 <memmove>:
 8009258:	4288      	cmp	r0, r1
 800925a:	b510      	push	{r4, lr}
 800925c:	eb01 0402 	add.w	r4, r1, r2
 8009260:	d902      	bls.n	8009268 <memmove+0x10>
 8009262:	4284      	cmp	r4, r0
 8009264:	4623      	mov	r3, r4
 8009266:	d807      	bhi.n	8009278 <memmove+0x20>
 8009268:	1e43      	subs	r3, r0, #1
 800926a:	42a1      	cmp	r1, r4
 800926c:	d008      	beq.n	8009280 <memmove+0x28>
 800926e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009276:	e7f8      	b.n	800926a <memmove+0x12>
 8009278:	4402      	add	r2, r0
 800927a:	4601      	mov	r1, r0
 800927c:	428a      	cmp	r2, r1
 800927e:	d100      	bne.n	8009282 <memmove+0x2a>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928a:	e7f7      	b.n	800927c <memmove+0x24>

0800928c <__malloc_lock>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__malloc_lock+0x8>)
 800928e:	f000 bc1f 	b.w	8009ad0 <__retarget_lock_acquire_recursive>
 8009292:	bf00      	nop
 8009294:	200007a4 	.word	0x200007a4

08009298 <__malloc_unlock>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__malloc_unlock+0x8>)
 800929a:	f000 bc1a 	b.w	8009ad2 <__retarget_lock_release_recursive>
 800929e:	bf00      	nop
 80092a0:	200007a4 	.word	0x200007a4

080092a4 <_realloc_r>:
 80092a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	4680      	mov	r8, r0
 80092aa:	4614      	mov	r4, r2
 80092ac:	460e      	mov	r6, r1
 80092ae:	b921      	cbnz	r1, 80092ba <_realloc_r+0x16>
 80092b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092b4:	4611      	mov	r1, r2
 80092b6:	f7ff bdad 	b.w	8008e14 <_malloc_r>
 80092ba:	b92a      	cbnz	r2, 80092c8 <_realloc_r+0x24>
 80092bc:	f7ff fd3e 	bl	8008d3c <_free_r>
 80092c0:	4625      	mov	r5, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	f000 fc6a 	bl	8009ba0 <_malloc_usable_size_r>
 80092cc:	4284      	cmp	r4, r0
 80092ce:	4607      	mov	r7, r0
 80092d0:	d802      	bhi.n	80092d8 <_realloc_r+0x34>
 80092d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092d6:	d812      	bhi.n	80092fe <_realloc_r+0x5a>
 80092d8:	4621      	mov	r1, r4
 80092da:	4640      	mov	r0, r8
 80092dc:	f7ff fd9a 	bl	8008e14 <_malloc_r>
 80092e0:	4605      	mov	r5, r0
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d0ed      	beq.n	80092c2 <_realloc_r+0x1e>
 80092e6:	42bc      	cmp	r4, r7
 80092e8:	4622      	mov	r2, r4
 80092ea:	4631      	mov	r1, r6
 80092ec:	bf28      	it	cs
 80092ee:	463a      	movcs	r2, r7
 80092f0:	f7ff f97c 	bl	80085ec <memcpy>
 80092f4:	4631      	mov	r1, r6
 80092f6:	4640      	mov	r0, r8
 80092f8:	f7ff fd20 	bl	8008d3c <_free_r>
 80092fc:	e7e1      	b.n	80092c2 <_realloc_r+0x1e>
 80092fe:	4635      	mov	r5, r6
 8009300:	e7df      	b.n	80092c2 <_realloc_r+0x1e>

08009302 <__sfputc_r>:
 8009302:	6893      	ldr	r3, [r2, #8]
 8009304:	3b01      	subs	r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	b410      	push	{r4}
 800930a:	6093      	str	r3, [r2, #8]
 800930c:	da08      	bge.n	8009320 <__sfputc_r+0x1e>
 800930e:	6994      	ldr	r4, [r2, #24]
 8009310:	42a3      	cmp	r3, r4
 8009312:	db01      	blt.n	8009318 <__sfputc_r+0x16>
 8009314:	290a      	cmp	r1, #10
 8009316:	d103      	bne.n	8009320 <__sfputc_r+0x1e>
 8009318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800931c:	f000 b94a 	b.w	80095b4 <__swbuf_r>
 8009320:	6813      	ldr	r3, [r2, #0]
 8009322:	1c58      	adds	r0, r3, #1
 8009324:	6010      	str	r0, [r2, #0]
 8009326:	7019      	strb	r1, [r3, #0]
 8009328:	4608      	mov	r0, r1
 800932a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800932e:	4770      	bx	lr

08009330 <__sfputs_r>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	4614      	mov	r4, r2
 8009338:	18d5      	adds	r5, r2, r3
 800933a:	42ac      	cmp	r4, r5
 800933c:	d101      	bne.n	8009342 <__sfputs_r+0x12>
 800933e:	2000      	movs	r0, #0
 8009340:	e007      	b.n	8009352 <__sfputs_r+0x22>
 8009342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009346:	463a      	mov	r2, r7
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff ffda 	bl	8009302 <__sfputc_r>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d1f3      	bne.n	800933a <__sfputs_r+0xa>
 8009352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009354 <_vfiprintf_r>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	460d      	mov	r5, r1
 800935a:	b09d      	sub	sp, #116	; 0x74
 800935c:	4614      	mov	r4, r2
 800935e:	4698      	mov	r8, r3
 8009360:	4606      	mov	r6, r0
 8009362:	b118      	cbz	r0, 800936c <_vfiprintf_r+0x18>
 8009364:	6983      	ldr	r3, [r0, #24]
 8009366:	b90b      	cbnz	r3, 800936c <_vfiprintf_r+0x18>
 8009368:	f000 fb14 	bl	8009994 <__sinit>
 800936c:	4b89      	ldr	r3, [pc, #548]	; (8009594 <_vfiprintf_r+0x240>)
 800936e:	429d      	cmp	r5, r3
 8009370:	d11b      	bne.n	80093aa <_vfiprintf_r+0x56>
 8009372:	6875      	ldr	r5, [r6, #4]
 8009374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	d405      	bmi.n	8009386 <_vfiprintf_r+0x32>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	059a      	lsls	r2, r3, #22
 800937e:	d402      	bmi.n	8009386 <_vfiprintf_r+0x32>
 8009380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009382:	f000 fba5 	bl	8009ad0 <__retarget_lock_acquire_recursive>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	d501      	bpl.n	8009390 <_vfiprintf_r+0x3c>
 800938c:	692b      	ldr	r3, [r5, #16]
 800938e:	b9eb      	cbnz	r3, 80093cc <_vfiprintf_r+0x78>
 8009390:	4629      	mov	r1, r5
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f96e 	bl	8009674 <__swsetup_r>
 8009398:	b1c0      	cbz	r0, 80093cc <_vfiprintf_r+0x78>
 800939a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800939c:	07dc      	lsls	r4, r3, #31
 800939e:	d50e      	bpl.n	80093be <_vfiprintf_r+0x6a>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b01d      	add	sp, #116	; 0x74
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	4b7b      	ldr	r3, [pc, #492]	; (8009598 <_vfiprintf_r+0x244>)
 80093ac:	429d      	cmp	r5, r3
 80093ae:	d101      	bne.n	80093b4 <_vfiprintf_r+0x60>
 80093b0:	68b5      	ldr	r5, [r6, #8]
 80093b2:	e7df      	b.n	8009374 <_vfiprintf_r+0x20>
 80093b4:	4b79      	ldr	r3, [pc, #484]	; (800959c <_vfiprintf_r+0x248>)
 80093b6:	429d      	cmp	r5, r3
 80093b8:	bf08      	it	eq
 80093ba:	68f5      	ldreq	r5, [r6, #12]
 80093bc:	e7da      	b.n	8009374 <_vfiprintf_r+0x20>
 80093be:	89ab      	ldrh	r3, [r5, #12]
 80093c0:	0598      	lsls	r0, r3, #22
 80093c2:	d4ed      	bmi.n	80093a0 <_vfiprintf_r+0x4c>
 80093c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093c6:	f000 fb84 	bl	8009ad2 <__retarget_lock_release_recursive>
 80093ca:	e7e9      	b.n	80093a0 <_vfiprintf_r+0x4c>
 80093cc:	2300      	movs	r3, #0
 80093ce:	9309      	str	r3, [sp, #36]	; 0x24
 80093d0:	2320      	movs	r3, #32
 80093d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80093da:	2330      	movs	r3, #48	; 0x30
 80093dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095a0 <_vfiprintf_r+0x24c>
 80093e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093e4:	f04f 0901 	mov.w	r9, #1
 80093e8:	4623      	mov	r3, r4
 80093ea:	469a      	mov	sl, r3
 80093ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f0:	b10a      	cbz	r2, 80093f6 <_vfiprintf_r+0xa2>
 80093f2:	2a25      	cmp	r2, #37	; 0x25
 80093f4:	d1f9      	bne.n	80093ea <_vfiprintf_r+0x96>
 80093f6:	ebba 0b04 	subs.w	fp, sl, r4
 80093fa:	d00b      	beq.n	8009414 <_vfiprintf_r+0xc0>
 80093fc:	465b      	mov	r3, fp
 80093fe:	4622      	mov	r2, r4
 8009400:	4629      	mov	r1, r5
 8009402:	4630      	mov	r0, r6
 8009404:	f7ff ff94 	bl	8009330 <__sfputs_r>
 8009408:	3001      	adds	r0, #1
 800940a:	f000 80aa 	beq.w	8009562 <_vfiprintf_r+0x20e>
 800940e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009410:	445a      	add	r2, fp
 8009412:	9209      	str	r2, [sp, #36]	; 0x24
 8009414:	f89a 3000 	ldrb.w	r3, [sl]
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 80a2 	beq.w	8009562 <_vfiprintf_r+0x20e>
 800941e:	2300      	movs	r3, #0
 8009420:	f04f 32ff 	mov.w	r2, #4294967295
 8009424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009428:	f10a 0a01 	add.w	sl, sl, #1
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009434:	931a      	str	r3, [sp, #104]	; 0x68
 8009436:	4654      	mov	r4, sl
 8009438:	2205      	movs	r2, #5
 800943a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943e:	4858      	ldr	r0, [pc, #352]	; (80095a0 <_vfiprintf_r+0x24c>)
 8009440:	f7f6 fece 	bl	80001e0 <memchr>
 8009444:	9a04      	ldr	r2, [sp, #16]
 8009446:	b9d8      	cbnz	r0, 8009480 <_vfiprintf_r+0x12c>
 8009448:	06d1      	lsls	r1, r2, #27
 800944a:	bf44      	itt	mi
 800944c:	2320      	movmi	r3, #32
 800944e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009452:	0713      	lsls	r3, r2, #28
 8009454:	bf44      	itt	mi
 8009456:	232b      	movmi	r3, #43	; 0x2b
 8009458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800945c:	f89a 3000 	ldrb.w	r3, [sl]
 8009460:	2b2a      	cmp	r3, #42	; 0x2a
 8009462:	d015      	beq.n	8009490 <_vfiprintf_r+0x13c>
 8009464:	9a07      	ldr	r2, [sp, #28]
 8009466:	4654      	mov	r4, sl
 8009468:	2000      	movs	r0, #0
 800946a:	f04f 0c0a 	mov.w	ip, #10
 800946e:	4621      	mov	r1, r4
 8009470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009474:	3b30      	subs	r3, #48	; 0x30
 8009476:	2b09      	cmp	r3, #9
 8009478:	d94e      	bls.n	8009518 <_vfiprintf_r+0x1c4>
 800947a:	b1b0      	cbz	r0, 80094aa <_vfiprintf_r+0x156>
 800947c:	9207      	str	r2, [sp, #28]
 800947e:	e014      	b.n	80094aa <_vfiprintf_r+0x156>
 8009480:	eba0 0308 	sub.w	r3, r0, r8
 8009484:	fa09 f303 	lsl.w	r3, r9, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	46a2      	mov	sl, r4
 800948e:	e7d2      	b.n	8009436 <_vfiprintf_r+0xe2>
 8009490:	9b03      	ldr	r3, [sp, #12]
 8009492:	1d19      	adds	r1, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	9103      	str	r1, [sp, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	bfbb      	ittet	lt
 800949c:	425b      	neglt	r3, r3
 800949e:	f042 0202 	orrlt.w	r2, r2, #2
 80094a2:	9307      	strge	r3, [sp, #28]
 80094a4:	9307      	strlt	r3, [sp, #28]
 80094a6:	bfb8      	it	lt
 80094a8:	9204      	strlt	r2, [sp, #16]
 80094aa:	7823      	ldrb	r3, [r4, #0]
 80094ac:	2b2e      	cmp	r3, #46	; 0x2e
 80094ae:	d10c      	bne.n	80094ca <_vfiprintf_r+0x176>
 80094b0:	7863      	ldrb	r3, [r4, #1]
 80094b2:	2b2a      	cmp	r3, #42	; 0x2a
 80094b4:	d135      	bne.n	8009522 <_vfiprintf_r+0x1ce>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9203      	str	r2, [sp, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfb8      	it	lt
 80094c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80094c6:	3402      	adds	r4, #2
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095b0 <_vfiprintf_r+0x25c>
 80094ce:	7821      	ldrb	r1, [r4, #0]
 80094d0:	2203      	movs	r2, #3
 80094d2:	4650      	mov	r0, sl
 80094d4:	f7f6 fe84 	bl	80001e0 <memchr>
 80094d8:	b140      	cbz	r0, 80094ec <_vfiprintf_r+0x198>
 80094da:	2340      	movs	r3, #64	; 0x40
 80094dc:	eba0 000a 	sub.w	r0, r0, sl
 80094e0:	fa03 f000 	lsl.w	r0, r3, r0
 80094e4:	9b04      	ldr	r3, [sp, #16]
 80094e6:	4303      	orrs	r3, r0
 80094e8:	3401      	adds	r4, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f0:	482c      	ldr	r0, [pc, #176]	; (80095a4 <_vfiprintf_r+0x250>)
 80094f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094f6:	2206      	movs	r2, #6
 80094f8:	f7f6 fe72 	bl	80001e0 <memchr>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d03f      	beq.n	8009580 <_vfiprintf_r+0x22c>
 8009500:	4b29      	ldr	r3, [pc, #164]	; (80095a8 <_vfiprintf_r+0x254>)
 8009502:	bb1b      	cbnz	r3, 800954c <_vfiprintf_r+0x1f8>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	3307      	adds	r3, #7
 8009508:	f023 0307 	bic.w	r3, r3, #7
 800950c:	3308      	adds	r3, #8
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009512:	443b      	add	r3, r7
 8009514:	9309      	str	r3, [sp, #36]	; 0x24
 8009516:	e767      	b.n	80093e8 <_vfiprintf_r+0x94>
 8009518:	fb0c 3202 	mla	r2, ip, r2, r3
 800951c:	460c      	mov	r4, r1
 800951e:	2001      	movs	r0, #1
 8009520:	e7a5      	b.n	800946e <_vfiprintf_r+0x11a>
 8009522:	2300      	movs	r3, #0
 8009524:	3401      	adds	r4, #1
 8009526:	9305      	str	r3, [sp, #20]
 8009528:	4619      	mov	r1, r3
 800952a:	f04f 0c0a 	mov.w	ip, #10
 800952e:	4620      	mov	r0, r4
 8009530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009534:	3a30      	subs	r2, #48	; 0x30
 8009536:	2a09      	cmp	r2, #9
 8009538:	d903      	bls.n	8009542 <_vfiprintf_r+0x1ee>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0c5      	beq.n	80094ca <_vfiprintf_r+0x176>
 800953e:	9105      	str	r1, [sp, #20]
 8009540:	e7c3      	b.n	80094ca <_vfiprintf_r+0x176>
 8009542:	fb0c 2101 	mla	r1, ip, r1, r2
 8009546:	4604      	mov	r4, r0
 8009548:	2301      	movs	r3, #1
 800954a:	e7f0      	b.n	800952e <_vfiprintf_r+0x1da>
 800954c:	ab03      	add	r3, sp, #12
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	462a      	mov	r2, r5
 8009552:	4b16      	ldr	r3, [pc, #88]	; (80095ac <_vfiprintf_r+0x258>)
 8009554:	a904      	add	r1, sp, #16
 8009556:	4630      	mov	r0, r6
 8009558:	f7fd fdd8 	bl	800710c <_printf_float>
 800955c:	4607      	mov	r7, r0
 800955e:	1c78      	adds	r0, r7, #1
 8009560:	d1d6      	bne.n	8009510 <_vfiprintf_r+0x1bc>
 8009562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009564:	07d9      	lsls	r1, r3, #31
 8009566:	d405      	bmi.n	8009574 <_vfiprintf_r+0x220>
 8009568:	89ab      	ldrh	r3, [r5, #12]
 800956a:	059a      	lsls	r2, r3, #22
 800956c:	d402      	bmi.n	8009574 <_vfiprintf_r+0x220>
 800956e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009570:	f000 faaf 	bl	8009ad2 <__retarget_lock_release_recursive>
 8009574:	89ab      	ldrh	r3, [r5, #12]
 8009576:	065b      	lsls	r3, r3, #25
 8009578:	f53f af12 	bmi.w	80093a0 <_vfiprintf_r+0x4c>
 800957c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957e:	e711      	b.n	80093a4 <_vfiprintf_r+0x50>
 8009580:	ab03      	add	r3, sp, #12
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	462a      	mov	r2, r5
 8009586:	4b09      	ldr	r3, [pc, #36]	; (80095ac <_vfiprintf_r+0x258>)
 8009588:	a904      	add	r1, sp, #16
 800958a:	4630      	mov	r0, r6
 800958c:	f7fe f862 	bl	8007654 <_printf_i>
 8009590:	e7e4      	b.n	800955c <_vfiprintf_r+0x208>
 8009592:	bf00      	nop
 8009594:	0800a8ec 	.word	0x0800a8ec
 8009598:	0800a90c 	.word	0x0800a90c
 800959c:	0800a8cc 	.word	0x0800a8cc
 80095a0:	0800a774 	.word	0x0800a774
 80095a4:	0800a77e 	.word	0x0800a77e
 80095a8:	0800710d 	.word	0x0800710d
 80095ac:	08009331 	.word	0x08009331
 80095b0:	0800a77a 	.word	0x0800a77a

080095b4 <__swbuf_r>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	460e      	mov	r6, r1
 80095b8:	4614      	mov	r4, r2
 80095ba:	4605      	mov	r5, r0
 80095bc:	b118      	cbz	r0, 80095c6 <__swbuf_r+0x12>
 80095be:	6983      	ldr	r3, [r0, #24]
 80095c0:	b90b      	cbnz	r3, 80095c6 <__swbuf_r+0x12>
 80095c2:	f000 f9e7 	bl	8009994 <__sinit>
 80095c6:	4b21      	ldr	r3, [pc, #132]	; (800964c <__swbuf_r+0x98>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	d12b      	bne.n	8009624 <__swbuf_r+0x70>
 80095cc:	686c      	ldr	r4, [r5, #4]
 80095ce:	69a3      	ldr	r3, [r4, #24]
 80095d0:	60a3      	str	r3, [r4, #8]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	d52f      	bpl.n	8009638 <__swbuf_r+0x84>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	b36b      	cbz	r3, 8009638 <__swbuf_r+0x84>
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	6820      	ldr	r0, [r4, #0]
 80095e0:	1ac0      	subs	r0, r0, r3
 80095e2:	6963      	ldr	r3, [r4, #20]
 80095e4:	b2f6      	uxtb	r6, r6
 80095e6:	4283      	cmp	r3, r0
 80095e8:	4637      	mov	r7, r6
 80095ea:	dc04      	bgt.n	80095f6 <__swbuf_r+0x42>
 80095ec:	4621      	mov	r1, r4
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 f93c 	bl	800986c <_fflush_r>
 80095f4:	bb30      	cbnz	r0, 8009644 <__swbuf_r+0x90>
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	60a3      	str	r3, [r4, #8]
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	6022      	str	r2, [r4, #0]
 8009602:	701e      	strb	r6, [r3, #0]
 8009604:	6963      	ldr	r3, [r4, #20]
 8009606:	3001      	adds	r0, #1
 8009608:	4283      	cmp	r3, r0
 800960a:	d004      	beq.n	8009616 <__swbuf_r+0x62>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	07db      	lsls	r3, r3, #31
 8009610:	d506      	bpl.n	8009620 <__swbuf_r+0x6c>
 8009612:	2e0a      	cmp	r6, #10
 8009614:	d104      	bne.n	8009620 <__swbuf_r+0x6c>
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	f000 f927 	bl	800986c <_fflush_r>
 800961e:	b988      	cbnz	r0, 8009644 <__swbuf_r+0x90>
 8009620:	4638      	mov	r0, r7
 8009622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009624:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <__swbuf_r+0x9c>)
 8009626:	429c      	cmp	r4, r3
 8009628:	d101      	bne.n	800962e <__swbuf_r+0x7a>
 800962a:	68ac      	ldr	r4, [r5, #8]
 800962c:	e7cf      	b.n	80095ce <__swbuf_r+0x1a>
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <__swbuf_r+0xa0>)
 8009630:	429c      	cmp	r4, r3
 8009632:	bf08      	it	eq
 8009634:	68ec      	ldreq	r4, [r5, #12]
 8009636:	e7ca      	b.n	80095ce <__swbuf_r+0x1a>
 8009638:	4621      	mov	r1, r4
 800963a:	4628      	mov	r0, r5
 800963c:	f000 f81a 	bl	8009674 <__swsetup_r>
 8009640:	2800      	cmp	r0, #0
 8009642:	d0cb      	beq.n	80095dc <__swbuf_r+0x28>
 8009644:	f04f 37ff 	mov.w	r7, #4294967295
 8009648:	e7ea      	b.n	8009620 <__swbuf_r+0x6c>
 800964a:	bf00      	nop
 800964c:	0800a8ec 	.word	0x0800a8ec
 8009650:	0800a90c 	.word	0x0800a90c
 8009654:	0800a8cc 	.word	0x0800a8cc

08009658 <__ascii_wctomb>:
 8009658:	b149      	cbz	r1, 800966e <__ascii_wctomb+0x16>
 800965a:	2aff      	cmp	r2, #255	; 0xff
 800965c:	bf85      	ittet	hi
 800965e:	238a      	movhi	r3, #138	; 0x8a
 8009660:	6003      	strhi	r3, [r0, #0]
 8009662:	700a      	strbls	r2, [r1, #0]
 8009664:	f04f 30ff 	movhi.w	r0, #4294967295
 8009668:	bf98      	it	ls
 800966a:	2001      	movls	r0, #1
 800966c:	4770      	bx	lr
 800966e:	4608      	mov	r0, r1
 8009670:	4770      	bx	lr
	...

08009674 <__swsetup_r>:
 8009674:	4b32      	ldr	r3, [pc, #200]	; (8009740 <__swsetup_r+0xcc>)
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	681d      	ldr	r5, [r3, #0]
 800967a:	4606      	mov	r6, r0
 800967c:	460c      	mov	r4, r1
 800967e:	b125      	cbz	r5, 800968a <__swsetup_r+0x16>
 8009680:	69ab      	ldr	r3, [r5, #24]
 8009682:	b913      	cbnz	r3, 800968a <__swsetup_r+0x16>
 8009684:	4628      	mov	r0, r5
 8009686:	f000 f985 	bl	8009994 <__sinit>
 800968a:	4b2e      	ldr	r3, [pc, #184]	; (8009744 <__swsetup_r+0xd0>)
 800968c:	429c      	cmp	r4, r3
 800968e:	d10f      	bne.n	80096b0 <__swsetup_r+0x3c>
 8009690:	686c      	ldr	r4, [r5, #4]
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009698:	0719      	lsls	r1, r3, #28
 800969a:	d42c      	bmi.n	80096f6 <__swsetup_r+0x82>
 800969c:	06dd      	lsls	r5, r3, #27
 800969e:	d411      	bmi.n	80096c4 <__swsetup_r+0x50>
 80096a0:	2309      	movs	r3, #9
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	f04f 30ff 	mov.w	r0, #4294967295
 80096ae:	e03e      	b.n	800972e <__swsetup_r+0xba>
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <__swsetup_r+0xd4>)
 80096b2:	429c      	cmp	r4, r3
 80096b4:	d101      	bne.n	80096ba <__swsetup_r+0x46>
 80096b6:	68ac      	ldr	r4, [r5, #8]
 80096b8:	e7eb      	b.n	8009692 <__swsetup_r+0x1e>
 80096ba:	4b24      	ldr	r3, [pc, #144]	; (800974c <__swsetup_r+0xd8>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	bf08      	it	eq
 80096c0:	68ec      	ldreq	r4, [r5, #12]
 80096c2:	e7e6      	b.n	8009692 <__swsetup_r+0x1e>
 80096c4:	0758      	lsls	r0, r3, #29
 80096c6:	d512      	bpl.n	80096ee <__swsetup_r+0x7a>
 80096c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ca:	b141      	cbz	r1, 80096de <__swsetup_r+0x6a>
 80096cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d002      	beq.n	80096da <__swsetup_r+0x66>
 80096d4:	4630      	mov	r0, r6
 80096d6:	f7ff fb31 	bl	8008d3c <_free_r>
 80096da:	2300      	movs	r3, #0
 80096dc:	6363      	str	r3, [r4, #52]	; 0x34
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	6063      	str	r3, [r4, #4]
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f043 0308 	orr.w	r3, r3, #8
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	b94b      	cbnz	r3, 800970e <__swsetup_r+0x9a>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009704:	d003      	beq.n	800970e <__swsetup_r+0x9a>
 8009706:	4621      	mov	r1, r4
 8009708:	4630      	mov	r0, r6
 800970a:	f000 fa09 	bl	8009b20 <__smakebuf_r>
 800970e:	89a0      	ldrh	r0, [r4, #12]
 8009710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009714:	f010 0301 	ands.w	r3, r0, #1
 8009718:	d00a      	beq.n	8009730 <__swsetup_r+0xbc>
 800971a:	2300      	movs	r3, #0
 800971c:	60a3      	str	r3, [r4, #8]
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	425b      	negs	r3, r3
 8009722:	61a3      	str	r3, [r4, #24]
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	b943      	cbnz	r3, 800973a <__swsetup_r+0xc6>
 8009728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800972c:	d1ba      	bne.n	80096a4 <__swsetup_r+0x30>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	0781      	lsls	r1, r0, #30
 8009732:	bf58      	it	pl
 8009734:	6963      	ldrpl	r3, [r4, #20]
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	e7f4      	b.n	8009724 <__swsetup_r+0xb0>
 800973a:	2000      	movs	r0, #0
 800973c:	e7f7      	b.n	800972e <__swsetup_r+0xba>
 800973e:	bf00      	nop
 8009740:	20000014 	.word	0x20000014
 8009744:	0800a8ec 	.word	0x0800a8ec
 8009748:	0800a90c 	.word	0x0800a90c
 800974c:	0800a8cc 	.word	0x0800a8cc

08009750 <abort>:
 8009750:	b508      	push	{r3, lr}
 8009752:	2006      	movs	r0, #6
 8009754:	f000 fa54 	bl	8009c00 <raise>
 8009758:	2001      	movs	r0, #1
 800975a:	f7f8 fa31 	bl	8001bc0 <_exit>
	...

08009760 <__sflush_r>:
 8009760:	898a      	ldrh	r2, [r1, #12]
 8009762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	4605      	mov	r5, r0
 8009768:	0710      	lsls	r0, r2, #28
 800976a:	460c      	mov	r4, r1
 800976c:	d458      	bmi.n	8009820 <__sflush_r+0xc0>
 800976e:	684b      	ldr	r3, [r1, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	dc05      	bgt.n	8009780 <__sflush_r+0x20>
 8009774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	dc02      	bgt.n	8009780 <__sflush_r+0x20>
 800977a:	2000      	movs	r0, #0
 800977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009782:	2e00      	cmp	r6, #0
 8009784:	d0f9      	beq.n	800977a <__sflush_r+0x1a>
 8009786:	2300      	movs	r3, #0
 8009788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800978c:	682f      	ldr	r7, [r5, #0]
 800978e:	602b      	str	r3, [r5, #0]
 8009790:	d032      	beq.n	80097f8 <__sflush_r+0x98>
 8009792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	075a      	lsls	r2, r3, #29
 8009798:	d505      	bpl.n	80097a6 <__sflush_r+0x46>
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	1ac0      	subs	r0, r0, r3
 800979e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097a0:	b10b      	cbz	r3, 80097a6 <__sflush_r+0x46>
 80097a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097a4:	1ac0      	subs	r0, r0, r3
 80097a6:	2300      	movs	r3, #0
 80097a8:	4602      	mov	r2, r0
 80097aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ac:	6a21      	ldr	r1, [r4, #32]
 80097ae:	4628      	mov	r0, r5
 80097b0:	47b0      	blx	r6
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	d106      	bne.n	80097c6 <__sflush_r+0x66>
 80097b8:	6829      	ldr	r1, [r5, #0]
 80097ba:	291d      	cmp	r1, #29
 80097bc:	d82c      	bhi.n	8009818 <__sflush_r+0xb8>
 80097be:	4a2a      	ldr	r2, [pc, #168]	; (8009868 <__sflush_r+0x108>)
 80097c0:	40ca      	lsrs	r2, r1
 80097c2:	07d6      	lsls	r6, r2, #31
 80097c4:	d528      	bpl.n	8009818 <__sflush_r+0xb8>
 80097c6:	2200      	movs	r2, #0
 80097c8:	6062      	str	r2, [r4, #4]
 80097ca:	04d9      	lsls	r1, r3, #19
 80097cc:	6922      	ldr	r2, [r4, #16]
 80097ce:	6022      	str	r2, [r4, #0]
 80097d0:	d504      	bpl.n	80097dc <__sflush_r+0x7c>
 80097d2:	1c42      	adds	r2, r0, #1
 80097d4:	d101      	bne.n	80097da <__sflush_r+0x7a>
 80097d6:	682b      	ldr	r3, [r5, #0]
 80097d8:	b903      	cbnz	r3, 80097dc <__sflush_r+0x7c>
 80097da:	6560      	str	r0, [r4, #84]	; 0x54
 80097dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097de:	602f      	str	r7, [r5, #0]
 80097e0:	2900      	cmp	r1, #0
 80097e2:	d0ca      	beq.n	800977a <__sflush_r+0x1a>
 80097e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e8:	4299      	cmp	r1, r3
 80097ea:	d002      	beq.n	80097f2 <__sflush_r+0x92>
 80097ec:	4628      	mov	r0, r5
 80097ee:	f7ff faa5 	bl	8008d3c <_free_r>
 80097f2:	2000      	movs	r0, #0
 80097f4:	6360      	str	r0, [r4, #52]	; 0x34
 80097f6:	e7c1      	b.n	800977c <__sflush_r+0x1c>
 80097f8:	6a21      	ldr	r1, [r4, #32]
 80097fa:	2301      	movs	r3, #1
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b0      	blx	r6
 8009800:	1c41      	adds	r1, r0, #1
 8009802:	d1c7      	bne.n	8009794 <__sflush_r+0x34>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0c4      	beq.n	8009794 <__sflush_r+0x34>
 800980a:	2b1d      	cmp	r3, #29
 800980c:	d001      	beq.n	8009812 <__sflush_r+0xb2>
 800980e:	2b16      	cmp	r3, #22
 8009810:	d101      	bne.n	8009816 <__sflush_r+0xb6>
 8009812:	602f      	str	r7, [r5, #0]
 8009814:	e7b1      	b.n	800977a <__sflush_r+0x1a>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	e7ad      	b.n	800977c <__sflush_r+0x1c>
 8009820:	690f      	ldr	r7, [r1, #16]
 8009822:	2f00      	cmp	r7, #0
 8009824:	d0a9      	beq.n	800977a <__sflush_r+0x1a>
 8009826:	0793      	lsls	r3, r2, #30
 8009828:	680e      	ldr	r6, [r1, #0]
 800982a:	bf08      	it	eq
 800982c:	694b      	ldreq	r3, [r1, #20]
 800982e:	600f      	str	r7, [r1, #0]
 8009830:	bf18      	it	ne
 8009832:	2300      	movne	r3, #0
 8009834:	eba6 0807 	sub.w	r8, r6, r7
 8009838:	608b      	str	r3, [r1, #8]
 800983a:	f1b8 0f00 	cmp.w	r8, #0
 800983e:	dd9c      	ble.n	800977a <__sflush_r+0x1a>
 8009840:	6a21      	ldr	r1, [r4, #32]
 8009842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009844:	4643      	mov	r3, r8
 8009846:	463a      	mov	r2, r7
 8009848:	4628      	mov	r0, r5
 800984a:	47b0      	blx	r6
 800984c:	2800      	cmp	r0, #0
 800984e:	dc06      	bgt.n	800985e <__sflush_r+0xfe>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	e78e      	b.n	800977c <__sflush_r+0x1c>
 800985e:	4407      	add	r7, r0
 8009860:	eba8 0800 	sub.w	r8, r8, r0
 8009864:	e7e9      	b.n	800983a <__sflush_r+0xda>
 8009866:	bf00      	nop
 8009868:	20400001 	.word	0x20400001

0800986c <_fflush_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	690b      	ldr	r3, [r1, #16]
 8009870:	4605      	mov	r5, r0
 8009872:	460c      	mov	r4, r1
 8009874:	b913      	cbnz	r3, 800987c <_fflush_r+0x10>
 8009876:	2500      	movs	r5, #0
 8009878:	4628      	mov	r0, r5
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	b118      	cbz	r0, 8009886 <_fflush_r+0x1a>
 800987e:	6983      	ldr	r3, [r0, #24]
 8009880:	b90b      	cbnz	r3, 8009886 <_fflush_r+0x1a>
 8009882:	f000 f887 	bl	8009994 <__sinit>
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <_fflush_r+0x6c>)
 8009888:	429c      	cmp	r4, r3
 800988a:	d11b      	bne.n	80098c4 <_fflush_r+0x58>
 800988c:	686c      	ldr	r4, [r5, #4]
 800988e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0ef      	beq.n	8009876 <_fflush_r+0xa>
 8009896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009898:	07d0      	lsls	r0, r2, #31
 800989a:	d404      	bmi.n	80098a6 <_fflush_r+0x3a>
 800989c:	0599      	lsls	r1, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_fflush_r+0x3a>
 80098a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a2:	f000 f915 	bl	8009ad0 <__retarget_lock_acquire_recursive>
 80098a6:	4628      	mov	r0, r5
 80098a8:	4621      	mov	r1, r4
 80098aa:	f7ff ff59 	bl	8009760 <__sflush_r>
 80098ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098b0:	07da      	lsls	r2, r3, #31
 80098b2:	4605      	mov	r5, r0
 80098b4:	d4e0      	bmi.n	8009878 <_fflush_r+0xc>
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	059b      	lsls	r3, r3, #22
 80098ba:	d4dd      	bmi.n	8009878 <_fflush_r+0xc>
 80098bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098be:	f000 f908 	bl	8009ad2 <__retarget_lock_release_recursive>
 80098c2:	e7d9      	b.n	8009878 <_fflush_r+0xc>
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <_fflush_r+0x70>)
 80098c6:	429c      	cmp	r4, r3
 80098c8:	d101      	bne.n	80098ce <_fflush_r+0x62>
 80098ca:	68ac      	ldr	r4, [r5, #8]
 80098cc:	e7df      	b.n	800988e <_fflush_r+0x22>
 80098ce:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <_fflush_r+0x74>)
 80098d0:	429c      	cmp	r4, r3
 80098d2:	bf08      	it	eq
 80098d4:	68ec      	ldreq	r4, [r5, #12]
 80098d6:	e7da      	b.n	800988e <_fflush_r+0x22>
 80098d8:	0800a8ec 	.word	0x0800a8ec
 80098dc:	0800a90c 	.word	0x0800a90c
 80098e0:	0800a8cc 	.word	0x0800a8cc

080098e4 <std>:
 80098e4:	2300      	movs	r3, #0
 80098e6:	b510      	push	{r4, lr}
 80098e8:	4604      	mov	r4, r0
 80098ea:	e9c0 3300 	strd	r3, r3, [r0]
 80098ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098f2:	6083      	str	r3, [r0, #8]
 80098f4:	8181      	strh	r1, [r0, #12]
 80098f6:	6643      	str	r3, [r0, #100]	; 0x64
 80098f8:	81c2      	strh	r2, [r0, #14]
 80098fa:	6183      	str	r3, [r0, #24]
 80098fc:	4619      	mov	r1, r3
 80098fe:	2208      	movs	r2, #8
 8009900:	305c      	adds	r0, #92	; 0x5c
 8009902:	f7fd fb5b 	bl	8006fbc <memset>
 8009906:	4b05      	ldr	r3, [pc, #20]	; (800991c <std+0x38>)
 8009908:	6263      	str	r3, [r4, #36]	; 0x24
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <std+0x3c>)
 800990c:	62a3      	str	r3, [r4, #40]	; 0x28
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <std+0x40>)
 8009910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <std+0x44>)
 8009914:	6224      	str	r4, [r4, #32]
 8009916:	6323      	str	r3, [r4, #48]	; 0x30
 8009918:	bd10      	pop	{r4, pc}
 800991a:	bf00      	nop
 800991c:	08009c39 	.word	0x08009c39
 8009920:	08009c5b 	.word	0x08009c5b
 8009924:	08009c93 	.word	0x08009c93
 8009928:	08009cb7 	.word	0x08009cb7

0800992c <_cleanup_r>:
 800992c:	4901      	ldr	r1, [pc, #4]	; (8009934 <_cleanup_r+0x8>)
 800992e:	f000 b8af 	b.w	8009a90 <_fwalk_reent>
 8009932:	bf00      	nop
 8009934:	0800986d 	.word	0x0800986d

08009938 <__sfmoreglue>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	2268      	movs	r2, #104	; 0x68
 800993c:	1e4d      	subs	r5, r1, #1
 800993e:	4355      	muls	r5, r2
 8009940:	460e      	mov	r6, r1
 8009942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009946:	f7ff fa65 	bl	8008e14 <_malloc_r>
 800994a:	4604      	mov	r4, r0
 800994c:	b140      	cbz	r0, 8009960 <__sfmoreglue+0x28>
 800994e:	2100      	movs	r1, #0
 8009950:	e9c0 1600 	strd	r1, r6, [r0]
 8009954:	300c      	adds	r0, #12
 8009956:	60a0      	str	r0, [r4, #8]
 8009958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800995c:	f7fd fb2e 	bl	8006fbc <memset>
 8009960:	4620      	mov	r0, r4
 8009962:	bd70      	pop	{r4, r5, r6, pc}

08009964 <__sfp_lock_acquire>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__sfp_lock_acquire+0x8>)
 8009966:	f000 b8b3 	b.w	8009ad0 <__retarget_lock_acquire_recursive>
 800996a:	bf00      	nop
 800996c:	200007a5 	.word	0x200007a5

08009970 <__sfp_lock_release>:
 8009970:	4801      	ldr	r0, [pc, #4]	; (8009978 <__sfp_lock_release+0x8>)
 8009972:	f000 b8ae 	b.w	8009ad2 <__retarget_lock_release_recursive>
 8009976:	bf00      	nop
 8009978:	200007a5 	.word	0x200007a5

0800997c <__sinit_lock_acquire>:
 800997c:	4801      	ldr	r0, [pc, #4]	; (8009984 <__sinit_lock_acquire+0x8>)
 800997e:	f000 b8a7 	b.w	8009ad0 <__retarget_lock_acquire_recursive>
 8009982:	bf00      	nop
 8009984:	200007a6 	.word	0x200007a6

08009988 <__sinit_lock_release>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sinit_lock_release+0x8>)
 800998a:	f000 b8a2 	b.w	8009ad2 <__retarget_lock_release_recursive>
 800998e:	bf00      	nop
 8009990:	200007a6 	.word	0x200007a6

08009994 <__sinit>:
 8009994:	b510      	push	{r4, lr}
 8009996:	4604      	mov	r4, r0
 8009998:	f7ff fff0 	bl	800997c <__sinit_lock_acquire>
 800999c:	69a3      	ldr	r3, [r4, #24]
 800999e:	b11b      	cbz	r3, 80099a8 <__sinit+0x14>
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a4:	f7ff bff0 	b.w	8009988 <__sinit_lock_release>
 80099a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099ac:	6523      	str	r3, [r4, #80]	; 0x50
 80099ae:	4b13      	ldr	r3, [pc, #76]	; (80099fc <__sinit+0x68>)
 80099b0:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <__sinit+0x6c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80099b6:	42a3      	cmp	r3, r4
 80099b8:	bf04      	itt	eq
 80099ba:	2301      	moveq	r3, #1
 80099bc:	61a3      	streq	r3, [r4, #24]
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 f820 	bl	8009a04 <__sfp>
 80099c4:	6060      	str	r0, [r4, #4]
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 f81c 	bl	8009a04 <__sfp>
 80099cc:	60a0      	str	r0, [r4, #8]
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 f818 	bl	8009a04 <__sfp>
 80099d4:	2200      	movs	r2, #0
 80099d6:	60e0      	str	r0, [r4, #12]
 80099d8:	2104      	movs	r1, #4
 80099da:	6860      	ldr	r0, [r4, #4]
 80099dc:	f7ff ff82 	bl	80098e4 <std>
 80099e0:	68a0      	ldr	r0, [r4, #8]
 80099e2:	2201      	movs	r2, #1
 80099e4:	2109      	movs	r1, #9
 80099e6:	f7ff ff7d 	bl	80098e4 <std>
 80099ea:	68e0      	ldr	r0, [r4, #12]
 80099ec:	2202      	movs	r2, #2
 80099ee:	2112      	movs	r1, #18
 80099f0:	f7ff ff78 	bl	80098e4 <std>
 80099f4:	2301      	movs	r3, #1
 80099f6:	61a3      	str	r3, [r4, #24]
 80099f8:	e7d2      	b.n	80099a0 <__sinit+0xc>
 80099fa:	bf00      	nop
 80099fc:	0800a550 	.word	0x0800a550
 8009a00:	0800992d 	.word	0x0800992d

08009a04 <__sfp>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	4607      	mov	r7, r0
 8009a08:	f7ff ffac 	bl	8009964 <__sfp_lock_acquire>
 8009a0c:	4b1e      	ldr	r3, [pc, #120]	; (8009a88 <__sfp+0x84>)
 8009a0e:	681e      	ldr	r6, [r3, #0]
 8009a10:	69b3      	ldr	r3, [r6, #24]
 8009a12:	b913      	cbnz	r3, 8009a1a <__sfp+0x16>
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff ffbd 	bl	8009994 <__sinit>
 8009a1a:	3648      	adds	r6, #72	; 0x48
 8009a1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	d503      	bpl.n	8009a2c <__sfp+0x28>
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	b30b      	cbz	r3, 8009a6c <__sfp+0x68>
 8009a28:	6836      	ldr	r6, [r6, #0]
 8009a2a:	e7f7      	b.n	8009a1c <__sfp+0x18>
 8009a2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a30:	b9d5      	cbnz	r5, 8009a68 <__sfp+0x64>
 8009a32:	4b16      	ldr	r3, [pc, #88]	; (8009a8c <__sfp+0x88>)
 8009a34:	60e3      	str	r3, [r4, #12]
 8009a36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a3a:	6665      	str	r5, [r4, #100]	; 0x64
 8009a3c:	f000 f847 	bl	8009ace <__retarget_lock_init_recursive>
 8009a40:	f7ff ff96 	bl	8009970 <__sfp_lock_release>
 8009a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a4c:	6025      	str	r5, [r4, #0]
 8009a4e:	61a5      	str	r5, [r4, #24]
 8009a50:	2208      	movs	r2, #8
 8009a52:	4629      	mov	r1, r5
 8009a54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a58:	f7fd fab0 	bl	8006fbc <memset>
 8009a5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a64:	4620      	mov	r0, r4
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	3468      	adds	r4, #104	; 0x68
 8009a6a:	e7d9      	b.n	8009a20 <__sfp+0x1c>
 8009a6c:	2104      	movs	r1, #4
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f7ff ff62 	bl	8009938 <__sfmoreglue>
 8009a74:	4604      	mov	r4, r0
 8009a76:	6030      	str	r0, [r6, #0]
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d1d5      	bne.n	8009a28 <__sfp+0x24>
 8009a7c:	f7ff ff78 	bl	8009970 <__sfp_lock_release>
 8009a80:	230c      	movs	r3, #12
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	e7ee      	b.n	8009a64 <__sfp+0x60>
 8009a86:	bf00      	nop
 8009a88:	0800a550 	.word	0x0800a550
 8009a8c:	ffff0001 	.word	0xffff0001

08009a90 <_fwalk_reent>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	4606      	mov	r6, r0
 8009a96:	4688      	mov	r8, r1
 8009a98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a9c:	2700      	movs	r7, #0
 8009a9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aa2:	f1b9 0901 	subs.w	r9, r9, #1
 8009aa6:	d505      	bpl.n	8009ab4 <_fwalk_reent+0x24>
 8009aa8:	6824      	ldr	r4, [r4, #0]
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	d1f7      	bne.n	8009a9e <_fwalk_reent+0xe>
 8009aae:	4638      	mov	r0, r7
 8009ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab4:	89ab      	ldrh	r3, [r5, #12]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d907      	bls.n	8009aca <_fwalk_reent+0x3a>
 8009aba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	d003      	beq.n	8009aca <_fwalk_reent+0x3a>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	47c0      	blx	r8
 8009ac8:	4307      	orrs	r7, r0
 8009aca:	3568      	adds	r5, #104	; 0x68
 8009acc:	e7e9      	b.n	8009aa2 <_fwalk_reent+0x12>

08009ace <__retarget_lock_init_recursive>:
 8009ace:	4770      	bx	lr

08009ad0 <__retarget_lock_acquire_recursive>:
 8009ad0:	4770      	bx	lr

08009ad2 <__retarget_lock_release_recursive>:
 8009ad2:	4770      	bx	lr

08009ad4 <__swhatbuf_r>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	460e      	mov	r6, r1
 8009ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009adc:	2900      	cmp	r1, #0
 8009ade:	b096      	sub	sp, #88	; 0x58
 8009ae0:	4614      	mov	r4, r2
 8009ae2:	461d      	mov	r5, r3
 8009ae4:	da08      	bge.n	8009af8 <__swhatbuf_r+0x24>
 8009ae6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	602a      	str	r2, [r5, #0]
 8009aee:	061a      	lsls	r2, r3, #24
 8009af0:	d410      	bmi.n	8009b14 <__swhatbuf_r+0x40>
 8009af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af6:	e00e      	b.n	8009b16 <__swhatbuf_r+0x42>
 8009af8:	466a      	mov	r2, sp
 8009afa:	f000 f903 	bl	8009d04 <_fstat_r>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	dbf1      	blt.n	8009ae6 <__swhatbuf_r+0x12>
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b0c:	425a      	negs	r2, r3
 8009b0e:	415a      	adcs	r2, r3
 8009b10:	602a      	str	r2, [r5, #0]
 8009b12:	e7ee      	b.n	8009af2 <__swhatbuf_r+0x1e>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	2000      	movs	r0, #0
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	b016      	add	sp, #88	; 0x58
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b20 <__smakebuf_r>:
 8009b20:	898b      	ldrh	r3, [r1, #12]
 8009b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b24:	079d      	lsls	r5, r3, #30
 8009b26:	4606      	mov	r6, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	d507      	bpl.n	8009b3c <__smakebuf_r+0x1c>
 8009b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	6123      	str	r3, [r4, #16]
 8009b34:	2301      	movs	r3, #1
 8009b36:	6163      	str	r3, [r4, #20]
 8009b38:	b002      	add	sp, #8
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	ab01      	add	r3, sp, #4
 8009b3e:	466a      	mov	r2, sp
 8009b40:	f7ff ffc8 	bl	8009ad4 <__swhatbuf_r>
 8009b44:	9900      	ldr	r1, [sp, #0]
 8009b46:	4605      	mov	r5, r0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff f963 	bl	8008e14 <_malloc_r>
 8009b4e:	b948      	cbnz	r0, 8009b64 <__smakebuf_r+0x44>
 8009b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b54:	059a      	lsls	r2, r3, #22
 8009b56:	d4ef      	bmi.n	8009b38 <__smakebuf_r+0x18>
 8009b58:	f023 0303 	bic.w	r3, r3, #3
 8009b5c:	f043 0302 	orr.w	r3, r3, #2
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	e7e3      	b.n	8009b2c <__smakebuf_r+0xc>
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <__smakebuf_r+0x7c>)
 8009b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	6020      	str	r0, [r4, #0]
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	9b00      	ldr	r3, [sp, #0]
 8009b74:	6163      	str	r3, [r4, #20]
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	6120      	str	r0, [r4, #16]
 8009b7a:	b15b      	cbz	r3, 8009b94 <__smakebuf_r+0x74>
 8009b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 f8d1 	bl	8009d28 <_isatty_r>
 8009b86:	b128      	cbz	r0, 8009b94 <__smakebuf_r+0x74>
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	f043 0301 	orr.w	r3, r3, #1
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	89a0      	ldrh	r0, [r4, #12]
 8009b96:	4305      	orrs	r5, r0
 8009b98:	81a5      	strh	r5, [r4, #12]
 8009b9a:	e7cd      	b.n	8009b38 <__smakebuf_r+0x18>
 8009b9c:	0800992d 	.word	0x0800992d

08009ba0 <_malloc_usable_size_r>:
 8009ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba4:	1f18      	subs	r0, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfbc      	itt	lt
 8009baa:	580b      	ldrlt	r3, [r1, r0]
 8009bac:	18c0      	addlt	r0, r0, r3
 8009bae:	4770      	bx	lr

08009bb0 <_raise_r>:
 8009bb0:	291f      	cmp	r1, #31
 8009bb2:	b538      	push	{r3, r4, r5, lr}
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	d904      	bls.n	8009bc4 <_raise_r+0x14>
 8009bba:	2316      	movs	r3, #22
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bc6:	b112      	cbz	r2, 8009bce <_raise_r+0x1e>
 8009bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bcc:	b94b      	cbnz	r3, 8009be2 <_raise_r+0x32>
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 f830 	bl	8009c34 <_getpid_r>
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	4620      	mov	r0, r4
 8009bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bde:	f000 b817 	b.w	8009c10 <_kill_r>
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d00a      	beq.n	8009bfc <_raise_r+0x4c>
 8009be6:	1c59      	adds	r1, r3, #1
 8009be8:	d103      	bne.n	8009bf2 <_raise_r+0x42>
 8009bea:	2316      	movs	r3, #22
 8009bec:	6003      	str	r3, [r0, #0]
 8009bee:	2001      	movs	r0, #1
 8009bf0:	e7e7      	b.n	8009bc2 <_raise_r+0x12>
 8009bf2:	2400      	movs	r4, #0
 8009bf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	4798      	blx	r3
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	e7e0      	b.n	8009bc2 <_raise_r+0x12>

08009c00 <raise>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <raise+0xc>)
 8009c02:	4601      	mov	r1, r0
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f7ff bfd3 	b.w	8009bb0 <_raise_r>
 8009c0a:	bf00      	nop
 8009c0c:	20000014 	.word	0x20000014

08009c10 <_kill_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d07      	ldr	r5, [pc, #28]	; (8009c30 <_kill_r+0x20>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	f7f7 ffbf 	bl	8001ba0 <_kill>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	d102      	bne.n	8009c2c <_kill_r+0x1c>
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	b103      	cbz	r3, 8009c2c <_kill_r+0x1c>
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	200007a0 	.word	0x200007a0

08009c34 <_getpid_r>:
 8009c34:	f7f7 bfac 	b.w	8001b90 <_getpid>

08009c38 <__sread>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	f000 f894 	bl	8009d6c <_read_r>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	bfab      	itete	ge
 8009c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c4c:	181b      	addge	r3, r3, r0
 8009c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c52:	bfac      	ite	ge
 8009c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c56:	81a3      	strhlt	r3, [r4, #12]
 8009c58:	bd10      	pop	{r4, pc}

08009c5a <__swrite>:
 8009c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5e:	461f      	mov	r7, r3
 8009c60:	898b      	ldrh	r3, [r1, #12]
 8009c62:	05db      	lsls	r3, r3, #23
 8009c64:	4605      	mov	r5, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	4616      	mov	r6, r2
 8009c6a:	d505      	bpl.n	8009c78 <__swrite+0x1e>
 8009c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c70:	2302      	movs	r3, #2
 8009c72:	2200      	movs	r2, #0
 8009c74:	f000 f868 	bl	8009d48 <_lseek_r>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	4628      	mov	r0, r5
 8009c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8e:	f000 b817 	b.w	8009cc0 <_write_r>

08009c92 <__sseek>:
 8009c92:	b510      	push	{r4, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9a:	f000 f855 	bl	8009d48 <_lseek_r>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	bf15      	itete	ne
 8009ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cae:	81a3      	strheq	r3, [r4, #12]
 8009cb0:	bf18      	it	ne
 8009cb2:	81a3      	strhne	r3, [r4, #12]
 8009cb4:	bd10      	pop	{r4, pc}

08009cb6 <__sclose>:
 8009cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cba:	f000 b813 	b.w	8009ce4 <_close_r>
	...

08009cc0 <_write_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_write_r+0x20>)
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f7f7 ff9d 	bl	8001c0e <_write>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_write_r+0x1e>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_write_r+0x1e>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	200007a0 	.word	0x200007a0

08009ce4 <_close_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d06      	ldr	r5, [pc, #24]	; (8009d00 <_close_r+0x1c>)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4604      	mov	r4, r0
 8009cec:	4608      	mov	r0, r1
 8009cee:	602b      	str	r3, [r5, #0]
 8009cf0:	f7f7 ffa9 	bl	8001c46 <_close>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_close_r+0x1a>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_close_r+0x1a>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	200007a0 	.word	0x200007a0

08009d04 <_fstat_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	; (8009d24 <_fstat_r+0x20>)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	4611      	mov	r1, r2
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	f7f7 ffa4 	bl	8001c5e <_fstat>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d102      	bne.n	8009d20 <_fstat_r+0x1c>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	b103      	cbz	r3, 8009d20 <_fstat_r+0x1c>
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	bd38      	pop	{r3, r4, r5, pc}
 8009d22:	bf00      	nop
 8009d24:	200007a0 	.word	0x200007a0

08009d28 <_isatty_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d06      	ldr	r5, [pc, #24]	; (8009d44 <_isatty_r+0x1c>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	f7f7 ffa3 	bl	8001c7e <_isatty>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_isatty_r+0x1a>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_isatty_r+0x1a>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	200007a0 	.word	0x200007a0

08009d48 <_lseek_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_lseek_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f7 ff9c 	bl	8001c94 <_lseek>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_lseek_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_lseek_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	200007a0 	.word	0x200007a0

08009d6c <_read_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d07      	ldr	r5, [pc, #28]	; (8009d8c <_read_r+0x20>)
 8009d70:	4604      	mov	r4, r0
 8009d72:	4608      	mov	r0, r1
 8009d74:	4611      	mov	r1, r2
 8009d76:	2200      	movs	r2, #0
 8009d78:	602a      	str	r2, [r5, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f7f7 ff2a 	bl	8001bd4 <_read>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d102      	bne.n	8009d8a <_read_r+0x1e>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	b103      	cbz	r3, 8009d8a <_read_r+0x1e>
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	200007a0 	.word	0x200007a0

08009d90 <_init>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	bf00      	nop
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr

08009d9c <_fini>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	bf00      	nop
 8009da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da2:	bc08      	pop	{r3}
 8009da4:	469e      	mov	lr, r3
 8009da6:	4770      	bx	lr
