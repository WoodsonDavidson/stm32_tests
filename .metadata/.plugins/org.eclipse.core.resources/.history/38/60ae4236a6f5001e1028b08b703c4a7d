/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  uint8_t swrst_cmd = 1;
  //uint8_t rddid_cmd = 4;
  uint8_t slpin_cmd = 0x10;
  uint8_t slpout_cmd = 0x11;
  uint8_t noron_cmd = 0x13;
  uint8_t dispon_cmd = 0x29;
  //uint8_t WRDISBV_cmd = 0x51;
  //uint8_t WRDISBV_prm = 0xa;
  uint8_t column_set_XS[2] = {0,0};
  uint8_t column_set_XE[2] = {0, 250};


  uint8_t raw_set_YS[2] = {0,0};
  uint8_t raw_set_YE[2] = {0, 250};


  uint8_t column_set_cmd = 0x2a;
  uint8_t raw_set_cmd = 0x2b;
  uint8_t memwr_cmd = 0x2c;

  uint8_t color[2] = {0xE7, 0xF6};

  uint8_t interf_pix_format_cmd = 0x3a;
  uint8_t interf_pix_format_prm = 0b01010101;

  uint8_t mem_data_acc_control_cmd = 0x36;
  uint8_t mem_data_acc_control_prm = 0x36;

  //uint8_t display_id[8] = {99, 99, 99, 99, 99, 99, 99, 99};

  HAL_Delay(1000);

  HAL_GPIO_WritePin(GPIOA, RESET_Pin, 0);
  HAL_GPIO_WritePin(GPIOA, RESET_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);


  //
  //HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  //HAL_SPI_Transmit(&hspi1, &swrst_cmd, 1, HAL_MAX_DELAY);
  //HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //

  //
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &slpout_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //

  //
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &noron_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //

  //
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &dispon_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //







  HAL_Delay(100);
  //
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &column_set_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //
  //parameters
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &column_set_XS[0], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &column_set_XS[1], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &column_set_XE[0], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &column_set_XE[1], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //
  HAL_Delay(100);
  //
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &raw_set_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //
  //
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &raw_set_YS[0], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &raw_set_YS[1], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &raw_set_YE[0], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &raw_set_YE[1], 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //

  HAL_Delay(100);





  //
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &interf_pix_format_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //
  //
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &interf_pix_format_prm, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //




  HAL_Delay(100);



  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &memwr_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);

  uint32_t i = 0;
  for(i = 0; i < 139500; i = i+1)
  {
	  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 1);
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
	  HAL_SPI_Transmit(&hspi1, &color[1], 1, HAL_MAX_DELAY);
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);

	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
	  HAL_SPI_Transmit(&hspi1, &color[0], 1, HAL_MAX_DELAY);
	  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  }



  HAL_Delay(100);
  //
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin, 0);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 0);
  HAL_SPI_Transmit(&hspi1, &dispon_cmd, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, CS_Pin, 1);
  //





  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_RS_Pin|RESET_Pin|CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DC_RS_Pin RESET_Pin CS_Pin */
  GPIO_InitStruct.Pin = DC_RS_Pin|RESET_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
